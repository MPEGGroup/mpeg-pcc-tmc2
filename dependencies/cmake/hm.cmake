cmake_minimum_required(VERSION 3.17 FATAL_ERROR)

SET( HM_VERSION         HM-16.20+SCM-8.8 )
SET( HM_DIR             ${CMAKE_SOURCE_DIR}/dependencies/${HM_VERSION}/ )
set( HM_LIB_SOURCE_DIR  ${HM_DIR}/source/Lib )
MESSAGE("Clone HM libraries: ${HM_LIB_SOURCE_DIR}") 

IF( NOT EXISTS "${HM_DIR}/README" )
  MESSAGE("  - HM clone")
  EXECUTE_PROCESS( COMMAND git clone --depth 1 --branch ${HM_VERSION} https://vcgit.hhi.fraunhofer.de/jvet/HM.git ${HM_DIR} RESULT_VARIABLE ret)
  IF( NOT ${ret} EQUAL "0")
    MESSAGE( FATAL_ERROR "Error during the HM git clone process. Check that git is well installed on your system.")
  ENDIF()  
ENDIF()

IF( NOT EXISTS "${HM_DIR}/PATCHED" )
  IF ( USE_HM_PCC_RDO )
    SET( HM_PATCH ${CMAKE_SOURCE_DIR}/dependencies/hm-modification/HM-16.20+SCM-8.8_with_RDO.patch )
  ELSE()
    SET( HM_PATCH ${CMAKE_SOURCE_DIR}/dependencies/hm-modification/HM-16.20+SCM-8.8.patch )
  ENDIF()
  MESSAGE("  - HM patch: ${HM_PATCH}")
  EXECUTE_PROCESS( COMMAND git apply ${HM_PATCH} --whitespace=nowarn WORKING_DIRECTORY ${HM_DIR} RESULT_VARIABLE ret )
  IF( NOT ${ret} EQUAL "0")
    MESSAGE( FATAL_ERROR "Error during the HM patch process. Check that git is well installed on your system." )
  ENDIF()
  FILE( WRITE ${HM_DIR}/PATCHED "HM patched with: " ${HM_PATCH} )   
ENDIF()

function(add_hm_library module)
  file(GLOB cppSourceFiles "${HM_LIB_SOURCE_DIR}/${module}/*.cpp")
  file(GLOB cSourceFiles "${HM_LIB_SOURCE_DIR}/${module}/*.c")
  file(GLOB headerFiles "${HM_LIB_SOURCE_DIR}/${module}/*.h")
  add_library(${module} ${cppSourceFiles} ${cSourceFiles} ${headerFiles})
  set_property(TARGET ${module} PROPERTY CXX_CLANG_TIDY) # no clang-tidy
  add_library(VPCC::${module} ALIAS ${module})
endfunction()

add_hm_library(libmd5)
target_compile_features(libmd5 PUBLIC cxx_std_11)
target_include_directories(libmd5 PUBLIC "$<BUILD_INTERFACE:${HM_LIB_SOURCE_DIR}>")
   
add_hm_library(TLibCommon)
target_link_libraries(TLibCommon PRIVATE libmd5)
target_compile_features(TLibCommon PUBLIC cxx_std_11)
target_include_directories(TLibCommon PUBLIC "$<BUILD_INTERFACE:${HM_LIB_SOURCE_DIR}>")
target_compile_definitions(TLibCommon PUBLIC "$<$<CXX_COMPILER_ID:MSVC>:_CRT_SECURE_NO_WARNINGS>")
target_compile_options(TLibCommon PUBLIC "$<$<CXX_COMPILER_ID:Clang>:-w>")
target_compile_options(TLibCommon PUBLIC "$<$<CXX_COMPILER_ID:GNU>:-w>")
  
add_hm_library(TLibVideoIO)
target_link_libraries(TLibVideoIO PUBLIC TLibCommon)

add_hm_library(TLibDecoder)
target_link_libraries(TLibDecoder PUBLIC TLibCommon)
 
add_hm_library(TLibEncoder)
target_link_libraries(TLibEncoder PUBLIC TLibCommon TLibVideoIO )
