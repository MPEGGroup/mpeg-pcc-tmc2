From 68c7db035f9269e0ba557fb3e6c0cd6db388a90b Mon Sep 17 00:00:00 2001
From: Sheng-Po <samperwang@itri.com>
Date: Mon, 15 Feb 2021 11:48:20 +0800
Subject: [PATCH] SampleStreamITRI.patch

---
 source/app/ldecod/annexb.c     |  87 ++++++++++++++-
 source/app/ldecod/annexb.h     |   7 +-
 source/app/ldecod/nalu.c       |  10 +-
 source/app/lencod/annexb.c     | 194 ++++++++++++++++++++++++++++++++-
 source/app/lencod/annexb.h     |   1 +
 source/app/lencod/filehandle.c |  15 ++-
 6 files changed, 303 insertions(+), 11 deletions(-)

diff --git a/source/app/ldecod/annexb.c b/source/app/ldecod/annexb.c
index 91d921f..99c7974 100644
--- a/source/app/ldecod/annexb.c
+++ b/source/app/ldecod/annexb.c
@@ -17,6 +17,8 @@
 #include "memalloc.h" 
 #include "fast_memory.h"
 
+#define ByteStream2SampleStream
+
 static const int IOBUFFERSIZE = 512*1024; //65536;
 
 void malloc_annex_b(VideoParameters *p_Vid, ANNEXB_t **p_annex_b)
@@ -33,6 +35,8 @@ void malloc_annex_b(VideoParameters *p_Vid, ANNEXB_t **p_annex_b)
 }
 
 
+
+
 void init_annex_b(ANNEXB_t *annex_b)
 {
   annex_b->BitStreamFile = -1;
@@ -238,7 +242,7 @@ int get_annex_b_NALU (VideoParameters *p_Vid, NALU_t *nalu, ANNEXB_t *annex_b)
     }
 
     pos++;
-    *(pBuf ++)  = getfbyte(annex_b);    
+    *(pBuf ++)  = getfbyte(annex_b);
     info3 = FindStartCode(pBuf - 4, 3);
     if(info3 != 1)
     {
@@ -294,6 +298,87 @@ int get_annex_b_NALU (VideoParameters *p_Vid, NALU_t *nalu, ANNEXB_t *annex_b)
 }
 
 
+int get_annex_b_NALU_SampleStream(VideoParameters* p_Vid, NALU_t* nalu, ANNEXB_t* annex_b)
+{
+	int i;
+	int info2 = 0, info3 = 0, pos = 0;
+	int StartCodeFound = 0;
+	byte* pBuf = annex_b->Buf;
+	byte orig_nalu_Buf[MAXRBSPSIZE] = { 0 };
+	int  orig_nalu_len = 0;
+	int  nalu_haeder_size = 4;
+	byte test_Buf[MAXRBSPSIZE] = { 1,2,3,4 };
+
+	if (annex_b->nextstartcodebytes != 0)
+	{
+
+		for (i = 0; i < nalu_haeder_size; i++) {
+			pos++;
+			*(pBuf++) = getfbyte(annex_b);
+		}
+
+
+	}
+	else
+	{
+		while (!annex_b->is_eof)
+		{
+
+			for (i = 0; i < nalu_haeder_size; i++) {
+				pos++;
+				*(pBuf++) = getfbyte(annex_b);
+			}
+
+			break;
+
+		}
+	}
+	orig_nalu_len = 0;
+	for (i = nalu_haeder_size; i > 1; i--) {
+		orig_nalu_len += (annex_b->Buf[nalu_haeder_size - i]) << ((i - 1) * 8);
+
+	}
+	orig_nalu_len += annex_b->Buf[nalu_haeder_size - 1];
+
+	if (annex_b->is_eof == TRUE)
+	{
+		if ((annex_b->Buf[0] == 0) && (annex_b->Buf[1] == 0) && (annex_b->Buf[2] == 0) && (annex_b->Buf[3] == 0))
+		{
+			return 0;
+		}
+		else
+		{
+			printf("get_annex_b_NALU can't read NALU haeder\n");
+			return -1;
+		}
+	}
+
+	nalu->startcodeprefix_len = 4;
+	annex_b->IsFirstByteStreamNALU = 0;
+
+	for (i = 0; i < (orig_nalu_len - 4); i++) {
+		pos++;
+		*(pBuf++) = getfbyte(annex_b);
+	}
+
+	nalu->len = orig_nalu_len - 4;
+	fast_memcpy(nalu->buf, annex_b->Buf + nalu_haeder_size, nalu->len);
+	nalu->forbidden_bit = (*(nalu->buf) >> 7) & 1;
+	nalu->nal_reference_idc = (NalRefIdc)((*(nalu->buf) >> 5) & 3);
+	nalu->nal_unit_type = (NaluType)((*(nalu->buf)) & 0x1f);
+	nalu->lost_packets = 0;
+
+#if TRACE
+	fprintf(p_Dec->p_trace, "\n\nAnnex B NALU w/ %s startcode, len %d, forbidden_bit %d, nal_reference_idc %d, nal_unit_type %d\n\n",
+		nalu->startcodeprefix_len == 4 ? "long" : "short", nalu->len, nalu->forbidden_bit, nalu->nal_reference_idc, nalu->nal_unit_type);
+	fflush(p_Dec->p_trace);
+#endif
+
+	return (pos);
+
+}
+
+
 
 /*!
  ************************************************************************
diff --git a/source/app/ldecod/annexb.h b/source/app/ldecod/annexb.h
index 4ab78ce..2709b33 100644
--- a/source/app/ldecod/annexb.h
+++ b/source/app/ldecod/annexb.h
@@ -14,6 +14,8 @@
 
 #include "nalucommon.h"
 
+#define ITRI_ByteStream2SampleStream
+
 typedef struct annex_b_struct 
 {
   int  BitStreamFile;                //!< the bit stream file
@@ -25,11 +27,14 @@ typedef struct annex_b_struct
 
   int IsFirstByteStreamNALU;
   int nextstartcodebytes;
-  byte *Buf;  
+  byte *Buf;
 } ANNEXB_t;
 
 extern int  get_annex_b_NALU (VideoParameters *p_Vid, NALU_t *nalu, ANNEXB_t *annex_b);
 
+#ifdef ITRI_ByteStream2SampleStream
+extern int  get_annex_b_NALU_SampleStream(VideoParameters* p_Vid, NALU_t* nalu, ANNEXB_t* annex_b);
+#endif
 extern void open_annex_b     (char *fn, ANNEXB_t *annex_b);
 extern void close_annex_b    (ANNEXB_t *annex_b);
 extern void malloc_annex_b   (VideoParameters *p_Vid, ANNEXB_t **p_annex_b);
diff --git a/source/app/ldecod/nalu.c b/source/app/ldecod/nalu.c
index 8f432ed..ad239e5 100644
--- a/source/app/ldecod/nalu.c
+++ b/source/app/ldecod/nalu.c
@@ -21,6 +21,7 @@
 #include "vlc.h"
 #endif
 
+#define ByteStream2SampleStream
 /*!
  *************************************************************************************
  * \brief
@@ -58,11 +59,16 @@ int read_next_nalu(VideoParameters *p_Vid, NALU_t *nalu)
   {
   default:
   case PAR_OF_ANNEXB:
-    ret = get_annex_b_NALU(p_Vid, nalu, p_Vid->annex_b);
+#ifdef ByteStream2SampleStream
+      ret = get_annex_b_NALU_SampleStream(p_Vid, nalu, p_Vid->annex_b);
+#else
+      ret = get_annex_b_NALU(p_Vid, nalu, p_Vid->annex_b);
+#endif
+
     break;
   case PAR_OF_RTP:
     ret = GetRTPNALU(p_Vid, nalu, p_Vid->BitStreamFile);
-    break;   
+    break;
   }
 
   if (ret < 0)
diff --git a/source/app/lencod/annexb.c b/source/app/lencod/annexb.c
index 58ce285..7f055a7 100644
--- a/source/app/lencod/annexb.c
+++ b/source/app/lencod/annexb.c
@@ -15,6 +15,7 @@
 #include "global.h"
 #include "nalucommon.h"
 
+#define ITRI_ByteStream2SampleStream
 /*!
  ********************************************************************************************
  * \brief
@@ -130,6 +131,196 @@ int WriteAnnexbNALU (VideoParameters *p_Vid, NALU_t *n, FILE **f_annexb)
   return BitsWritten;
 }
 
+int WriteAnnexbNALU_SampleStream(VideoParameters* p_Vid, NALU_t* n, FILE** f_annexb)
+{
+    int BitsWritten = 0;
+    int offset = 0;
+    int length = 4;
+    static const byte startcode[] = { 0,0,0,1 };
+    byte first_byte;
+
+    int BytesWritten = 0,last_bytes=0;
+    byte buf_temp[MAXRBSPSIZE] = {0};
+    int  nalu_length = 0;
+    byte nalu_size[] = { 0,0,0,0 };
+
+
+    assert(n != NULL);
+    assert(n->forbidden_bit == 0);
+    assert((*f_annexb) != NULL);
+    assert(n->startcodeprefix_len == 3 || n->startcodeprefix_len == 4);
+
+    // printf ("WriteAnnexbNALU: writing %d bytes w/ startcode_len %d\n", n->len+1, n->startcodeprefix_len);
+    if (n->startcodeprefix_len < 4)
+    {
+        offset = 1;
+        length = 3;
+    }
+
+    memcpy(buf_temp, startcode + offset, length);
+    BytesWritten = length;
+
+    first_byte = (unsigned char)((n->forbidden_bit << 7) | (n->nal_reference_idc << 5) | n->nal_unit_type);
+    memcpy(buf_temp+ BytesWritten, &first_byte, 1);
+    BytesWritten++;
+    
+
+#if (MVC_EXTENSION_ENABLE)
+    if (n->nal_unit_type == NALU_TYPE_PREFIX || n->nal_unit_type == NALU_TYPE_SLC_EXT)
+    {
+        int view_id = p_Vid->p_Inp->MVCFlipViews ? !(n->view_id) : n->view_id;
+
+        first_byte = (unsigned char)((n->svc_extension_flag << 7) | (n->non_idr_flag << 6) | n->priority_id);
+        memcpy(buf_temp + BytesWritten, &first_byte, 1);
+        BytesWritten++;
+
+        first_byte = (unsigned char)(view_id >> 2);
+        memcpy(buf_temp + BytesWritten, &first_byte, 1);
+        BytesWritten++;
+
+        first_byte = (unsigned char)(((view_id & 3) << 6) | (n->temporal_id << 3) | (n->anchor_pic_flag << 2) | (n->inter_view_flag << 1) | n->reserved_one_bit);
+        memcpy(buf_temp + BytesWritten, &first_byte, 1);
+        BytesWritten++;
+    }
+#endif
+    
+    BytesWritten+= n->len;
+
+    nalu_length = 4;
+
+	assert(BytesWritten < 0x100000000);
+    if (BytesWritten < 0x100) {
+        fwrite(startcode, 1, 3, *f_annexb);
+        fwrite(&BytesWritten, 1, (nalu_length - 3), *f_annexb);
+        nalu_size[0] = nalu_size[1] = nalu_size[2] = 0;
+        nalu_size[3] = BytesWritten;
+    }
+    else if (BytesWritten < 0x10000) {
+        nalu_size[0] = nalu_size[1]  = 0;
+        fwrite(startcode, 1, 2, *f_annexb);
+
+        nalu_size[2] = BytesWritten>>8;
+        fwrite(&nalu_size[2], 1,1, *f_annexb);
+
+        nalu_size[3] = (BytesWritten<<8)>>8;
+        fwrite(&nalu_size[3], 1, 1, *f_annexb);
+    }
+    else if (BytesWritten < 0x1000000) {
+        nalu_size[0] = 0;
+        fwrite(startcode, 1, 1, *f_annexb);
+
+        nalu_size[1] = BytesWritten >> 16;
+        fwrite(&nalu_size[1], 1, 1, *f_annexb);
+
+        nalu_size[2] = (BytesWritten << 8) >> 16;
+        fwrite(&nalu_size[2], 1, 1, *f_annexb);
+
+        nalu_size[3] = (BytesWritten << 16) >> 16;
+        fwrite(&nalu_size[3], 1, 1, *f_annexb);
+    }
+    else{
+        nalu_size[0] = BytesWritten >> 24;
+        fwrite(&nalu_size[0], 1, 1, *f_annexb);
+
+        nalu_size[1] = (BytesWritten << 8) >> 24;
+        fwrite(&nalu_size[1], 1, 1, *f_annexb);
+
+        nalu_size[2] = (BytesWritten << 16) >> 24;
+        fwrite(&nalu_size[2], 1, 1, *f_annexb);
+
+        nalu_size[3] = (BytesWritten << 24) >> 24;
+        fwrite(&nalu_size[3], 1, 1, *f_annexb);
+    }
+
+    nalu_length = 4;
+
+    BitsWritten = (nalu_length) << 3;
+    last_bytes = nalu_length;
+
+
+    first_byte = (unsigned char)((n->forbidden_bit << 7) | (n->nal_reference_idc << 5) | n->nal_unit_type);
+
+    if (1 != fwrite(buf_temp + last_bytes, 1, 1, *f_annexb))
+    {
+        printf("Fatal: cannot write %d bytes to bitstream file, exit (-1)\n", 1);
+        exit(-1);
+    }
+
+    BitsWritten += 8;
+    last_bytes++;
+
+
+#if (MVC_EXTENSION_ENABLE)
+    if (n->nal_unit_type == NALU_TYPE_PREFIX || n->nal_unit_type == NALU_TYPE_SLC_EXT)
+    {
+        int view_id = p_Vid->p_Inp->MVCFlipViews ? !(n->view_id) : n->view_id;
+
+        first_byte = (unsigned char)((n->svc_extension_flag << 7) | (n->non_idr_flag << 6) | n->priority_id);
+        if (1 != fwrite(buf_temp + last_bytes, 1, 1, *f_annexb))
+        {
+            printf("Fatal: cannot write %d bytes to bitstream file, exit (-1)\n", 1);
+            exit(-1);
+        }
+        BitsWritten += 8;
+        last_bytes++;
+
+        first_byte = (unsigned char)(view_id >> 2);
+        if (1 != fwrite(buf_temp + last_bytes, 1, 1, *f_annexb))
+        {
+            printf("Fatal: cannot write %d bytes to bitstream file, exit (-1)\n", 1);
+            exit(-1);
+        }
+        BitsWritten += 8;
+        last_bytes++;
+
+        first_byte = (unsigned char)(((view_id & 3) << 6) | (n->temporal_id << 3) | (n->anchor_pic_flag << 2) | (n->inter_view_flag << 1) | n->reserved_one_bit);
+        if (1 != fwrite(buf_temp + last_bytes, 1, 1, *f_annexb))
+        {
+            printf("Fatal: cannot write %d bytes to bitstream file, exit (-1)\n", 1);
+            exit(-1);
+        }
+        BitsWritten += 8;
+        last_bytes++;
+
+    }
+#endif
+
+	if (n->len != fwrite(n->buf, 1, n->len, *f_annexb))
+    {
+        printf("Fatal: cannot write %d bytes to bitstream file, exit (-1)\n", n->len);
+        exit(-1);
+    }
+    BitsWritten += n->len * 8;
+    last_bytes += n->len;
+
+    fflush(*f_annexb);
+#if TRACE
+    //fprintf (p_Enc->p_trace, "\nAnnex B NALU w/ %s startcode, len %d, forbidden_bit %d, nal_reference_idc %d, nal_unit_type %d\n\n\n",
+    //  n->startcodeprefix_len == 4?"long":"short", n->len + 1, n->forbidden_bit, n->nal_reference_idc, n->nal_unit_type);
+    fprintf(p_Enc->p_trace, "\nAnnex B NALU w/ %s startcode, len %d,", n->startcodeprefix_len == 4 ? "long" : "short", n->len + 1);
+    fprintf(p_Enc->p_trace, "\n                forbidden_bit       %d,", n->forbidden_bit);
+    fprintf(p_Enc->p_trace, "\n                nal_reference_idc   %d,", n->nal_reference_idc);
+    fprintf(p_Enc->p_trace, "\n                nal_unit_type       %d ", n->nal_unit_type);
+#if (MVC_EXTENSION_ENABLE)
+    if (n->nal_unit_type == NALU_TYPE_PREFIX || n->nal_unit_type == NALU_TYPE_SLC_EXT)
+    {
+        fprintf(p_Enc->p_trace, "\n                svc_extension_flag  %d ", n->svc_extension_flag);
+        fprintf(p_Enc->p_trace, "\n                non_idr_flag        %d ", n->non_idr_flag);
+        fprintf(p_Enc->p_trace, "\n                priority_id         %d ", n->priority_id);
+
+        fprintf(p_Enc->p_trace, "\n                view_id             %d ", p_Vid->p_Inp->MVCFlipViews ? !(n->view_id) : n->view_id);
+        fprintf(p_Enc->p_trace, "\n                temporal_id         %d ", n->temporal_id);
+        fprintf(p_Enc->p_trace, "\n                anchor_pic_flag     %d ", n->anchor_pic_flag);
+        fprintf(p_Enc->p_trace, "\n                inter_view_flag     %d ", n->inter_view_flag);
+        fprintf(p_Enc->p_trace, "\n                reserved_one_bit    %d ", n->reserved_one_bit);
+    }
+#endif
+    fprintf(p_Enc->p_trace, "\n----------------------------------------------------------------------------\n\n\n");
+    fflush(p_Enc->p_trace);
+#endif
+    return BitsWritten;
+}
+
 
 /*!
  ********************************************************************************************
@@ -172,5 +363,4 @@ void CloseAnnexbFile(FILE *f_annexb)
     printf ("Fatal: cannot close Annex B bytestream file, exit (-1)\n");
     exit (-1);
   }
-}
-
+}
\ No newline at end of file
diff --git a/source/app/lencod/annexb.h b/source/app/lencod/annexb.h
index f033bf1..e5cf5df 100644
--- a/source/app/lencod/annexb.h
+++ b/source/app/lencod/annexb.h
@@ -18,6 +18,7 @@
 #include "nalucommon.h"
 
 extern int WriteAnnexbNALU (VideoParameters *p_Vid, NALU_t *n, FILE **f_annexb);
+extern int WriteAnnexbNALU_SampleStream(VideoParameters* p_Vid, NALU_t* n, FILE** f_annexb);
 extern void OpenAnnexbFile (char *fn, FILE **f_annexb);
 extern void CloseAnnexbFile(FILE *f_annexb);
 
diff --git a/source/app/lencod/filehandle.c b/source/app/lencod/filehandle.c
index 923b1ad..5600ef5 100644
--- a/source/app/lencod/filehandle.c
+++ b/source/app/lencod/filehandle.c
@@ -22,6 +22,7 @@
 #include "parset.h"
 #include "mbuffer.h"
 
+#define ITRI_ByteStream2SampleStream
 
 /*!
  ************************************************************************
@@ -74,8 +75,13 @@ int start_sequence(VideoParameters *p_Vid, InputParameters *p_Inp)
 
   switch(p_Inp->of_mode)
   {
-  case PAR_OF_ANNEXB:      
-    p_Vid->WriteNALU = WriteAnnexbNALU;
+  case PAR_OF_ANNEXB:    
+#ifdef ITRI_ByteStream2SampleStream
+      p_Vid->WriteNALU = WriteAnnexbNALU_SampleStream;
+#else
+      p_Vid->WriteNALU = WriteAnnexbNALU;
+#endif
+
     p_Vid->f_out = &p_Vid->f_annexb;
     OpenAnnexbFile (p_Inp->outfile, p_Vid->f_out);
     break;
@@ -158,7 +164,7 @@ int end_of_stream(VideoParameters *p_Vid)
   nalu->nal_unit_type       = NALU_TYPE_EOSTREAM;
   nalu->len = 0;
   bits = p_Vid->WriteNALU (p_Vid, nalu, p_Vid->f_out);
-  
+
   p_Vid->p_Stats->bit_ctr_parametersets += bits;
   FreeNALU (nalu);
   return bits;
@@ -256,5 +262,4 @@ int terminate_sequence(VideoParameters *p_Vid, InputParameters *p_Inp)
     error(errortext,1);
   }
   return 1;   // make lint happy
-}
-
+}
\ No newline at end of file
-- 
2.29.2.windows.2

