diff --git a/source/App/TAppDecoder/TAppDecCfg.cpp b/source/App/TAppDecoder/TAppDecCfg.cpp
index a17a9bb8..edd9112e 100644
--- a/source/App/TAppDecoder/TAppDecCfg.cpp
+++ b/source/App/TAppDecoder/TAppDecCfg.cpp
@@ -41,6 +41,7 @@
 #include "TAppDecCfg.h"
 #include "TAppCommon/program_options_lite.h"
 #include "TLibCommon/TComChromaFormat.h"
+namespace pcc_hm {
 #ifdef WIN32
 #define strdup _strdup
 #endif
@@ -88,6 +89,10 @@ Bool TAppDecCfg::parseCfg( Int argc, TChar* argv[] )
   ("SEIColourRemappingInfoFilename",  m_colourRemapSEIFileName,        string(""), "Colour Remapping YUV output file name. If empty, no remapping is applied (ignore SEI message)\n")
 #if O0043_BEST_EFFORT_DECODING
   ("ForceDecodeBitDepth",       m_forceDecodeBitDepth,                 0U,         "Force the decoder to operate at a particular bit-depth (best effort decoding)")
+#endif
+#if SAMPLE_STREAM
+  //  ("sampleStreamPrecisionByte",           m_SampleStreamUnitSizePrecisionBytes,          4,       "unit_size_precision_bytes")
+  ("fileformatSampleStream",              m_SampleStream,          false,       "Indicate the file format is sample stream")
 #endif
   ("OutputDecodedSEIMessagesFilename",  m_outputDecodedSEIMessagesFilename,    string(""), "When non empty, output decoded SEI messages to the indicated file. If file is '-', then output to stdout\n")
   ("ClipOutputVideoToRec709Range",      m_bClipOutputVideoToRec709Range,  false, "If true then clip output video to the Rec. 709 Range on saving")
@@ -182,3 +187,6 @@ Bool TAppDecCfg::parseCfg( Int argc, TChar* argv[] )
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/App/TAppDecoder/TAppDecCfg.h b/source/App/TAppDecoder/TAppDecCfg.h
index c3087c3d..4156581d 100644
--- a/source/App/TAppDecoder/TAppDecCfg.h
+++ b/source/App/TAppDecoder/TAppDecCfg.h
@@ -44,6 +44,7 @@
 
 #include "TLibCommon/CommonDef.h"
 #include <vector>
+namespace pcc_hm {
 
 //! \ingroup TAppDecoder
 //! \{
@@ -71,6 +72,10 @@ protected:
 #if O0043_BEST_EFFORT_DECODING
   UInt          m_forceDecodeBitDepth;                ///< if non-zero, force the bit depth at the decoder (best effort decoding)
 #endif
+#if SAMPLE_STREAM
+  Bool          m_SampleStream;
+  UInt          m_SampleStreamUnitSizePrecisionBytes;
+ #endif
   std::string   m_outputDecodedSEIMessagesFilename;   ///< filename to output decoded SEI messages to. If '-', then use stdout. If empty, do not output details.
   Bool          m_bClipOutputVideoToRec709Range;      ///< If true, clip the output video to the Rec 709 range on saving.
 #if MCTS_ENC_CHECK
@@ -92,6 +97,10 @@ public:
   , m_respectDefDispWindow(0)
 #if O0043_BEST_EFFORT_DECODING
   , m_forceDecodeBitDepth(0)
+#endif
+#if SAMPLE_STREAM
+  , m_SampleStream(false)
+  , m_SampleStreamUnitSizePrecisionBytes(4)
 #endif
   , m_outputDecodedSEIMessagesFilename()
   , m_bClipOutputVideoToRec709Range(false)
@@ -112,6 +121,8 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
 
 
+
diff --git a/source/App/TAppDecoder/TAppDecTop.cpp b/source/App/TAppDecoder/TAppDecTop.cpp
index bd890032..a095c0b0 100644
--- a/source/App/TAppDecoder/TAppDecTop.cpp
+++ b/source/App/TAppDecoder/TAppDecTop.cpp
@@ -47,6 +47,7 @@
 #if RExt__DECODER_DEBUG_BIT_STATISTICS
 #include "TLibCommon/TComCodingStatistics.h"
 #endif
+namespace pcc_hm {
 
 //! \ingroup TAppDecoder
 //! \{
@@ -142,6 +143,11 @@ Void TAppDecTop::decode()
     AnnexBStats stats = AnnexBStats();
 
     InputNALUnit nalu;
+#if SAMPLE_STREAM
+    if(m_SampleStream){
+      sampleStreamNALUnit(bytestream, m_SampleStreamUnitSizePrecisionBytes, nalu.getBitstream().getFifo(), stats);
+    }else
+#endif
     byteStreamNALUnit(bytestream, nalu.getBitstream().getFifo(), stats);
 
     // call actual decoding function
@@ -177,6 +183,11 @@ Void TAppDecTop::decode()
           bytestream.reset();
           TComCodingStatistics::SetStatistics(backupStats);
 #else
+#if SAMPLE_STREAM
+          if(m_SampleStream)
+            bitstreamFile.seekg(location);
+          else
+#endif
           bitstreamFile.seekg(location-streamoff(3));
           bytestream.reset();
 #endif
@@ -971,3 +982,6 @@ Void TAppDecTop::applyColourRemapping(const TComPicYuv& pic, SEIColourRemappingI
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/App/TAppDecoder/TAppDecTop.h b/source/App/TAppDecoder/TAppDecTop.h
index 2e89b88b..22f285d0 100644
--- a/source/App/TAppDecoder/TAppDecTop.h
+++ b/source/App/TAppDecoder/TAppDecTop.h
@@ -47,6 +47,7 @@
 #include "TLibCommon/TComPicYuv.h"
 #include "TLibDecoder/TDecTop.h"
 #include "TAppDecCfg.h"
+namespace pcc_hm {
 
 //! \ingroup TAppDecoder
 //! \{
@@ -94,5 +95,7 @@ private:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
 
+
diff --git a/source/App/TAppDecoder/decmain.cpp b/source/App/TAppDecoder/decmain.cpp
index 97d684aa..f970aa97 100644
--- a/source/App/TAppDecoder/decmain.cpp
+++ b/source/App/TAppDecoder/decmain.cpp
@@ -39,6 +39,7 @@
 #include <stdio.h>
 #include <time.h>
 #include "TAppDecTop.h"
+namespace pcc_hm {
 
 //! \ingroup TAppDecoder
 //! \{
@@ -95,3 +96,6 @@ int main(int argc, char* argv[])
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/App/TAppEncoder/TAppEncCfg.cpp b/source/App/TAppEncoder/TAppEncCfg.cpp
index ae643351..876aca5e 100644
--- a/source/App/TAppEncoder/TAppEncCfg.cpp
+++ b/source/App/TAppEncoder/TAppEncCfg.cpp
@@ -45,6 +45,7 @@
 #include "TAppEncCfg.h"
 #include "TAppCommon/program_options_lite.h"
 #include "TLibEncoder/TEncRateCtrl.h"
+namespace pcc_hm {
 #ifdef WIN32
 #define strdup _strdup
 #endif
@@ -132,6 +133,10 @@ TAppEncCfg::TAppEncCfg()
 #if EXTENSION_360_VIDEO
 , m_ext360(*this)
 #endif
+#if SAMPLE_STREAM
+, m_fileformatSampleStream(false)
+, m_SampleStreamUnitSizePrecisionBytes(4)
+#endif
 {
   m_aidQP = NULL;
   m_startOfCodedInterval = NULL;
@@ -782,10 +787,26 @@ Bool TAppEncCfg::parseCfg( Int argc, TChar* argv[] )
   ("WarnUnknowParameter,w",                           warnUnknowParameter,                                  0, "warn for unknown configuration parameters instead of failing")
 
   // File, I/O and source parameters
+#if SAMPLE_STREAM
+  ("fileformateSampleStream",                         m_fileformatSampleStream,                             false, "FileFormat: 1. SampleStream 0.ByteStream(AnnexB)")
+  //("sampleStreamPrecisionBytes",                     m_SampleStreamUnitSizePrecisionBytes,                 4, "FileFormat: Unit Size Precision in Byte for SampleStream")
+#endif
   ("InputFile,i",                                     m_inputFileName,                             string(""), "Original YUV input file name")
   ("InputPathPrefix,-ipp",                            inputPathPrefix,                             string(""), "pathname to prepend to input filename")
   ("BitstreamFile,b",                                 m_bitstreamFileName,                         string(""), "Bitstream output file name")
   ("ReconFile,o",                                     m_reconFileName,                             string(""), "Reconstructed YUV output file name")
+#if PATCH_BASED_MVP || PCC_ME_EXT
+  ("UsePccMotionEstimation",                          m_usePCCExt,                                      false, "Use modified motion estimation for PCC content")
+	  ("BlockToPatchFile",                            m_blockToPatchFileName,                      string(""), "Input block to patch file name")
+	  ("OccupancyMapFile",                            m_occupancyMapFileName,                      string(""), "Input occupancy map file name")
+	  ("PatchInfoFile",                               m_patchInfoFileName,                         string(""), "Input patch info file name")
+#endif
+#if PCC_RDO_EXT
+  ("UsePccRDO",                                       m_usePCCRDO,                                      false, "Use modified RDO for PCC content")
+#endif
+#if PCC_RDO_EXT && !PCC_ME_EXT
+  ("OccupancyMapFile",                                m_occupancyMapFileName,                      string(""), "Input occupancy map file name")
+#endif
   ("SourceWidth,-wdt",                                m_iSourceWidth,                                       0, "Source picture width")
   ("SourceHeight,-hgt",                               m_iSourceHeight,                                      0, "Source picture height")
   ("InputBitDepth",                                   m_inputBitDepth[CHANNEL_TYPE_LUMA],                   8, "Bit-depth of input file")
@@ -3083,6 +3104,27 @@ Void TAppEncCfg::xPrintParameter()
   printf("Input          File                    : %s\n", m_inputFileName.c_str()          );
   printf("Bitstream      File                    : %s\n", m_bitstreamFileName.c_str()      );
   printf("Reconstruction File                    : %s\n", m_reconFileName.c_str()          );
+#if SAMPLE_STREAM
+  Bool        m_fileformatSampleStream;
+  UInt        m_SampleStreamUnitSizePrecisionBytes;
+#endif
+#if PATCH_BASED_MVP || PCC_ME_EXT
+  printf("PCCExt                                 : %s\n", (m_usePCCExt ? "Enabled" : "Disabled"));
+  if (m_usePCCExt) {
+	  printf("BlockToPatch   File                    : %s\n", (m_blockToPatchFileName.c_str()));
+	  printf("OccupancyMap   File                    : %s\n", (m_occupancyMapFileName.c_str()));
+	  printf("PatchInfo      File                    : %s\n", (m_patchInfoFileName.c_str()));
+  }
+#endif
+#if PCC_RDO_EXT
+  printf("PCCRDO                                 : %s\n", (m_usePCCRDO ? "Enabled" : "Disabled"));
+#endif
+#if PCC_RDO_EXT && !PCC_ME_EXT
+  if (m_usePCCRDO)
+  {
+    printf("OccupancyMap   File                  : %s\n", (m_occupancyMapFileName.c_str()));
+  }
+#endif
   printf("Real     Format                        : %dx%d %gHz\n", m_iSourceWidth - m_confWinLeft - m_confWinRight, m_iSourceHeight - m_confWinTop - m_confWinBottom, (Double)m_iFrameRate/m_temporalSubsampleRatio );
   printf("Internal Format                        : %dx%d %gHz\n", m_iSourceWidth, m_iSourceHeight, (Double)m_iFrameRate/m_temporalSubsampleRatio );
   printf("Sequence PSNR output                   : %s\n", (m_printMSEBasedSequencePSNR ? "Linear average, MSE-based" : "Linear average only") );
@@ -3350,3 +3392,6 @@ Bool confirmPara(Bool bflag, const TChar* message)
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/App/TAppEncoder/TAppEncCfg.h b/source/App/TAppEncoder/TAppEncCfg.h
index 5f6c8fe0..239d016f 100644
--- a/source/App/TAppEncoder/TAppEncCfg.h
+++ b/source/App/TAppEncoder/TAppEncCfg.h
@@ -46,6 +46,7 @@
 #endif
 #include <sstream>
 #include <vector>
+namespace pcc_hm {
 //! \ingroup TAppEncoder
 //! \{
 
@@ -72,7 +73,18 @@ protected:
   std::string m_inputFileName;                                ///< source file name
   std::string m_bitstreamFileName;                            ///< output bitstream file
   std::string m_reconFileName;                                ///< output reconstruction file
-
+#if PCC_ME_EXT
+  Bool        m_usePCCExt;
+  std::string m_blockToPatchFileName;
+  std::string m_occupancyMapFileName;
+  std::string m_patchInfoFileName;
+#endif
+#if PCC_RDO_EXT
+  Bool        m_usePCCRDO;
+#endif
+#if PCC_RDO_EXT && !PCC_ME_EXT
+  std::string m_occupancyMapFileName;
+#endif
   // Lambda modifiers
   Double    m_adLambdaModifier[ MAX_TLAYER ];                 ///< Lambda modifier array for each temporal layer
   std::vector<Double> m_adIntraLambdaModifier;                ///< Lambda modifier for Intra pictures, one for each temporal layer. If size>temporalLayer, then use [temporalLayer], else if size>0, use [size()-1], else use m_adLambdaModifier.
@@ -549,5 +561,7 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TAPPENCCFG__
 
+
diff --git a/source/App/TAppEncoder/TAppEncTop.cpp b/source/App/TAppEncoder/TAppEncTop.cpp
index 71ef375d..80204632 100644
--- a/source/App/TAppEncoder/TAppEncTop.cpp
+++ b/source/App/TAppEncoder/TAppEncTop.cpp
@@ -49,6 +49,7 @@
 #if EXTENSION_360_VIDEO
 #include "TAppEncHelper360/TExt360AppEncTop.h"
 #endif
+namespace pcc_hm {
 
 using namespace std;
 
@@ -87,6 +88,21 @@ Void TAppEncTop::xInitLibCfg()
   }
   m_cTEncTop.setVPS(&vps);
 
+#if PCC_ME_EXT
+  m_cTEncTop.setUsePCCExt(m_usePCCExt);
+  if (m_usePCCExt) {
+	m_cTEncTop.setBlockToPatchFileName(m_blockToPatchFileName);
+	m_cTEncTop.setOccupancyMapFileName(m_occupancyMapFileName);
+	//m_cTencTop.setPatchInfoFileName                                 ( m_patchInfoFileName );
+  }
+#endif
+#if PCC_RDO_EXT
+  m_cTEncTop.setUsePCCRDOExt(m_usePCCRDO);
+#endif
+#if PCC_RDO_EXT && !PCC_ME_EXT
+  m_cTEncTop.setOccupancyMapFileName(m_occupancyMapFileName);
+#endif
+
   m_cTEncTop.setProfile                                           ( m_profile);
   m_cTEncTop.setLevel                                             ( m_levelTier, m_level);
   m_cTEncTop.setProgressiveSourceFlag                             ( m_progressiveSourceFlag);
@@ -605,6 +621,51 @@ Void TAppEncTop::encode()
   xCreateLib();
   xInitLib(m_isField);
 
+#if PCC_ME_EXT
+  if (m_usePCCExt)
+  {
+	  printf("\nReading the aux info files\n");
+	  FILE* patchFile = NULL;
+	  patchFile = fopen(m_patchInfoFileName.c_str(), "rb");
+
+	  for (Int i = 0; i < PCC_ME_EXT_MAX_NUM_FRAMES; i++)
+	  {
+		  long long readSize = fread(&g_numPatches[i], sizeof(long long), 1, patchFile);
+
+		  if (readSize != 1 && readSize != 0)
+		  {
+			  printf("error: Wrong Patch data group file");
+		  }
+
+		  for (Int patchIdx = 0; patchIdx < g_numPatches[i]; patchIdx++)
+		  {
+			  readSize = fread(&g_projectionIndex[i][patchIdx], sizeof(long long), 1, patchFile);
+
+			  if (readSize != 1)
+			  {
+				  printf("error: Wrong Auxiliary data format");
+			  }
+
+			  readSize = fread(g_patch2DInfo[i][patchIdx], sizeof(long long), 4, patchFile);
+
+			  if (readSize != 4)
+			  {
+				  printf("error: Wrong Auxiliary data format");
+			  }
+
+			  readSize = fread(g_patch3DInfo[i][patchIdx], sizeof(long long), 3, patchFile);
+
+			  if (readSize != 3)
+			  {
+				  printf("error: Wrong Auxiliary data format");
+			  }
+		  }
+	  }
+
+	  fclose(patchFile);
+  }
+#endif
+
   printChromaFormat();
 
   // main encoder loop
@@ -819,8 +880,17 @@ Void TAppEncTop::xWriteOutput(std::ostream& bitstreamFile, Int iNumEncoded, cons
       }
 
       const AccessUnit& au = *(iterBitstream++);
+#if SAMPLE_STREAM
+      if(m_fileformatSampleStream){
+        const vector<UInt>& stats = writeSampleStream(bitstreamFile, m_SampleStreamUnitSizePrecisionBytes, au);
+        rateStatsAccum(au, stats);
+      } else{
+#endif
       const vector<UInt>& stats = writeAnnexB(bitstreamFile, au);
       rateStatsAccum(au, stats);
+#if SAMPLE_STREAM
+      }
+#endif
     }
   }
 }
@@ -906,3 +976,6 @@ Void TAppEncTop::printChromaFormat()
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/App/TAppEncoder/TAppEncTop.h b/source/App/TAppEncoder/TAppEncTop.h
index 17498261..2112ea08 100644
--- a/source/App/TAppEncoder/TAppEncTop.h
+++ b/source/App/TAppEncoder/TAppEncTop.h
@@ -45,6 +45,7 @@
 #include "TLibVideoIO/TVideoIOYuv.h"
 #include "TLibCommon/AccessUnit.h"
 #include "TAppEncCfg.h"
+namespace pcc_hm {
 
 //! \ingroup TAppEncoder
 //! \{
@@ -99,5 +100,7 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TAPPENCTOP__
 
+
diff --git a/source/App/TAppEncoder/encmain.cpp b/source/App/TAppEncoder/encmain.cpp
index 6ac8a806..895347b5 100644
--- a/source/App/TAppEncoder/encmain.cpp
+++ b/source/App/TAppEncoder/encmain.cpp
@@ -44,6 +44,7 @@
 //! \{
 
 #include "../Lib/TLibCommon/Debug.h"
+namespace pcc_hm {
 
 // ====================================================================================================================
 // Main function
@@ -108,3 +109,6 @@ int main(int argc, char* argv[])
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/App/utils/BitrateTargeting/ExtractBitrates.cpp b/source/App/utils/BitrateTargeting/ExtractBitrates.cpp
index 4929cfb4..792fe376 100644
--- a/source/App/utils/BitrateTargeting/ExtractBitrates.cpp
+++ b/source/App/utils/BitrateTargeting/ExtractBitrates.cpp
@@ -37,6 +37,7 @@
 #include <cassert>
 #include <limits>
 #include <map>
+namespace pcc_hm {
 
 namespace
 {
@@ -210,3 +211,6 @@ std::vector< double > extractBitratesForTemporalLayers( std::istream& i )
 
   return result;
 }
+
+
+} // namespace pcc_hm
diff --git a/source/App/utils/BitrateTargeting/ExtractBitrates.h b/source/App/utils/BitrateTargeting/ExtractBitrates.h
index 6ef6b210..9c768195 100644
--- a/source/App/utils/BitrateTargeting/ExtractBitrates.h
+++ b/source/App/utils/BitrateTargeting/ExtractBitrates.h
@@ -36,6 +36,7 @@
 
 #include "RuntimeError.h"
 #include <vector>
+namespace pcc_hm {
 
 /// An error occured while parsing a POC line from within a log file
 class POCParseException: public RuntimeError
@@ -68,4 +69,6 @@ class NonContiguousQPSetException: public RuntimeError
 /// \throw NonContiguousQPSetException if the QP set from the log file was not contiguous
 std::vector< double > extractBitratesForTemporalLayers( std::istream& i );
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/App/utils/BitrateTargeting/ExtractBitratesMain.cpp b/source/App/utils/BitrateTargeting/ExtractBitratesMain.cpp
index adfd71fe..b120e958 100644
--- a/source/App/utils/BitrateTargeting/ExtractBitratesMain.cpp
+++ b/source/App/utils/BitrateTargeting/ExtractBitratesMain.cpp
@@ -34,6 +34,7 @@
 #include <iostream>
 #include <cassert>
 #include "ExtractBitrates.h"
+namespace pcc_hm {
 
 /// In out, finds the first occurence of toFind and replaces it with "e"
 /// \pre toFind must have a size of 2
@@ -97,3 +98,6 @@ int main( int, char** )
     return 1;
   }
 }
+
+
+} // namespace pcc_hm
diff --git a/source/App/utils/BitrateTargeting/GuessLambdaModifiers.cpp b/source/App/utils/BitrateTargeting/GuessLambdaModifiers.cpp
index 6844c74d..2e494e29 100644
--- a/source/App/utils/BitrateTargeting/GuessLambdaModifiers.cpp
+++ b/source/App/utils/BitrateTargeting/GuessLambdaModifiers.cpp
@@ -35,6 +35,7 @@
 #include <limits>
 #include <cassert>
 #include <cmath>
+namespace pcc_hm {
 
 namespace
 {
@@ -482,3 +483,6 @@ void guessLambdaModifiers(
   } while( indexIter != firstIndexSet.end( ) );
   assert( resultIter == resultVector.end( ) );  // The index set and the result vector should be the same size
 }
+
+
+} // namespace pcc_hm
diff --git a/source/App/utils/BitrateTargeting/GuessLambdaModifiers.h b/source/App/utils/BitrateTargeting/GuessLambdaModifiers.h
index 6722250b..88637b84 100644
--- a/source/App/utils/BitrateTargeting/GuessLambdaModifiers.h
+++ b/source/App/utils/BitrateTargeting/GuessLambdaModifiers.h
@@ -40,6 +40,7 @@
 #include <list>
 #include <set>
 #include <limits>
+namespace pcc_hm {
 
 /// Thrown if there is an error parsing the initial adjustment parameter
 class InitialAdjustmentParameterParseException: public RuntimeError
@@ -145,4 +146,6 @@ void guessLambdaModifiers(
     std::istream& targetsIstream,
     std::istream& metaLogIstream );
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/App/utils/BitrateTargeting/GuessLambdaModifiersMain.cpp b/source/App/utils/BitrateTargeting/GuessLambdaModifiersMain.cpp
index 410438aa..a99e340c 100644
--- a/source/App/utils/BitrateTargeting/GuessLambdaModifiersMain.cpp
+++ b/source/App/utils/BitrateTargeting/GuessLambdaModifiersMain.cpp
@@ -35,6 +35,7 @@
 #include "RuntimeError.h"
 #include "GuessLambdaModifiers.h"
 #include <iostream>
+namespace pcc_hm {
 
 class WrongNumberOfArgumentsException: public RuntimeError
 {
@@ -73,3 +74,6 @@ int main( int argc, char** ppArgv )
   }
   return 1;
 }
+
+
+} // namespace pcc_hm
diff --git a/source/App/utils/BitrateTargeting/RuntimeError.h b/source/App/utils/BitrateTargeting/RuntimeError.h
index d68888e6..18c8aa9c 100644
--- a/source/App/utils/BitrateTargeting/RuntimeError.h
+++ b/source/App/utils/BitrateTargeting/RuntimeError.h
@@ -36,6 +36,7 @@
 
 #include <sstream>
 #include <stdexcept>
+namespace pcc_hm {
 
 /// This class serves the same purpose as std::runtime_error, but it can be more convenient to use
 class RuntimeError: public std::runtime_error
@@ -73,4 +74,6 @@ inline std::ostream& operator<<( std::ostream& left, const RuntimeError& right )
   return left << right.what( );
 }
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/App/utils/annexBbytecount.cpp b/source/App/utils/annexBbytecount.cpp
index 27c28268..5e4db600 100644
--- a/source/App/utils/annexBbytecount.cpp
+++ b/source/App/utils/annexBbytecount.cpp
@@ -39,6 +39,7 @@
 #include <string.h>
 
 #include "TLibDecoder/AnnexBread.h"
+namespace pcc_hm {
 
 using namespace std;
 
@@ -239,3 +240,6 @@ int main(int argc, char*argv[])
 
   return 0;
 }
+
+
+} // namespace pcc_hm
diff --git a/source/App/utils/convert_NtoMbit_YCbCr.cpp b/source/App/utils/convert_NtoMbit_YCbCr.cpp
index 6d9454aa..4ca50381 100644
--- a/source/App/utils/convert_NtoMbit_YCbCr.cpp
+++ b/source/App/utils/convert_NtoMbit_YCbCr.cpp
@@ -36,6 +36,7 @@
 #include "TLibCommon/TComPicYuv.h"
 #include "TLibVideoIO/TVideoIOYuv.h"
 #include "TAppCommon/program_options_lite.h"
+namespace pcc_hm {
 
 using namespace std;
 namespace po = df::program_options_lite;
@@ -146,3 +147,6 @@ Int main(Int argc, const char** argv)
 
   return EXIT_SUCCESS;
 }
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TAppCommon/program_options_lite.cpp b/source/Lib/TAppCommon/program_options_lite.cpp
index 009dbdf8..260b14c6 100644
--- a/source/Lib/TAppCommon/program_options_lite.cpp
+++ b/source/Lib/TAppCommon/program_options_lite.cpp
@@ -39,6 +39,7 @@
 #include <map>
 #include <algorithm>
 #include "program_options_lite.h"
+namespace pcc_hm {
 
 using namespace std;
 
@@ -564,3 +565,6 @@ namespace df
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TAppCommon/program_options_lite.h b/source/Lib/TAppCommon/program_options_lite.h
index 0a71a233..9e95202f 100644
--- a/source/Lib/TAppCommon/program_options_lite.h
+++ b/source/Lib/TAppCommon/program_options_lite.h
@@ -36,6 +36,8 @@
 #include <list>
 #include <map>
 
+namespace pcc_hm {
+
 #ifndef __PROGRAM_OPTIONS_LITE__
 #define __PROGRAM_OPTIONS_LITE__
 
@@ -242,4 +244,6 @@ namespace df
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibCommon/AccessUnit.h b/source/Lib/TLibCommon/AccessUnit.h
index 64dd0e7e..c27d68dc 100644
--- a/source/Lib/TLibCommon/AccessUnit.h
+++ b/source/Lib/TLibCommon/AccessUnit.h
@@ -43,6 +43,7 @@
 
 #include <list>
 #include "NAL.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -73,4 +74,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibCommon/CommonDef.h b/source/Lib/TLibCommon/CommonDef.h
index aeec7351..d2556442 100644
--- a/source/Lib/TLibCommon/CommonDef.h
+++ b/source/Lib/TLibCommon/CommonDef.h
@@ -43,6 +43,8 @@
 #include <assert.h>
 #include <limits>
 
+#define SAMPLE_STREAM 1
+
 #if _MSC_VER > 1000
 // disable "signed and unsigned mismatch"
 #pragma warning( disable : 4018 )
@@ -50,6 +52,7 @@
 #pragma warning( disable : 4800 )
 #endif // _MSC_VER > 1000
 #include "TypeDef.h"
+namespace pcc_hm {
 
 #ifdef _MSC_VER
 #if _MSC_VER <= 1500
@@ -312,5 +315,7 @@ template <typename ValueType> inline ValueType rightShiftEvenRounding(const Valu
 
 //! \}
 
+} // namespace pcc_hm
 #endif // end of #ifndef  __COMMONDEF__
 
+
diff --git a/source/Lib/TLibCommon/ContextModel.cpp b/source/Lib/TLibCommon/ContextModel.cpp
index d6ea087e..58feff11 100644
--- a/source/Lib/TLibCommon/ContextModel.cpp
+++ b/source/Lib/TLibCommon/ContextModel.cpp
@@ -38,6 +38,7 @@
 #include <algorithm>
 
 #include "ContextModel.h"
+namespace pcc_hm {
 
 using namespace std;
 //! \ingroup TLibCommon
@@ -127,3 +128,6 @@ const Int ContextModel::m_entropyBits[ ContextModel::m_totalStates ] =
 #endif
 };
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/ContextModel.h b/source/Lib/TLibCommon/ContextModel.h
index 7a3942d9..6fef4b69 100644
--- a/source/Lib/TLibCommon/ContextModel.h
+++ b/source/Lib/TLibCommon/ContextModel.h
@@ -45,6 +45,7 @@
 
 #include "CommonDef.h"
 #include "TComRom.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -107,5 +108,7 @@ private:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
 
+
diff --git a/source/Lib/TLibCommon/ContextModel3DBuffer.cpp b/source/Lib/TLibCommon/ContextModel3DBuffer.cpp
index 1e308d9c..c63bd110 100644
--- a/source/Lib/TLibCommon/ContextModel3DBuffer.cpp
+++ b/source/Lib/TLibCommon/ContextModel3DBuffer.cpp
@@ -36,6 +36,7 @@
 */
 
 #include "ContextModel3DBuffer.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -118,3 +119,6 @@ UInt ContextModel3DBuffer::calcCost( SliceType sliceType, Int qp, UChar* ctxMode
   return cost;
 }
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/ContextModel3DBuffer.h b/source/Lib/TLibCommon/ContextModel3DBuffer.h
index 0e33a3e3..8cbb89ef 100644
--- a/source/Lib/TLibCommon/ContextModel3DBuffer.h
+++ b/source/Lib/TLibCommon/ContextModel3DBuffer.h
@@ -43,6 +43,7 @@
 
 #include "CommonDef.h"
 #include "ContextModel.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -94,4 +95,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // _HM_CONTEXT_MODEL_3DBUFFER_H_
+
diff --git a/source/Lib/TLibCommon/ContextTables.h b/source/Lib/TLibCommon/ContextTables.h
index 538b2f90..51ac534a 100644
--- a/source/Lib/TLibCommon/ContextTables.h
+++ b/source/Lib/TLibCommon/ContextTables.h
@@ -39,6 +39,7 @@
 #ifndef __CONTEXTTABLES__
 #define __CONTEXTTABLES__
 #include <cstring>
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -564,4 +565,6 @@ INIT_SCAN_ROTATION_FLAG[NUMBER_OF_SLICE_TYPES][NUM_SCAN_ROTATION_FLAG_CTX] =
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibCommon/Debug.cpp b/source/Lib/TLibCommon/Debug.cpp
index d06f9640..545339c3 100644
--- a/source/Lib/TLibCommon/Debug.cpp
+++ b/source/Lib/TLibCommon/Debug.cpp
@@ -41,6 +41,7 @@
 #include "TComDataCU.h"
 #include "TComPic.h"
 #include "TComYuv.h"
+namespace pcc_hm {
 
 static const UInt settingNameWidth  = 66;
 static const UInt settingHelpWidth  = 84;
@@ -182,6 +183,7 @@ Void printMacroSettings()
   PRINT_CONSTANT(O0043_BEST_EFFORT_DECODING,                                        settingNameWidth, settingValueWidth);
 
   PRINT_CONSTANT(ME_ENABLE_ROUNDING_OF_MVS,                                         settingNameWidth, settingValueWidth);
+  PRINT_CONSTANT(PCC_ME_EXT,                                                        settingNameWidth, settingValueWidth);
 
   //------------------------------------------------
 
@@ -490,3 +492,6 @@ Void DebugInterPredResiReco(std::string &sDebug, TComYuv &pred, TComYuv &resi, T
   }
 }
 #endif
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/Debug.h b/source/Lib/TLibCommon/Debug.h
index 5c6f3f2c..3faba7f6 100644
--- a/source/Lib/TLibCommon/Debug.h
+++ b/source/Lib/TLibCommon/Debug.h
@@ -45,6 +45,7 @@
 #include <stdlib.h>
 #include <sstream>
 #include <TLibCommon/CommonDef.h>
+namespace pcc_hm {
 
 #if DEBUG_STRING
 extern const TChar *debug_reorder_data_token[2/*Inter=0, Intra block copy=1*/][MAX_NUM_COMPONENT+1];
@@ -275,4 +276,6 @@ std::string indentNewLines(const std::string &input, const UInt indentBy);
 #endif
 
 
+} // namespace pcc_hm
 #endif /* __DEBUG__ */
+
diff --git a/source/Lib/TLibCommon/NAL.h b/source/Lib/TLibCommon/NAL.h
index 2fa4d19b..45d40d42 100644
--- a/source/Lib/TLibCommon/NAL.h
+++ b/source/Lib/TLibCommon/NAL.h
@@ -38,6 +38,7 @@
 
 #include <sstream>
 #include "CommonDef.h"
+namespace pcc_hm {
 
 class TComOutputBitstream;
 
@@ -121,4 +122,6 @@ struct NALUnitEBSP : public NALUnit
 //! \}
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibCommon/SEI.cpp b/source/Lib/TLibCommon/SEI.cpp
index 5dfad04b..9c34cfd1 100644
--- a/source/Lib/TLibCommon/SEI.cpp
+++ b/source/Lib/TLibCommon/SEI.cpp
@@ -38,6 +38,7 @@
 #include "CommonDef.h"
 #include "SEI.h"
 #include <iostream>
+namespace pcc_hm {
 
 const std::vector<SEI::PayloadType> SEI::prefix_sei_messages({
   SEI::BUFFERING_PERIOD,
@@ -327,3 +328,6 @@ const TChar *SEI::getSEIMessageString(SEI::PayloadType payloadType)
     default:                                        return "Unknown";
   }
 }
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/SEI.h b/source/Lib/TLibCommon/SEI.h
index 45d4aad1..f979a595 100644
--- a/source/Lib/TLibCommon/SEI.h
+++ b/source/Lib/TLibCommon/SEI.h
@@ -41,6 +41,7 @@
 
 #include "CommonDef.h"
 #include "libmd5/MD5.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -1124,5 +1125,7 @@ private:
   RNSEIWindowVec m_regions;
   std::vector< SEIListOfIndices > m_rnSeiMessages;
 };
+} // namespace pcc_hm
 #endif
 //! \}
+
diff --git a/source/Lib/TLibCommon/TComBitCounter.h b/source/Lib/TLibCommon/TComBitCounter.h
index dc850336..5e6810ca 100644
--- a/source/Lib/TLibCommon/TComBitCounter.h
+++ b/source/Lib/TLibCommon/TComBitCounter.h
@@ -43,6 +43,7 @@
 #endif // _MSC_VER > 1000
 
 #include "TComBitStream.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -70,4 +71,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibCommon/TComBitStream.cpp b/source/Lib/TLibCommon/TComBitStream.cpp
index 81360d74..3cd93b3d 100644
--- a/source/Lib/TLibCommon/TComBitStream.cpp
+++ b/source/Lib/TLibCommon/TComBitStream.cpp
@@ -40,6 +40,7 @@
 #include "TComBitStream.h"
 #include <string.h>
 #include <memory.h>
+namespace pcc_hm {
 
 using namespace std;
 
@@ -410,3 +411,6 @@ UInt TComInputBitstream::readByteAlignment()
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComBitStream.h b/source/Lib/TLibCommon/TComBitStream.h
index dcd8c09f..d9683059 100644
--- a/source/Lib/TLibCommon/TComBitStream.h
+++ b/source/Lib/TLibCommon/TComBitStream.h
@@ -46,6 +46,7 @@
 #include <vector>
 #include <stdio.h>
 #include "CommonDef.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -228,4 +229,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibCommon/TComCABACTables.cpp b/source/Lib/TLibCommon/TComCABACTables.cpp
index d7c964ac..34934a75 100644
--- a/source/Lib/TLibCommon/TComCABACTables.cpp
+++ b/source/Lib/TLibCommon/TComCABACTables.cpp
@@ -36,6 +36,7 @@
  */
 
 #include "TComCABACTables.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -121,3 +122,6 @@ const UChar TComCABACTables::sm_aucRenormTable[32] =
 };
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComCABACTables.h b/source/Lib/TLibCommon/TComCABACTables.h
index 706c06c2..812c7e53 100644
--- a/source/Lib/TLibCommon/TComCABACTables.h
+++ b/source/Lib/TLibCommon/TComCABACTables.h
@@ -40,6 +40,7 @@
 
 #include "TLibCommon/CommonDef.h"
 #include "TLibCommon/TComRom.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -58,4 +59,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibCommon/TComChromaFormat.cpp b/source/Lib/TLibCommon/TComChromaFormat.cpp
index bc49f09a..690bf140 100644
--- a/source/Lib/TLibCommon/TComChromaFormat.cpp
+++ b/source/Lib/TLibCommon/TComChromaFormat.cpp
@@ -37,6 +37,7 @@
 #include "TComDataCU.h"
 #include "TComTrQuant.h"
 #include "TComTU.h"
+namespace pcc_hm {
 
 
 
@@ -161,3 +162,6 @@ Void getTUEntropyCodingParameters(      TUEntropyCodingParameters &result,
 
 
 //----------------------------------------------------------------------------------------------------------------------
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComChromaFormat.h b/source/Lib/TLibCommon/TComChromaFormat.h
index 08e73d3f..5598ec58 100644
--- a/source/Lib/TLibCommon/TComChromaFormat.h
+++ b/source/Lib/TLibCommon/TComChromaFormat.h
@@ -42,6 +42,7 @@
 #include <vector>
 #include <assert.h>
 #include "Debug.h"
+namespace pcc_hm {
 
 //======================================================================================================================
 //Chroma format utility functions  =====================================================================================
@@ -274,4 +275,6 @@ Void getTUEntropyCodingParameters(      TUEntropyCodingParameters &result,
 //End  =================================================================================================================
 //======================================================================================================================
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibCommon/TComCodingStatistics.h b/source/Lib/TLibCommon/TComCodingStatistics.h
index 440eef8a..02279c4a 100644
--- a/source/Lib/TLibCommon/TComCodingStatistics.h
+++ b/source/Lib/TLibCommon/TComCodingStatistics.h
@@ -40,6 +40,7 @@
 #include <map>
 #include <math.h>
 #include "TComChromaFormat.h"
+namespace pcc_hm {
 
 static const Int64 TCOMCODINGSTATISTICS_ENTROPYSCALE=32768;
 
@@ -486,4 +487,6 @@ class TComCodingStatistics
     }
 };
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibCommon/TComDataCU.cpp b/source/Lib/TLibCommon/TComDataCU.cpp
index f9fe0e2c..5d236290 100644
--- a/source/Lib/TLibCommon/TComDataCU.cpp
+++ b/source/Lib/TLibCommon/TComDataCU.cpp
@@ -39,6 +39,7 @@
 #include "TComDataCU.h"
 #include "TComTU.h"
 #include "TComPic.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -4045,3 +4046,6 @@ Void TComDataCU::storeMVForIBCEnc()
 }
 #endif
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComDataCU.h b/source/Lib/TLibCommon/TComDataCU.h
index 04acd9ca..5fa02972 100644
--- a/source/Lib/TLibCommon/TComDataCU.h
+++ b/source/Lib/TLibCommon/TComDataCU.h
@@ -48,6 +48,7 @@
 #include "TComSlice.h"
 #include "TComRdCost.h"
 #include "TComPattern.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -668,4 +669,6 @@ namespace RasterAddress
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibCommon/TComHash.cpp b/source/Lib/TLibCommon/TComHash.cpp
index 701e17d1..be225461 100644
--- a/source/Lib/TLibCommon/TComHash.cpp
+++ b/source/Lib/TLibCommon/TComHash.cpp
@@ -37,6 +37,7 @@
 
 #include "CommonDef.h"
 #include "TComHash.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -670,3 +671,6 @@ UInt TComHash::getCRCValue2( UChar* p, Int length )
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComHash.h b/source/Lib/TLibCommon/TComHash.h
index 1840bb71..6ddced64 100644
--- a/source/Lib/TLibCommon/TComHash.h
+++ b/source/Lib/TLibCommon/TComHash.h
@@ -43,6 +43,7 @@
 #include "TComPicSym.h"
 #include "TComPicYuv.h"
 #include <vector>
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -127,4 +128,6 @@ private:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMHASH__
+
diff --git a/source/Lib/TLibCommon/TComInterpolationFilter.cpp b/source/Lib/TLibCommon/TComInterpolationFilter.cpp
index 30a5b79e..83e75996 100644
--- a/source/Lib/TLibCommon/TComInterpolationFilter.cpp
+++ b/source/Lib/TLibCommon/TComInterpolationFilter.cpp
@@ -49,6 +49,7 @@
 #if VECTOR_CODING__INTERPOLATION_FILTER && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
 #include <emmintrin.h>
 #endif
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -629,3 +630,6 @@ Void TComInterpolationFilter::filterVer(const ComponentID compID, Pel *src, Int
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComInterpolationFilter.h b/source/Lib/TLibCommon/TComInterpolationFilter.h
index bcbd6e4d..5950f14d 100644
--- a/source/Lib/TLibCommon/TComInterpolationFilter.h
+++ b/source/Lib/TLibCommon/TComInterpolationFilter.h
@@ -40,6 +40,7 @@
 #define __TCOMINTERPOLATIONFILTER__
 
 #include "CommonDef.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -78,4 +79,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibCommon/TComList.h b/source/Lib/TLibCommon/TComList.h
index a2bcc684..98271d0c 100644
--- a/source/Lib/TLibCommon/TComList.h
+++ b/source/Lib/TLibCommon/TComList.h
@@ -47,6 +47,7 @@
 #include "CommonDef.h"
 
 #include <cstdlib>
+namespace pcc_hm {
 using namespace std;
 
 //! \ingroup TLibCommon
@@ -119,4 +120,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibCommon/TComLoopFilter.cpp b/source/Lib/TLibCommon/TComLoopFilter.cpp
index 40bd1c19..a945cd54 100644
--- a/source/Lib/TLibCommon/TComLoopFilter.cpp
+++ b/source/Lib/TLibCommon/TComLoopFilter.cpp
@@ -39,6 +39,7 @@
 #include "TComSlice.h"
 #include "TComMv.h"
 #include "TComTU.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -960,3 +961,6 @@ __inline Int TComLoopFilter::xCalcDQ( Pel* piSrc, Int iOffset)
   return abs( piSrc[0] - 2*piSrc[iOffset] + piSrc[iOffset*2] );
 }
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComLoopFilter.h b/source/Lib/TLibCommon/TComLoopFilter.h
index ed69a93b..dbb6c430 100644
--- a/source/Lib/TLibCommon/TComLoopFilter.h
+++ b/source/Lib/TLibCommon/TComLoopFilter.h
@@ -40,6 +40,7 @@
 
 #include "CommonDef.h"
 #include "TComPic.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -140,4 +141,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibCommon/TComMotionInfo.cpp b/source/Lib/TLibCommon/TComMotionInfo.cpp
index 16bc52bf..f1ea6f21 100644
--- a/source/Lib/TLibCommon/TComMotionInfo.cpp
+++ b/source/Lib/TLibCommon/TComMotionInfo.cpp
@@ -39,6 +39,7 @@
 #include "TComMotionInfo.h"
 #include "assert.h"
 #include <stdlib.h>
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -374,3 +375,6 @@ Void TComCUMvField::compress(SChar* pePredMode, Int scale)
 }
 #endif
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComMotionInfo.h b/source/Lib/TLibCommon/TComMotionInfo.h
index 5b5f87ff..4dfa40f9 100644
--- a/source/Lib/TLibCommon/TComMotionInfo.h
+++ b/source/Lib/TLibCommon/TComMotionInfo.h
@@ -42,6 +42,7 @@
 #include <memory.h>
 #include "CommonDef.h"
 #include "TComMv.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -164,4 +165,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMMOTIONINFO__
+
diff --git a/source/Lib/TLibCommon/TComMv.h b/source/Lib/TLibCommon/TComMv.h
index 226f743e..a9688333 100644
--- a/source/Lib/TLibCommon/TComMv.h
+++ b/source/Lib/TLibCommon/TComMv.h
@@ -39,6 +39,7 @@
 #define __TCOMMV__
 
 #include "CommonDef.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -179,4 +180,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMMV__
+
diff --git a/source/Lib/TLibCommon/TComPattern.cpp b/source/Lib/TLibCommon/TComPattern.cpp
index cc7abb67..5d0ba70d 100644
--- a/source/Lib/TLibCommon/TComPattern.cpp
+++ b/source/Lib/TLibCommon/TComPattern.cpp
@@ -41,6 +41,7 @@
 #include "TComTU.h"
 #include "Debug.h"
 #include "TComPrediction.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -84,7 +85,12 @@ Void TComPattern::initPattern(Pel* piY,
                               Int stride,
                               Int bitDepthLuma,
                               Int roiPosX,
-                              Int roiPosY)
+                              Int roiPosY
+#if PCC_ME_EXT
+	                        , Int refIdx,
+	                          RefPicList refPicList
+#endif
+                              )
 #else
 Void TComPattern::initPattern (Pel* piY,
                                Int roiWidth,
@@ -98,6 +104,10 @@ Void TComPattern::initPattern (Pel* piY,
   m_roiHeight = roiHeight;
   m_patternStride = stride;
   m_bitDepth = bitDepthLuma;
+#if PCC_ME_EXT
+  m_refIdx = refIdx;
+  m_refPicList = refPicList;
+#endif
 #if MCTS_ENC_CHECK
   m_roiPosX       = roiPosX;
   m_roiPosY       = roiPosY;
@@ -748,3 +758,6 @@ Int isBelowLeftAvailable( const TComDataCU* pcCU, UInt uiPartIdxLT, UInt uiPartI
   return iNumIntra;
 }
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComPattern.h b/source/Lib/TLibCommon/TComPattern.h
index df7417bd..433a51e4 100644
--- a/source/Lib/TLibCommon/TComPattern.h
+++ b/source/Lib/TLibCommon/TComPattern.h
@@ -40,6 +40,7 @@
 
 // Include files
 #include "CommonDef.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -61,6 +62,11 @@ private:
   Int   m_patternStride;
   Int   m_bitDepth;
 
+#if PCC_ME_EXT
+  Int   m_refIdx;
+  RefPicList m_refPicList;
+#endif
+
 #if MCTS_ENC_CHECK  
   Int   m_roiPosX;
   Int   m_roiPosY;
@@ -76,6 +82,12 @@ public:
   Int   getROIYHeight() const     { return m_roiHeight;      }
   Int   getPatternLStride() const { return m_patternStride;  }
   Int   getBitDepthY() const      { return m_bitDepth;       }
+
+#if PCC_ME_EXT
+  Int   getRefIndex() const       { return m_refIdx;         }
+  RefPicList getRefPicList() const { return m_refPicList;    }
+#endif
+
 #if MCTS_ENC_CHECK
   Int   getROIYPosX() const       { return m_roiPosX; }
   Int   getROIYPosY() const       { return m_roiPosY; }
@@ -101,6 +113,10 @@ public:
   , m_roiHeight(0)
   , m_patternStride(0)
   , m_bitDepth(0)
+#if PCC_ME_EXT
+  , m_refIdx(0)
+  , m_refPicList(REF_PIC_LIST_X)
+#endif
 #if MCTS_ENC_CHECK
   , m_roiPosX(0)
   , m_roiPosY(0)
@@ -118,7 +134,11 @@ public:
 
   /// set parameters from Pel buffers for accessing neighbouring pixels
 #if MCTS_ENC_CHECK
+#if PCC_ME_EXT
+  Void initPattern(Pel* piY, Int roiWidth, Int roiHeight, Int stride, Int bitDepthLuma, Int roiPosX, Int roiPosY, Int refIdx = 0, RefPicList refPicList = REF_PIC_LIST_X);
+#else
   Void initPattern(Pel* piY, Int roiWidth, Int roiHeight, Int stride, Int bitDepthLuma, Int roiPosX, Int roiPosY);
+#endif
   Void setTileBorders(Int tileLeftTopPelPosX, Int tileLeftTopPelPosY, Int tileRightBottomPelPosX, Int tileRightBottomPelPosY);
 #else
   Void initPattern(Pel* piY, Int roiWidth, Int roiHeight, Int stride, Int bitDepthLuma);
@@ -127,4 +147,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMPATTERN__
+
diff --git a/source/Lib/TLibCommon/TComPic.cpp b/source/Lib/TLibCommon/TComPic.cpp
index fa1c0854..2a0a8064 100644
--- a/source/Lib/TLibCommon/TComPic.cpp
+++ b/source/Lib/TLibCommon/TComPic.cpp
@@ -37,6 +37,7 @@
 
 #include "TComPic.h"
 #include "SEI.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -63,6 +64,13 @@ TComPic::TComPic()
   {
     m_apcPicYuv[i]      = NULL;
   }
+#if PCC_ME_EXT
+  m_blockToPatch        = NULL;
+  m_occupancyMap        = NULL;
+#endif
+#if PCC_RDO_EXT
+  m_occupancyMapYuv = NULL;
+#endif
 }
 
 TComPic::~TComPic()
@@ -105,6 +113,17 @@ Void TComPic::create( const TComSPS &sps, const TComPPS &pps, const Bool bIsVirt
   }
 #endif
 
+#if PATCH_BASED_MVP || PCC_ME_EXT
+  {
+	  m_blockToPatch = new long long[iWidth / 16 * iHeight / 16];
+	  m_occupancyMap = new Int[iWidth * iHeight];
+  }
+#endif
+#if PCC_RDO_EXT
+  {
+    m_occupancyMapYuv = new TComPicYuv;  m_occupancyMapYuv->create(iWidth, iHeight, chromaFormatIDC, uiMaxCuWidth, uiMaxCuHeight, uiMaxDepth, true);
+  }
+#endif
   // there are no SEI messages associated with this picture initially
   if (m_SEIs.size() > 0)
   {
@@ -212,6 +231,23 @@ Void TComPic::destroy()
     m_apcPicYuvCSC = NULL;
   }
 
+#if PATCH_BASED_MVP || PCC_ME_EXT
+  delete m_blockToPatch;
+  m_blockToPatch = NULL;
+
+  delete m_occupancyMap;
+  m_occupancyMap = NULL;
+#endif
+
+#if PCC_RDO_EXT
+  if (m_occupancyMapYuv)
+  {
+    m_occupancyMapYuv->destroy();
+    delete m_occupancyMapYuv;
+    m_occupancyMapYuv = NULL;
+  }
+#endif
+
   deleteSEIs(m_SEIs);
 }
 
@@ -377,3 +413,6 @@ Void TComPic::addPictureToHashMapForInter()
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComPic.h b/source/Lib/TLibCommon/TComPic.h
index fd78acfb..9b3f1560 100644
--- a/source/Lib/TLibCommon/TComPic.h
+++ b/source/Lib/TLibCommon/TComPic.h
@@ -44,6 +44,7 @@
 #include "TComPicYuv.h"
 #include "TComBitStream.h"
 #include "TComHash.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -70,6 +71,13 @@ private:
 
   TComPicYuv*           m_pcPicYuvPred;           //  Prediction
   TComPicYuv*           m_pcPicYuvResi;           //  Residual
+#if PATCH_BASED_MVP || PCC_ME_EXT
+  long long*            m_blockToPatch;
+  Int*                  m_occupancyMap;
+#endif
+#if PCC_RDO_EXT
+  TComPicYuv*           m_occupancyMapYuv;
+#endif
   Bool                  m_bReconstructed;
   Bool                  m_bNeededForOutput;
   UInt                  m_uiCurrSliceIdx;         // Index of current slice
@@ -91,6 +99,13 @@ public:
   TComPic();
   virtual ~TComPic();
 
+#if PATCH_BASED_MVP || PCC_ME_EXT
+  long long*    getBlockToPatch() const { return m_blockToPatch; }
+  Int*          getOccupancyMap() const { return m_occupancyMap; }
+#endif
+#if PCC_RDO_EXT
+  TComPicYuv*   getOccupancyMapYuv() const { return m_occupancyMapYuv; }
+#endif
 #if REDUCED_ENCODER_MEMORY
   Void          create( const TComSPS &sps, const TComPPS &pps, const Bool bCreateEncoderSourcePicYuv, const Bool bCreateForImmediateReconstruction );
   Void          prepareForEncoderSourcePicYuv();
@@ -205,4 +220,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMPIC__
+
diff --git a/source/Lib/TLibCommon/TComPicSym.cpp b/source/Lib/TLibCommon/TComPicSym.cpp
index cd50da57..939dff13 100644
--- a/source/Lib/TLibCommon/TComPicSym.cpp
+++ b/source/Lib/TLibCommon/TComPicSym.cpp
@@ -38,6 +38,7 @@
 #include "TComPicSym.h"
 #include "TComSampleAdaptiveOffset.h"
 #include "TComSlice.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -622,3 +623,6 @@ Void getTilePosition(const TComDataCU* const pcCU, UInt &tileXPosInCtus, UInt &t
 #endif
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComPicSym.h b/source/Lib/TLibCommon/TComPicSym.h
index 091cf010..ba912534 100644
--- a/source/Lib/TLibCommon/TComPicSym.h
+++ b/source/Lib/TLibCommon/TComPicSym.h
@@ -44,6 +44,7 @@
 #include "CommonDef.h"
 #include "TComSlice.h"
 #include "TComDataCU.h"
+namespace pcc_hm {
 class TComSampleAdaptiveOffset;
 class TComPPS;
 
@@ -212,5 +213,7 @@ public:
 Void getTilePosition(const TComDataCU* const pcCU, UInt &tileXPosInCtus, UInt &tileYPosInCtus, UInt &tileWidthtInCtus, UInt &tileHeightInCtus);
 #endif
 
+} // namespace pcc_hm
 #endif // __TCOMPICSYM__
 
+
diff --git a/source/Lib/TLibCommon/TComPicYuv.cpp b/source/Lib/TLibCommon/TComPicYuv.cpp
index c2a0634a..6a5a1b2b 100644
--- a/source/Lib/TLibCommon/TComPicYuv.cpp
+++ b/source/Lib/TLibCommon/TComPicYuv.cpp
@@ -47,6 +47,7 @@
 
 #include "TComPicYuv.h"
 #include "TLibVideoIO/TVideoIOYuv.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -410,3 +411,6 @@ Void TComPicYuv::DefaultConvertPix(TComPicYuv* pcSrcPicYuv, const BitDepths& bit
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComPicYuv.h b/source/Lib/TLibCommon/TComPicYuv.h
index 5340f0d0..f6a1defe 100644
--- a/source/Lib/TLibCommon/TComPicYuv.h
+++ b/source/Lib/TLibCommon/TComPicYuv.h
@@ -43,6 +43,7 @@
 #include "TComRom.h"
 #include "TComChromaFormat.h"
 #include "SEI.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -116,7 +117,7 @@ public:
   Int           getWidth          (const ComponentID id) const { return  m_picWidth >> getComponentScaleX(id);   }
   Int           getHeight         (const ComponentID id) const { return  m_picHeight >> getComponentScaleY(id);  }
   ChromaFormat  getChromaFormat   ()                     const { return m_chromaFormatIDC; }
-  UInt          getNumberValidComponents() const { return ::getNumberValidComponents(m_chromaFormatIDC); }
+  UInt          getNumberValidComponents() const { return pcc_hm::getNumberValidComponents(m_chromaFormatIDC); }
 
   Int           getStride         (const ComponentID id) const { return ((m_picWidth     ) + (m_marginX  <<1)) >> getComponentScaleX(id); }
 private:
@@ -147,11 +148,11 @@ public:
   const Pel*    getAddr           (const ComponentID ch, const Int ctuRSAddr, const Int uiAbsZorderIdx ) const
                                      { return m_piPicOrg[ch] + m_ctuOffsetInBuffer[ch==0?0:1][ctuRSAddr] + m_subCuOffsetInBuffer[ch==0?0:1][g_auiZscanToRaster[uiAbsZorderIdx]]; }
 
-  UInt          getComponentScaleX(const ComponentID id) const { return ::getComponentScaleX(id, m_chromaFormatIDC); }
-  UInt          getComponentScaleY(const ComponentID id) const { return ::getComponentScaleY(id, m_chromaFormatIDC); }
+  UInt          getComponentScaleX(const ComponentID id) const { return pcc_hm::getComponentScaleX(id, m_chromaFormatIDC); }
+  UInt          getComponentScaleY(const ComponentID id) const { return pcc_hm::getComponentScaleY(id, m_chromaFormatIDC); }
 
-  UInt          getChannelTypeScaleX(const ChannelType id) const { return ::getChannelTypeScaleX(id, m_chromaFormatIDC); }
-  UInt          getChannelTypeScaleY(const ChannelType id) const { return ::getChannelTypeScaleY(id, m_chromaFormatIDC); }
+  UInt          getChannelTypeScaleX(const ChannelType id) const { return pcc_hm::getChannelTypeScaleX(id, m_chromaFormatIDC); }
+  UInt          getChannelTypeScaleY(const ChannelType id) const { return pcc_hm::getChannelTypeScaleY(id, m_chromaFormatIDC); }
 
   // ------------------------------------------------------------------------------------------------
   //  Miscellaneous
@@ -183,4 +184,6 @@ UInt calcMD5     (const TComPicYuv& pic, TComPictureHash &digest, const BitDepth
 std::string hashToString(const TComPictureHash &digest, Int numChar);
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMPICYUV__
+
diff --git a/source/Lib/TLibCommon/TComPicYuvMD5.cpp b/source/Lib/TLibCommon/TComPicYuvMD5.cpp
index c64fc0bd..ae0d287a 100644
--- a/source/Lib/TLibCommon/TComPicYuvMD5.cpp
+++ b/source/Lib/TLibCommon/TComPicYuvMD5.cpp
@@ -33,6 +33,7 @@
 
 #include "TComPicYuv.h"
 #include "libmd5/MD5.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -225,3 +226,6 @@ std::string hashToString(const TComPictureHash &digest, Int numChar)
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComPrediction.cpp b/source/Lib/TLibCommon/TComPrediction.cpp
index 33208a2e..c0a5e814 100644
--- a/source/Lib/TLibCommon/TComPrediction.cpp
+++ b/source/Lib/TLibCommon/TComPrediction.cpp
@@ -39,6 +39,7 @@
 #include "TComPrediction.h"
 #include "TComPic.h"
 #include "TComTU.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -1096,3 +1097,6 @@ Bool TComPrediction::checkTMctsMvp(TComDataCU* pcCU, Int partIdx)
 
 #endif
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComPrediction.h b/source/Lib/TLibCommon/TComPrediction.h
index 30332216..a3028f10 100644
--- a/source/Lib/TLibCommon/TComPrediction.h
+++ b/source/Lib/TLibCommon/TComPrediction.h
@@ -43,6 +43,7 @@
 #include "TComYuv.h"
 #include "TComInterpolationFilter.h"
 #include "TComWeightPrediction.h"
+namespace pcc_hm {
 
 // forward declaration
 class TComMv;
@@ -157,4 +158,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMPREDICTION__
+
diff --git a/source/Lib/TLibCommon/TComRdCost.cpp b/source/Lib/TLibCommon/TComRdCost.cpp
index 8faa9f06..598f0240 100644
--- a/source/Lib/TLibCommon/TComRdCost.cpp
+++ b/source/Lib/TLibCommon/TComRdCost.cpp
@@ -45,6 +45,7 @@
 #include <emmintrin.h>
 #include <xmmintrin.h>
 #endif
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -338,14 +339,24 @@ Distortion TComRdCost::calcHAD( Int bitDepth, const Pel* pi0, Int iStride0, cons
   return ( uiSum >> DISTORTION_PRECISION_ADJUSTMENT(bitDepth-8) );
 }
 
-Distortion TComRdCost::getDistPart( Int bitDepth, const Pel* piCur, Int iCurStride,  const Pel* piOrg, Int iOrgStride, UInt uiBlkWidth, UInt uiBlkHeight, const ComponentID compID, DFunc eDFunc )
+#if PCC_RDO_EXT
+Distortion TComRdCost::getDistPart(Int bitDepth, const Pel* piCur, Int iCurStride, const Pel* piOrg, Int iOrgStride, UInt uiBlkWidth, UInt uiBlkHeight, const ComponentID compID, DFunc eDFunc, const Pel* piOccupancy, Int iOccupancyStride)
+#else
+Distortion TComRdCost::getDistPart(Int bitDepth, const Pel* piCur, Int iCurStride, const Pel* piOrg, Int iOrgStride, UInt uiBlkWidth, UInt uiBlkHeight, const ComponentID compID, DFunc eDFunc)
+#endif
 {
   DistParam cDtParam;
   setDistParam( uiBlkWidth, uiBlkHeight, eDFunc, cDtParam );
   cDtParam.pOrg       = piOrg;
   cDtParam.pCur       = piCur;
+#if PCC_RDO_EXT
+  cDtParam.pOccupancy = piOccupancy;
+#endif
   cDtParam.iStrideOrg = iOrgStride;
   cDtParam.iStrideCur = iCurStride;
+#if PCC_RDO_EXT
+  cDtParam.iStrideOccupancy = iOccupancyStride;
+#endif
   cDtParam.iStep      = 1;
 
   cDtParam.bApplyWeight = false;
@@ -1198,6 +1209,11 @@ Distortion TComRdCost::xGetSSE( DistParam* pcDtParam )
   Int  iStrideOrg = pcDtParam->iStrideOrg;
   Int  iStrideCur = pcDtParam->iStrideCur;
 
+#if PCC_RDO_EXT
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int  iStrideOccupancy = pcDtParam->iStrideOccupancy;
+#endif
+
   Distortion uiSum   = 0;
   UInt       uiShift = DISTORTION_PRECISION_ADJUSTMENT((pcDtParam->bitDepth-8) << 1);
 
@@ -1207,11 +1223,18 @@ Distortion TComRdCost::xGetSSE( DistParam* pcDtParam )
   {
     for (Int n = 0; n < iCols; n++ )
     {
-      iTemp = piOrg[n  ] - piCur[n  ];
+#if PCC_RDO_EXT
+      iTemp = (piOrg[n] - piCur[n]) * ((piOccupancy[n] != 0) ? 1 : 0);
+#else
+      iTemp = piOrg[n] - piCur[n];
+#endif
       uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
     }
     piOrg += iStrideOrg;
     piCur += iStrideCur;
+#if PCC_RDO_EXT
+    piOccupancy += iStrideOccupancy;
+#endif
   }
 
   return ( uiSum );
@@ -1229,6 +1252,10 @@ Distortion TComRdCost::xGetSSE4( DistParam* pcDtParam )
   Int  iRows   = pcDtParam->iRows;
   Int  iStrideOrg = pcDtParam->iStrideOrg;
   Int  iStrideCur = pcDtParam->iStrideCur;
+#if PCC_RDO_EXT
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int iStrideOccupancy = pcDtParam->iStrideOccupancy;
+#endif
 
   Distortion uiSum   = 0;
   UInt       uiShift = DISTORTION_PRECISION_ADJUSTMENT((pcDtParam->bitDepth-8) << 1);
@@ -1237,14 +1264,23 @@ Distortion TComRdCost::xGetSSE4( DistParam* pcDtParam )
 
   for( ; iRows != 0; iRows-- )
   {
-
-    iTemp = piOrg[0] - piCur[0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[1] - piCur[1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[2] - piCur[2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[3] - piCur[3]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+#if PCC_RDO_EXT
+    iTemp = (piOrg[0] - piCur[0]) * ((piOccupancy[0] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[1] - piCur[1]) * ((piOccupancy[1] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[2] - piCur[2]) * ((piOccupancy[2] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[3] - piCur[3]) * ((piOccupancy[3] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+#else
+    iTemp = piOrg[0] - piCur[0]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[1] - piCur[1]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[2] - piCur[2]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[3] - piCur[3]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+#endif
 
     piOrg += iStrideOrg;
     piCur += iStrideCur;
+#if PCC_RDO_EXT
+    piOccupancy += iStrideOccupancy;
+#endif
   }
 
   return ( uiSum );
@@ -1263,6 +1299,11 @@ Distortion TComRdCost::xGetSSE8( DistParam* pcDtParam )
   Int  iStrideOrg = pcDtParam->iStrideOrg;
   Int  iStrideCur = pcDtParam->iStrideCur;
 
+#if PCC_RDO_EXT
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int iStrideOccupancy = pcDtParam->iStrideOccupancy;
+#endif
+
   Distortion uiSum   = 0;
   UInt       uiShift = DISTORTION_PRECISION_ADJUSTMENT((pcDtParam->bitDepth-8) << 1);
 
@@ -1270,17 +1311,31 @@ Distortion TComRdCost::xGetSSE8( DistParam* pcDtParam )
 
   for( ; iRows != 0; iRows-- )
   {
-    iTemp = piOrg[0] - piCur[0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[1] - piCur[1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[2] - piCur[2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[3] - piCur[3]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[4] - piCur[4]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[5] - piCur[5]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[6] - piCur[6]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[7] - piCur[7]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+#if PCC_RDO_EXT
+    iTemp = (piOrg[0] - piCur[0]) * ((piOccupancy[0] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[1] - piCur[1]) * ((piOccupancy[1] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[2] - piCur[2]) * ((piOccupancy[2] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[3] - piCur[3]) * ((piOccupancy[3] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[4] - piCur[4]) * ((piOccupancy[4] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[5] - piCur[5]) * ((piOccupancy[5] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[6] - piCur[6]) * ((piOccupancy[6] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[7] - piCur[7]) * ((piOccupancy[7] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+#else
+    iTemp = piOrg[0] - piCur[0]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[1] - piCur[1]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[2] - piCur[2]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[3] - piCur[3]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[4] - piCur[4]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[5] - piCur[5]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[6] - piCur[6]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[7] - piCur[7]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+#endif
 
     piOrg += iStrideOrg;
     piCur += iStrideCur;
+#if PCC_RDO_EXT
+    piOccupancy += iStrideOccupancy;
+#endif
   }
 
   return ( uiSum );
@@ -1299,6 +1354,11 @@ Distortion TComRdCost::xGetSSE16( DistParam* pcDtParam )
   Int  iStrideOrg = pcDtParam->iStrideOrg;
   Int  iStrideCur = pcDtParam->iStrideCur;
 
+#if PCC_RDO_EXT
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int iStrideOccupancy = pcDtParam->iStrideOccupancy;
+#endif
+
   Distortion uiSum   = 0;
   UInt       uiShift = DISTORTION_PRECISION_ADJUSTMENT((pcDtParam->bitDepth-8) << 1);
 
@@ -1306,26 +1366,47 @@ Distortion TComRdCost::xGetSSE16( DistParam* pcDtParam )
 
   for( ; iRows != 0; iRows-- )
   {
-
-    iTemp = piOrg[ 0] - piCur[ 0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 1] - piCur[ 1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 2] - piCur[ 2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 3] - piCur[ 3]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 4] - piCur[ 4]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 5] - piCur[ 5]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 6] - piCur[ 6]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 7] - piCur[ 7]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 8] - piCur[ 8]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 9] - piCur[ 9]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[10] - piCur[10]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[11] - piCur[11]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[12] - piCur[12]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[13] - piCur[13]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[14] - piCur[14]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[15] - piCur[15]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+#if PCC_RDO_EXT
+    iTemp = (piOrg[0] - piCur[0]) * ((piOccupancy[0] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[1] - piCur[1]) * ((piOccupancy[1] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[2] - piCur[2]) * ((piOccupancy[2] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[3] - piCur[3]) * ((piOccupancy[3] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[4] - piCur[4]) * ((piOccupancy[4] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[5] - piCur[5]) * ((piOccupancy[5] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[6] - piCur[6]) * ((piOccupancy[6] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[7] - piCur[7]) * ((piOccupancy[7] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[8] - piCur[8]) * ((piOccupancy[8] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[9] - piCur[9]) * ((piOccupancy[9] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[10] - piCur[10]) * ((piOccupancy[10] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[11] - piCur[11]) * ((piOccupancy[11] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[12] - piCur[12]) * ((piOccupancy[12] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[13] - piCur[13]) * ((piOccupancy[13] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[14] - piCur[14]) * ((piOccupancy[14] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[15] - piCur[15]) * ((piOccupancy[15] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+#else
+    iTemp = piOrg[0] - piCur[0]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[1] - piCur[1]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[2] - piCur[2]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[3] - piCur[3]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[4] - piCur[4]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[5] - piCur[5]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[6] - piCur[6]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[7] - piCur[7]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[8] - piCur[8]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[9] - piCur[9]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[10] - piCur[10]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[11] - piCur[11]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[12] - piCur[12]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[13] - piCur[13]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[14] - piCur[14]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[15] - piCur[15]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+#endif
 
     piOrg += iStrideOrg;
     piCur += iStrideCur;
+#if PCC_RDO_EXT
+    piOccupancy += iStrideOccupancy;
+#endif
   }
 
   return ( uiSum );
@@ -1344,6 +1425,11 @@ Distortion TComRdCost::xGetSSE16N( DistParam* pcDtParam )
   Int  iStrideOrg = pcDtParam->iStrideOrg;
   Int  iStrideCur = pcDtParam->iStrideCur;
 
+#if PCC_RDO_EXT
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int  iStrideOccupancy = pcDtParam->iStrideOccupancy;
+#endif
+
   Distortion uiSum   = 0;
   UInt       uiShift = DISTORTION_PRECISION_ADJUSTMENT((pcDtParam->bitDepth-8) << 1);
 
@@ -1353,27 +1439,47 @@ Distortion TComRdCost::xGetSSE16N( DistParam* pcDtParam )
   {
     for (Int n = 0; n < iCols; n+=16 )
     {
-
-      iTemp = piOrg[n+ 0] - piCur[n+ 0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 1] - piCur[n+ 1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 2] - piCur[n+ 2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 3] - piCur[n+ 3]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 4] - piCur[n+ 4]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 5] - piCur[n+ 5]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 6] - piCur[n+ 6]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 7] - piCur[n+ 7]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 8] - piCur[n+ 8]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+ 9] - piCur[n+ 9]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+10] - piCur[n+10]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+11] - piCur[n+11]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+12] - piCur[n+12]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+13] - piCur[n+13]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+14] - piCur[n+14]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-      iTemp = piOrg[n+15] - piCur[n+15]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-
+#if PCC_RDO_EXT
+      iTemp = (piOrg[n + 0] - piCur[n + 0]) * ((piOccupancy[n + 0] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[n + 1] - piCur[n + 1]) * ((piOccupancy[n + 1] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[n + 2] - piCur[n + 2]) * ((piOccupancy[n + 2] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[n + 3] - piCur[n + 3]) * ((piOccupancy[n + 3] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[n + 4] - piCur[n + 4]) * ((piOccupancy[n + 4] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[n + 5] - piCur[n + 5]) * ((piOccupancy[n + 5] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[n + 6] - piCur[n + 6]) * ((piOccupancy[n + 6] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[n + 7] - piCur[n + 7]) * ((piOccupancy[n + 7] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[n + 8] - piCur[n + 8]) * ((piOccupancy[n + 8] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[n + 9] - piCur[n + 9]) * ((piOccupancy[n + 9] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[n + 10] - piCur[n + 10]) * ((piOccupancy[n + 10] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[n + 11] - piCur[n + 11]) * ((piOccupancy[n + 11] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[n + 12] - piCur[n + 12]) * ((piOccupancy[n + 12] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[n + 13] - piCur[n + 13]) * ((piOccupancy[n + 13] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[n + 14] - piCur[n + 14]) * ((piOccupancy[n + 14] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = (piOrg[n + 15] - piCur[n + 15]) * ((piOccupancy[n + 15] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+#else
+      iTemp = piOrg[n + 0] - piCur[n + 0]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = piOrg[n + 1] - piCur[n + 1]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = piOrg[n + 2] - piCur[n + 2]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = piOrg[n + 3] - piCur[n + 3]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = piOrg[n + 4] - piCur[n + 4]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = piOrg[n + 5] - piCur[n + 5]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = piOrg[n + 6] - piCur[n + 6]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = piOrg[n + 7] - piCur[n + 7]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = piOrg[n + 8] - piCur[n + 8]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = piOrg[n + 9] - piCur[n + 9]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = piOrg[n + 10] - piCur[n + 10]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = piOrg[n + 11] - piCur[n + 11]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = piOrg[n + 12] - piCur[n + 12]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = piOrg[n + 13] - piCur[n + 13]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = piOrg[n + 14] - piCur[n + 14]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+      iTemp = piOrg[n + 15] - piCur[n + 15]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+#endif
     }
     piOrg += iStrideOrg;
     piCur += iStrideCur;
+#if PCC_RDO_EXT
+    piOccupancy += iStrideOccupancy;
+#endif
   }
 
   return ( uiSum );
@@ -1392,6 +1498,11 @@ Distortion TComRdCost::xGetSSE32( DistParam* pcDtParam )
   Int  iStrideOrg = pcDtParam->iStrideOrg;
   Int  iStrideCur = pcDtParam->iStrideCur;
 
+#if PCC_RDO_EXT
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int  iStrideOccupancy = pcDtParam->iStrideOccupancy;
+#endif
+
   Distortion uiSum   = 0;
   UInt       uiShift = DISTORTION_PRECISION_ADJUSTMENT((pcDtParam->bitDepth-8) << 1);
 
@@ -1399,42 +1510,78 @@ Distortion TComRdCost::xGetSSE32( DistParam* pcDtParam )
 
   for( ; iRows != 0; iRows-- )
   {
-
-    iTemp = piOrg[ 0] - piCur[ 0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 1] - piCur[ 1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 2] - piCur[ 2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 3] - piCur[ 3]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 4] - piCur[ 4]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 5] - piCur[ 5]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 6] - piCur[ 6]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 7] - piCur[ 7]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 8] - piCur[ 8]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 9] - piCur[ 9]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[10] - piCur[10]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[11] - piCur[11]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[12] - piCur[12]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[13] - piCur[13]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[14] - piCur[14]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[15] - piCur[15]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[16] - piCur[16]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[17] - piCur[17]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[18] - piCur[18]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[19] - piCur[19]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[20] - piCur[20]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[21] - piCur[21]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[22] - piCur[22]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[23] - piCur[23]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[24] - piCur[24]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[25] - piCur[25]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[26] - piCur[26]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[27] - piCur[27]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[28] - piCur[28]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[29] - piCur[29]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[30] - piCur[30]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[31] - piCur[31]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-
+#if PCC_RDO_EXT
+    iTemp = (piOrg[0] - piCur[0]) * ((piOccupancy[0] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[1] - piCur[1]) * ((piOccupancy[1] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[2] - piCur[2]) * ((piOccupancy[2] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[3] - piCur[3]) * ((piOccupancy[3] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[4] - piCur[4]) * ((piOccupancy[4] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[5] - piCur[5]) * ((piOccupancy[5] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[6] - piCur[6]) * ((piOccupancy[6] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[7] - piCur[7]) * ((piOccupancy[7] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[8] - piCur[8]) * ((piOccupancy[8] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[9] - piCur[9]) * ((piOccupancy[9] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[10] - piCur[10]) * ((piOccupancy[10] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[11] - piCur[11]) * ((piOccupancy[11] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[12] - piCur[12]) * ((piOccupancy[12] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[13] - piCur[13]) * ((piOccupancy[13] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[14] - piCur[14]) * ((piOccupancy[14] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[15] - piCur[15]) * ((piOccupancy[15] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[16] - piCur[16]) * ((piOccupancy[16] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[17] - piCur[17]) * ((piOccupancy[17] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[18] - piCur[18]) * ((piOccupancy[18] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[19] - piCur[19]) * ((piOccupancy[19] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[20] - piCur[20]) * ((piOccupancy[20] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[21] - piCur[21]) * ((piOccupancy[21] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[22] - piCur[22]) * ((piOccupancy[22] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[23] - piCur[23]) * ((piOccupancy[23] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[24] - piCur[24]) * ((piOccupancy[24] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[25] - piCur[25]) * ((piOccupancy[25] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[26] - piCur[26]) * ((piOccupancy[26] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[27] - piCur[27]) * ((piOccupancy[27] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[28] - piCur[28]) * ((piOccupancy[28] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[29] - piCur[29]) * ((piOccupancy[29] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[30] - piCur[30]) * ((piOccupancy[30] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[31] - piCur[31]) * ((piOccupancy[31] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+#else
+    iTemp = piOrg[0] - piCur[0]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[1] - piCur[1]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[2] - piCur[2]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[3] - piCur[3]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[4] - piCur[4]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[5] - piCur[5]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[6] - piCur[6]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[7] - piCur[7]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[8] - piCur[8]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[9] - piCur[9]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[10] - piCur[10]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[11] - piCur[11]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[12] - piCur[12]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[13] - piCur[13]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[14] - piCur[14]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[15] - piCur[15]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[16] - piCur[16]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[17] - piCur[17]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[18] - piCur[18]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[19] - piCur[19]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[20] - piCur[20]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[21] - piCur[21]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[22] - piCur[22]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[23] - piCur[23]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[24] - piCur[24]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[25] - piCur[25]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[26] - piCur[26]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[27] - piCur[27]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[28] - piCur[28]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[29] - piCur[29]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[30] - piCur[30]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[31] - piCur[31]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+#endif
     piOrg += iStrideOrg;
     piCur += iStrideCur;
+#if PCC_RDO_EXT
+    piOccupancy += iStrideOccupancy;
+#endif
   }
 
   return ( uiSum );
@@ -1453,6 +1600,11 @@ Distortion TComRdCost::xGetSSE64( DistParam* pcDtParam )
   Int  iStrideOrg = pcDtParam->iStrideOrg;
   Int  iStrideCur = pcDtParam->iStrideCur;
 
+#if PCC_RDO_EXT
+  const Pel* piOccupancy = pcDtParam->pOccupancy;
+  Int  iStrideOccupancy = pcDtParam->iStrideOccupancy;
+#endif
+
   Distortion uiSum   = 0;
   UInt       uiShift = DISTORTION_PRECISION_ADJUSTMENT((pcDtParam->bitDepth-8) << 1);
 
@@ -1460,73 +1612,143 @@ Distortion TComRdCost::xGetSSE64( DistParam* pcDtParam )
 
   for( ; iRows != 0; iRows-- )
   {
-    iTemp = piOrg[ 0] - piCur[ 0]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 1] - piCur[ 1]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 2] - piCur[ 2]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 3] - piCur[ 3]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 4] - piCur[ 4]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 5] - piCur[ 5]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 6] - piCur[ 6]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 7] - piCur[ 7]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 8] - piCur[ 8]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[ 9] - piCur[ 9]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[10] - piCur[10]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[11] - piCur[11]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[12] - piCur[12]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[13] - piCur[13]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[14] - piCur[14]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[15] - piCur[15]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[16] - piCur[16]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[17] - piCur[17]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[18] - piCur[18]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[19] - piCur[19]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[20] - piCur[20]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[21] - piCur[21]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[22] - piCur[22]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[23] - piCur[23]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[24] - piCur[24]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[25] - piCur[25]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[26] - piCur[26]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[27] - piCur[27]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[28] - piCur[28]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[29] - piCur[29]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[30] - piCur[30]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[31] - piCur[31]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[32] - piCur[32]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[33] - piCur[33]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[34] - piCur[34]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[35] - piCur[35]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[36] - piCur[36]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[37] - piCur[37]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[38] - piCur[38]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[39] - piCur[39]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[40] - piCur[40]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[41] - piCur[41]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[42] - piCur[42]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[43] - piCur[43]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[44] - piCur[44]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[45] - piCur[45]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[46] - piCur[46]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[47] - piCur[47]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[48] - piCur[48]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[49] - piCur[49]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[50] - piCur[50]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[51] - piCur[51]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[52] - piCur[52]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[53] - piCur[53]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[54] - piCur[54]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[55] - piCur[55]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[56] - piCur[56]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[57] - piCur[57]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[58] - piCur[58]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[59] - piCur[59]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[60] - piCur[60]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[61] - piCur[61]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[62] - piCur[62]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
-    iTemp = piOrg[63] - piCur[63]; uiSum += Distortion(( iTemp * iTemp ) >> uiShift);
+#if PCC_RDO_EXT
+    iTemp = (piOrg[0] - piCur[0]) * ((piOccupancy[0] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[1] - piCur[1]) * ((piOccupancy[1] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[2] - piCur[2]) * ((piOccupancy[2] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[3] - piCur[3]) * ((piOccupancy[3] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[4] - piCur[4]) * ((piOccupancy[4] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[5] - piCur[5]) * ((piOccupancy[5] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[6] - piCur[6]) * ((piOccupancy[6] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[7] - piCur[7]) * ((piOccupancy[7] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[8] - piCur[8]) * ((piOccupancy[8] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[9] - piCur[9]) * ((piOccupancy[9] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[10] - piCur[10]) * ((piOccupancy[10] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[11] - piCur[11]) * ((piOccupancy[11] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[12] - piCur[12]) * ((piOccupancy[12] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[13] - piCur[13]) * ((piOccupancy[13] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[14] - piCur[14]) * ((piOccupancy[14] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[15] - piCur[15]) * ((piOccupancy[15] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[16] - piCur[16]) * ((piOccupancy[16] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[17] - piCur[17]) * ((piOccupancy[17] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[18] - piCur[18]) * ((piOccupancy[18] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[19] - piCur[19]) * ((piOccupancy[19] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[20] - piCur[20]) * ((piOccupancy[20] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[21] - piCur[21]) * ((piOccupancy[21] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[22] - piCur[22]) * ((piOccupancy[22] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[23] - piCur[23]) * ((piOccupancy[23] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[24] - piCur[24]) * ((piOccupancy[24] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[25] - piCur[25]) * ((piOccupancy[25] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[26] - piCur[26]) * ((piOccupancy[26] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[27] - piCur[27]) * ((piOccupancy[27] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[28] - piCur[28]) * ((piOccupancy[28] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[29] - piCur[29]) * ((piOccupancy[29] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[30] - piCur[30]) * ((piOccupancy[30] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[31] - piCur[31]) * ((piOccupancy[31] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[32] - piCur[32]) * ((piOccupancy[32] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[33] - piCur[33]) * ((piOccupancy[33] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[34] - piCur[34]) * ((piOccupancy[34] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[35] - piCur[35]) * ((piOccupancy[35] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[36] - piCur[36]) * ((piOccupancy[36] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[37] - piCur[37]) * ((piOccupancy[37] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[38] - piCur[38]) * ((piOccupancy[38] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[39] - piCur[39]) * ((piOccupancy[39] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[40] - piCur[40]) * ((piOccupancy[40] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[41] - piCur[41]) * ((piOccupancy[41] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[42] - piCur[42]) * ((piOccupancy[42] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[43] - piCur[43]) * ((piOccupancy[43] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[44] - piCur[44]) * ((piOccupancy[44] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[45] - piCur[45]) * ((piOccupancy[45] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[46] - piCur[46]) * ((piOccupancy[46] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[47] - piCur[47]) * ((piOccupancy[47] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[48] - piCur[48]) * ((piOccupancy[48] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[49] - piCur[49]) * ((piOccupancy[49] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[50] - piCur[50]) * ((piOccupancy[50] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[51] - piCur[51]) * ((piOccupancy[51] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[52] - piCur[52]) * ((piOccupancy[52] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[53] - piCur[53]) * ((piOccupancy[53] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[54] - piCur[54]) * ((piOccupancy[54] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[55] - piCur[55]) * ((piOccupancy[55] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[56] - piCur[56]) * ((piOccupancy[56] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[57] - piCur[57]) * ((piOccupancy[57] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[58] - piCur[58]) * ((piOccupancy[58] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[59] - piCur[59]) * ((piOccupancy[59] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[60] - piCur[60]) * ((piOccupancy[60] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[61] - piCur[61]) * ((piOccupancy[61] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[62] - piCur[62]) * ((piOccupancy[62] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = (piOrg[63] - piCur[63]) * ((piOccupancy[63] != 0) ? 1 : 0); uiSum += Distortion((iTemp * iTemp) >> uiShift);
+#else
+    iTemp = piOrg[0] - piCur[0]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[1] - piCur[1]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[2] - piCur[2]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[3] - piCur[3]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[4] - piCur[4]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[5] - piCur[5]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[6] - piCur[6]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[7] - piCur[7]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[8] - piCur[8]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[9] - piCur[9]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[10] - piCur[10]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[11] - piCur[11]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[12] - piCur[12]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[13] - piCur[13]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[14] - piCur[14]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[15] - piCur[15]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[16] - piCur[16]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[17] - piCur[17]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[18] - piCur[18]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[19] - piCur[19]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[20] - piCur[20]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[21] - piCur[21]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[22] - piCur[22]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[23] - piCur[23]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[24] - piCur[24]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[25] - piCur[25]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[26] - piCur[26]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[27] - piCur[27]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[28] - piCur[28]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[29] - piCur[29]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[30] - piCur[30]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[31] - piCur[31]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[32] - piCur[32]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[33] - piCur[33]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[34] - piCur[34]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[35] - piCur[35]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[36] - piCur[36]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[37] - piCur[37]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[38] - piCur[38]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[39] - piCur[39]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[40] - piCur[40]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[41] - piCur[41]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[42] - piCur[42]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[43] - piCur[43]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[44] - piCur[44]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[45] - piCur[45]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[46] - piCur[46]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[47] - piCur[47]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[48] - piCur[48]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[49] - piCur[49]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[50] - piCur[50]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[51] - piCur[51]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[52] - piCur[52]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[53] - piCur[53]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[54] - piCur[54]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[55] - piCur[55]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[56] - piCur[56]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[57] - piCur[57]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[58] - piCur[58]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[59] - piCur[59]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[60] - piCur[60]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[61] - piCur[61]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[62] - piCur[62]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+    iTemp = piOrg[63] - piCur[63]; uiSum += Distortion((iTemp * iTemp) >> uiShift);
+#endif
 
     piOrg += iStrideOrg;
     piCur += iStrideCur;
+#if PCC_RDO_EXT
+    piOccupancy += iStrideOccupancy;
+#endif
   }
 
   return ( uiSum );
@@ -1836,3 +2058,6 @@ Distortion TComRdCost::xGetHADs( DistParam* pcDtParam )
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComRdCost.h b/source/Lib/TLibCommon/TComRdCost.h
index ce527150..001b4ffc 100644
--- a/source/Lib/TLibCommon/TComRdCost.h
+++ b/source/Lib/TLibCommon/TComRdCost.h
@@ -45,6 +45,7 @@
 
 #include "TComSlice.h"
 #include "TComRdCostWeightPrediction.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -69,8 +70,14 @@ class DistParam
 public:
   const Pel*            pOrg;
   const Pel*            pCur;
+#if PCC_RDO_EXT
+  const Pel*            pOccupancy;
+#endif
   Int                   iStrideOrg;
   Int                   iStrideCur;
+#if PCC_RDO_EXT
+  Int                   iStrideOccupancy;
+#endif
   Int                   iRows;
   Int                   iCols;
   Int                   iStep;
@@ -91,8 +98,14 @@ public:
   DistParam()
    : pOrg(NULL),
      pCur(NULL),
+#if PCC_RDO_EXT
+     pOccupancy(NULL),
+#endif
      iStrideOrg(0),
      iStrideCur(0),
+#if PCC_RDO_EXT
+     iStrideOccupancy(0),
+#endif
      iRows(0),
      iCols(0),
      iStep(1),
@@ -138,6 +151,9 @@ public:
   Double calcRdCost( Double numBits, Double distortion, DFunc eDFunc = DF_DEFAULT );
 
   Void    setDistortionWeight  ( const ComponentID compID, const Double distortionWeight ) { m_distortionWeight[compID] = distortionWeight; }
+#if PCC_ME_EXT
+  Double  getDistortionWeight(const ComponentID compID) { return m_distortionWeight[compID]; }
+#endif
   Void    setLambda      ( Double dLambda, const BitDepths &bitDepths );
   Void    setFrameLambda ( Double dLambda ) { m_dFrameLambda = dLambda; }
 
@@ -272,11 +288,16 @@ private:
                                       );
 
 public:
-
-  Distortion   getDistPart(Int bitDepth, const Pel* piCur, Int iCurStride, const Pel* piOrg, Int iOrgStride, UInt uiBlkWidth, UInt uiBlkHeight, const ComponentID compID, DFunc eDFunc = DF_SSE );
+#if PCC_RDO_EXT
+  Distortion   getDistPart(Int bitDepth, const Pel* piCur, Int iCurStride, const Pel* piOrg, Int iOrgStride, UInt uiBlkWidth, UInt uiBlkHeight, const ComponentID compID, DFunc eDFunc = DF_SSE, const Pel* piOccupancy = NULL, Int iOccupancyStride = 0);
+#else
+  Distortion   getDistPart(Int bitDepth, const Pel* piCur, Int iCurStride, const Pel* piOrg, Int iOrgStride, UInt uiBlkWidth, UInt uiBlkHeight, const ComponentID compID, DFunc eDFunc = DF_SSE);
+#endif
 
 };// END CLASS DEFINITION TComRdCost
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMRDCOST__
+
diff --git a/source/Lib/TLibCommon/TComRdCostWeightPrediction.cpp b/source/Lib/TLibCommon/TComRdCostWeightPrediction.cpp
index 99eb37d2..c0acfc8e 100644
--- a/source/Lib/TLibCommon/TComRdCostWeightPrediction.cpp
+++ b/source/Lib/TLibCommon/TComRdCostWeightPrediction.cpp
@@ -39,6 +39,7 @@
 #include <assert.h>
 #include "TComRdCost.h"
 #include "TComRdCostWeightPrediction.h"
+namespace pcc_hm {
 
 static Distortion xCalcHADs2x2w( const WPScalingParam &wpCur, const Pel *piOrg, const Pel *piCurr, Int iStrideOrg, Int iStrideCur, Int iStep );
 static Distortion xCalcHADs4x4w( const WPScalingParam &wpCur, const Pel *piOrg, const Pel *piCurr, Int iStrideOrg, Int iStrideCur, Int iStep );
@@ -599,3 +600,6 @@ Distortion TComRdCostWeightPrediction::xGetHADsw( DistParam* pcDtParam )
 
   return uiSum >> DISTORTION_PRECISION_ADJUSTMENT(pcDtParam->bitDepth-8);
 }
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComRdCostWeightPrediction.h b/source/Lib/TLibCommon/TComRdCostWeightPrediction.h
index 287495e6..03c27407 100644
--- a/source/Lib/TLibCommon/TComRdCostWeightPrediction.h
+++ b/source/Lib/TLibCommon/TComRdCostWeightPrediction.h
@@ -40,6 +40,7 @@
 
 
 #include "CommonDef.h"
+namespace pcc_hm {
 
 class DistParam;
 class TComPattern;
@@ -56,5 +57,7 @@ namespace TComRdCostWeightPrediction
   Distortion xGetHADsw( DistParam* pcDtParam );
 }// END NAMESPACE DEFINITION TComRdCostWeightPrediction
 
+} // namespace pcc_hm
 #endif // __TCOMRDCOSTWEIGHTPREDICTION__
 
+
diff --git a/source/Lib/TLibCommon/TComRectangle.h b/source/Lib/TLibCommon/TComRectangle.h
index ba520164..a55399fc 100644
--- a/source/Lib/TLibCommon/TComRectangle.h
+++ b/source/Lib/TLibCommon/TComRectangle.h
@@ -34,6 +34,7 @@
 
 #ifndef __TCOMRECTANGLE__
 #define __TCOMRECTANGLE__
+namespace pcc_hm {
 
 
 struct TComRectangle
@@ -47,4 +48,6 @@ struct TComRectangle
 
 
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibCommon/TComRom.cpp b/source/Lib/TLibCommon/TComRom.cpp
index 8c552fed..9681fa16 100644
--- a/source/Lib/TLibCommon/TComRom.cpp
+++ b/source/Lib/TLibCommon/TComRom.cpp
@@ -43,6 +43,7 @@
 #include <assert.h>
 #include "TComDataCU.h"
 #include "Debug.h"
+namespace pcc_hm {
 // ====================================================================================================================
 // Initialize / destroy functions
 // ====================================================================================================================
@@ -760,4 +761,16 @@ const Int g_quantInterDefault8x8[8*8] =
 const UInt g_scalingListSize   [SCALING_LIST_SIZE_NUM] = {16,64,256,1024};
 const UInt g_scalingListSizeX  [SCALING_LIST_SIZE_NUM] = { 4, 8, 16,  32};
 
+#if PCC_ME_EXT
+long long g_numPatches[PCC_ME_EXT_MAX_NUM_FRAMES];
+long long g_projectionIndex[PCC_ME_EXT_MAX_NUM_FRAMES][PCC_ME_EXT_MAX_NUM_PATCHES];
+long long g_patch2DInfo[PCC_ME_EXT_MAX_NUM_FRAMES][PCC_ME_EXT_MAX_NUM_PATCHES][4];  // u0, v0, sizeU0, sizeV0
+long long g_patch3DInfo[PCC_ME_EXT_MAX_NUM_FRAMES][PCC_ME_EXT_MAX_NUM_PATCHES][3];  // d1, u1, v1
+
+Bool g_patchesChange[PCC_ME_EXT_MAX_NUM_PATCHES];
+#endif
+
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComRom.h b/source/Lib/TLibCommon/TComRom.h
index 879f4175..74be8cba 100644
--- a/source/Lib/TLibCommon/TComRom.h
+++ b/source/Lib/TLibCommon/TComRom.h
@@ -42,6 +42,7 @@
 
 #include<stdio.h>
 #include<iostream>
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -174,7 +175,18 @@ extern const UInt g_scalingListSizeX[SCALING_LIST_SIZE_NUM];
 
 extern UChar g_ucMsbP1Idx[256];
 extern UChar g_getMsbP1Idx(UInt uiVal);
+
+#if PATCH_BASED_MVP || PCC_ME_EXT
+extern long long g_numPatches[PCC_ME_EXT_MAX_NUM_FRAMES];
+extern long long g_projectionIndex[PCC_ME_EXT_MAX_NUM_FRAMES][PCC_ME_EXT_MAX_NUM_PATCHES];
+extern long long g_patch2DInfo[PCC_ME_EXT_MAX_NUM_FRAMES][PCC_ME_EXT_MAX_NUM_PATCHES][4];  // u0, v0, sizeU0, sizeV0
+extern long long g_patch3DInfo[PCC_ME_EXT_MAX_NUM_FRAMES][PCC_ME_EXT_MAX_NUM_PATCHES][3];  // d1, u1, v1
+extern Bool g_patchesChange[PCC_ME_EXT_MAX_NUM_PATCHES];
+#endif
+
 //! \}
 
+} // namespace pcc_hm
 #endif  //__TCOMROM__
 
+
diff --git a/source/Lib/TLibCommon/TComSampleAdaptiveOffset.cpp b/source/Lib/TLibCommon/TComSampleAdaptiveOffset.cpp
index a694c91d..c6059e5e 100644
--- a/source/Lib/TLibCommon/TComSampleAdaptiveOffset.cpp
+++ b/source/Lib/TLibCommon/TComSampleAdaptiveOffset.cpp
@@ -40,6 +40,7 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <math.h>
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -745,3 +746,6 @@ Void TComSampleAdaptiveOffset::xPCMSampleRestoration (TComDataCU* pcCU, UInt uiA
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComSampleAdaptiveOffset.h b/source/Lib/TLibCommon/TComSampleAdaptiveOffset.h
index e2d76271..61d37a6c 100644
--- a/source/Lib/TLibCommon/TComSampleAdaptiveOffset.h
+++ b/source/Lib/TLibCommon/TComSampleAdaptiveOffset.h
@@ -40,6 +40,7 @@
 
 #include "CommonDef.h"
 #include "TComPic.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -103,5 +104,7 @@ private:
 };
 
 //! \}
+} // namespace pcc_hm
 #endif
 
+
diff --git a/source/Lib/TLibCommon/TComSlice.cpp b/source/Lib/TLibCommon/TComSlice.cpp
index a8ea65ad..23419b6e 100644
--- a/source/Lib/TLibCommon/TComSlice.cpp
+++ b/source/Lib/TLibCommon/TComSlice.cpp
@@ -40,6 +40,7 @@
 #include "TComPic.h"
 #include "TLibEncoder/TEncSbac.h"
 #include "TLibDecoder/TDecSbac.h"
+namespace pcc_hm {
 
 
 //! \ingroup TLibCommon
@@ -2494,3 +2495,6 @@ Void calculateParameterSetChangedFlag(Bool &bChanged, const std::vector<UChar> *
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComSlice.h b/source/Lib/TLibCommon/TComSlice.h
index d5bd55e7..f68919eb 100644
--- a/source/Lib/TLibCommon/TComSlice.h
+++ b/source/Lib/TLibCommon/TComSlice.h
@@ -45,6 +45,7 @@
 #include "TComRom.h"
 #include "TComList.h"
 #include "TComChromaFormat.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -1835,4 +1836,6 @@ protected:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMSLICE__
+
diff --git a/source/Lib/TLibCommon/TComTU.cpp b/source/Lib/TLibCommon/TComTU.cpp
index c54fa2c8..2d8323e2 100644
--- a/source/Lib/TLibCommon/TComTU.cpp
+++ b/source/Lib/TLibCommon/TComTU.cpp
@@ -36,6 +36,7 @@
 #include "TComRom.h"
 #include "TComDataCU.h"
 #include "TComPic.h"
+namespace pcc_hm {
 
 //----------------------------------------------------------------------------------------------------------------------
 
@@ -261,3 +262,6 @@ UInt TComTU::getGolombRiceStatisticsIndex(const ComponentID compID)
 
   return selectedIndex;
 }
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComTU.h b/source/Lib/TLibCommon/TComTU.h
index 624e1e88..a5c941af 100644
--- a/source/Lib/TLibCommon/TComTU.h
+++ b/source/Lib/TLibCommon/TComTU.h
@@ -39,6 +39,7 @@ class TComTU; // forward declaration
 #include "CommonDef.h"
 #include "TComRectangle.h"
 #include "TComChromaFormat.h"
+namespace pcc_hm {
 
 class TComDataCU; // forward declaration
 
@@ -164,4 +165,6 @@ class TComTURecurse : public TComTU
 
 //----------------------------------------------------------------------------------------------------------------------
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibCommon/TComTrQuant.cpp b/source/Lib/TLibCommon/TComTrQuant.cpp
index 6e084ad8..18abca0b 100644
--- a/source/Lib/TLibCommon/TComTrQuant.cpp
+++ b/source/Lib/TLibCommon/TComTrQuant.cpp
@@ -44,6 +44,7 @@
 #include "ContextTables.h"
 #include "TComTU.h"
 #include "Debug.h"
+namespace pcc_hm {
 
 typedef struct
 {
@@ -3630,3 +3631,6 @@ Void TComTrQuant::crossComponentPrediction(       TComTU      & rTu,
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComTrQuant.h b/source/Lib/TLibCommon/TComTrQuant.h
index fefaf28b..99154d99 100644
--- a/source/Lib/TLibCommon/TComTrQuant.h
+++ b/source/Lib/TLibCommon/TComTrQuant.h
@@ -43,6 +43,7 @@
 #include "TComDataCU.h"
 #include "TComChromaFormat.h"
 #include "ContextTables.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -334,4 +335,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMTRQUANT__
+
diff --git a/source/Lib/TLibCommon/TComWeightPrediction.cpp b/source/Lib/TLibCommon/TComWeightPrediction.cpp
index 957add61..0169d7c5 100644
--- a/source/Lib/TLibCommon/TComWeightPrediction.cpp
+++ b/source/Lib/TLibCommon/TComWeightPrediction.cpp
@@ -41,6 +41,7 @@
 #include "TComPic.h"
 #include "TComInterpolationFilter.h"
 #include "TComWeightPrediction.h"
+namespace pcc_hm {
 
 
 static inline Pel weightBidir( Int w0, Pel P0, Int w1, Pel P1, Int round, Int shift, Int offset, Int clipBD)
@@ -388,3 +389,6 @@ Void TComWeightPrediction::xWeightedPredictionUni(       TComDataCU *const pcCU,
   }
   addWeightUni( pcYuvSrc, pcCU->getSlice()->getSPS()->getBitDepths(), uiPartAddr, iWidth, iHeight, pwp, pcYuvPred );
 }
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComWeightPrediction.h b/source/Lib/TLibCommon/TComWeightPrediction.h
index e30290c1..b47eea5a 100644
--- a/source/Lib/TLibCommon/TComWeightPrediction.h
+++ b/source/Lib/TLibCommon/TComWeightPrediction.h
@@ -39,6 +39,7 @@
 #define __TCOMWEIGHTPREDICTION__
 
 #include "CommonDef.h"
+namespace pcc_hm {
 
 // forward declarations
 class  TComDataCU;
@@ -99,4 +100,6 @@ public:
                                       TComYuv              *pcYuvDst );
 };
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibCommon/TComYuv.cpp b/source/Lib/TLibCommon/TComYuv.cpp
index a549862c..796f69f9 100644
--- a/source/Lib/TLibCommon/TComYuv.cpp
+++ b/source/Lib/TLibCommon/TComYuv.cpp
@@ -44,6 +44,7 @@
 #include "CommonDef.h"
 #include "TComYuv.h"
 #include "TComInterpolationFilter.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -645,3 +646,6 @@ Void TComYuv::DefaultConvertPix(const UInt pixX, const UInt pixY, const UInt wid
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibCommon/TComYuv.h b/source/Lib/TLibCommon/TComYuv.h
index b9173c80..e9eb2932 100644
--- a/source/Lib/TLibCommon/TComYuv.h
+++ b/source/Lib/TLibCommon/TComYuv.h
@@ -42,6 +42,7 @@
 #include "CommonDef.h"
 #include "TComPicYuv.h"
 #include "TComRectangle.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -200,13 +201,15 @@ public:
   UInt         getHeight                  (const ComponentID id) const { return m_iHeight >> getComponentScaleY(id);  }
   UInt         getWidth                   (const ComponentID id) const { return m_iWidth >> getComponentScaleX(id);   }
   ChromaFormat getChromaFormat            ()                     const { return m_chromaFormatIDC; }
-  UInt         getNumberValidComponents   ()                     const { return ::getNumberValidComponents(m_chromaFormatIDC); }
-  UInt         getComponentScaleX         (const ComponentID id) const { return ::getComponentScaleX(id, m_chromaFormatIDC); }
-  UInt         getComponentScaleY         (const ComponentID id) const { return ::getComponentScaleY(id, m_chromaFormatIDC); }
+  UInt         getNumberValidComponents   ()                     const { return pcc_hm::getNumberValidComponents(m_chromaFormatIDC); }
+  UInt         getComponentScaleX         (const ComponentID id) const { return pcc_hm::getComponentScaleX(id, m_chromaFormatIDC); }
+  UInt         getComponentScaleY         (const ComponentID id) const { return pcc_hm::getComponentScaleY(id, m_chromaFormatIDC); }
   Void         convert          (const Bool extendedPrecision, const UInt pixX, const UInt pixY, const UInt width, Bool bForwardConversion, const BitDepths& bitDepths, Bool bLossless = false, TComYuv* pcYuvNoCorrResi= NULL);
   Void         DefaultConvertPix(const UInt pixX, const UInt pixY, const UInt width, const BitDepths& bitDepths);
 };// END CLASS DEFINITION TComYuv
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMYUV__
+
diff --git a/source/Lib/TLibCommon/TypeDef.h b/source/Lib/TLibCommon/TypeDef.h
index f9e16de7..a4d93449 100644
--- a/source/Lib/TLibCommon/TypeDef.h
+++ b/source/Lib/TLibCommon/TypeDef.h
@@ -46,9 +46,21 @@
 #include <utility>
 #include <iostream>
 
+namespace pcc_hm {
+  
+
 //! \ingroup TLibCommon
 //! \{
 
+#define PCC_ME_EXT                                         1
+#define PCC_RDO_EXT                                        1
+
+#if PCC_ME_EXT
+#define PCC_ME_EXT_MAX_NUM_FRAMES                         600
+#define PCC_ME_EXT_MAX_NUM_PATCHES                        1000
+#define PCC_ME_NUM_LAYERS_ACTIVE                          2
+#endif
+
 // ====================================================================================================================
 // Debugging
 // ====================================================================================================================
@@ -141,7 +153,7 @@
 
 // This can be enabled by the makefile
 #ifndef RExt__HIGH_BIT_DEPTH_SUPPORT
-#define RExt__HIGH_BIT_DEPTH_SUPPORT                      0 ///< 0 (default) use data type definitions for 8-10 bit video, 1 = use larger data types to allow for up to 16-bit video (originally developed as part of N0188)
+#define RExt__HIGH_BIT_DEPTH_SUPPORT                      1 ///< 0 (default) use data type definitions for 8-10 bit video, 1 = use larger data types to allow for up to 16-bit video (originally developed as part of N0188)
 #endif
 
 #if defined __SSE2__ || defined __AVX2__ || defined __AVX__ || defined _M_AMD64 || defined _M_X64
@@ -1112,6 +1124,8 @@ typedef std::vector<RNSEIWindow> RNSEIWindowVec;
 #endif
 //! \}
 
+} // namespace pcc_hm
 #endif
 
 
+
diff --git a/source/Lib/TLibDecoder/AnnexBread.cpp b/source/Lib/TLibDecoder/AnnexBread.cpp
index d9396e0a..e58a1cfd 100644
--- a/source/Lib/TLibDecoder/AnnexBread.cpp
+++ b/source/Lib/TLibDecoder/AnnexBread.cpp
@@ -44,6 +44,7 @@
 #if RExt__DECODER_DEBUG_BIT_STATISTICS
 #include "TLibCommon/TComCodingStatistics.h"
 #endif
+namespace pcc_hm {
 
 using namespace std;
 
@@ -196,4 +197,62 @@ byteStreamNALUnit(
   stats.m_numBytesInNALUnit = UInt(nalUnit.size());
   return eof;
 }
+
+#if SAMPLE_STREAM
+static Void
+_sampleStreamNALUnit(
+  InputByteStream& bs,
+  size_t unitSizePrecisionBytes,
+  vector<uint8_t>& nalUnit,
+  AnnexBStats& stats)
+{
+  //read the size
+  size_t auSize=0;
+  for(size_t i=0; i<unitSizePrecisionBytes; i++)
+    auSize = (auSize<<8) + bs.readByte();
+  
+#if RExt__DECODER_DEBUG_BIT_STATISTICS
+  statBits.bits+=32; statBits.count+=4;
+#endif
+  stats.m_numStartCodePrefixBytes += 0;
+
+#if RExt__DECODER_DEBUG_BIT_STATISTICS
+  TComCodingStatistics::SStat &bodyStats=TComCodingStatistics::GetStatisticEP(STATS__NAL_UNIT_TOTAL_BODY);
+#endif
+
+  for(size_t nalubyte=0; nalubyte<auSize; nalubyte++)
+  {
+#if RExt__DECODER_DEBUG_BIT_STATISTICS
+    uint8_t thebyte=bs.readByte();bodyStats.bits+=8;bodyStats.count++;
+    nalUnit.push_back(thebyte);
+#else
+    nalUnit.push_back(bs.readByte());
+#endif
+  }
+  
+}
+
+Bool
+sampleStreamNALUnit(
+  InputByteStream& bs,
+  size_t unitSizePrecisionBytes,
+  vector<uint8_t>& nalUnit,
+  AnnexBStats& stats)
+{
+  Bool eof = false;
+  try
+  {
+    _sampleStreamNALUnit(bs, unitSizePrecisionBytes, nalUnit, stats);
+  }
+  catch (...)
+  {
+    eof = true;
+  }
+  stats.m_numBytesInNALUnit = UInt(nalUnit.size());
+  return eof;
+}
+#endif
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibDecoder/AnnexBread.h b/source/Lib/TLibDecoder/AnnexBread.h
index b7a48771..d4557894 100644
--- a/source/Lib/TLibDecoder/AnnexBread.h
+++ b/source/Lib/TLibDecoder/AnnexBread.h
@@ -46,6 +46,7 @@
 #include <vector>
 
 #include "TLibCommon/CommonDef.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -194,6 +195,12 @@ struct AnnexBStats
 
 Bool byteStreamNALUnit(InputByteStream& bs, std::vector<uint8_t>& nalUnit, AnnexBStats& stats);
 
+#if SAMPLE_STREAM
+Bool sampleStreamNALUnit(InputByteStream& bs, size_t unitSizePrecisionBytes, std::vector<uint8_t>& nalUnit, AnnexBStats& stats);
+#endif
+
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibDecoder/NALread.cpp b/source/Lib/TLibDecoder/NALread.cpp
index ecc0e0cf..7a5c4384 100644
--- a/source/Lib/TLibDecoder/NALread.cpp
+++ b/source/Lib/TLibDecoder/NALread.cpp
@@ -50,6 +50,7 @@
 #if ENC_DEC_TRACE && DEC_NUH_TRACE
 #include "TLibCommon/TComRom.h"
 #endif
+namespace pcc_hm {
 
 using namespace std;
 
@@ -182,3 +183,6 @@ Void read(InputNALUnit& nalu)
   readNalUnitHeader(nalu);
 }
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibDecoder/NALread.h b/source/Lib/TLibDecoder/NALread.h
index 290978b0..b5ca9510 100644
--- a/source/Lib/TLibDecoder/NALread.h
+++ b/source/Lib/TLibDecoder/NALread.h
@@ -44,6 +44,7 @@
 #include "TLibCommon/CommonDef.h"
 #include "TLibCommon/TComBitStream.h"
 #include "TLibCommon/NAL.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -70,4 +71,6 @@ Void readNalUnitHeader(InputNALUnit& nalu);
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibDecoder/SEIread.cpp b/source/Lib/TLibDecoder/SEIread.cpp
index eaff1615..83e00c73 100644
--- a/source/Lib/TLibDecoder/SEIread.cpp
+++ b/source/Lib/TLibDecoder/SEIread.cpp
@@ -44,6 +44,7 @@
 #include "SEIread.h"
 #include "TLibCommon/TComPicYuv.h"
 #include <iomanip>
+namespace pcc_hm {
 
 
 //! \ingroup TLibDecoder
@@ -1907,3 +1908,6 @@ Void SEIReader::xParseSEIRegionalNesting( SEIRegionalNesting& sei, UInt payloadS
 
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibDecoder/SEIread.h b/source/Lib/TLibDecoder/SEIread.h
index e5bf3a00..56e1e321 100644
--- a/source/Lib/TLibDecoder/SEIread.h
+++ b/source/Lib/TLibDecoder/SEIread.h
@@ -47,6 +47,7 @@
 //! \{
 
 #include "TLibCommon/SEI.h"
+namespace pcc_hm {
 class TComInputBitstream;
 
 
@@ -129,4 +130,6 @@ protected:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibDecoder/SyntaxElementParser.cpp b/source/Lib/TLibDecoder/SyntaxElementParser.cpp
index e97eddb5..04265887 100644
--- a/source/Lib/TLibDecoder/SyntaxElementParser.cpp
+++ b/source/Lib/TLibDecoder/SyntaxElementParser.cpp
@@ -45,6 +45,7 @@
 #if RExt__DECODER_DEBUG_BIT_STATISTICS
 #include "TLibCommon/TComCodingStatistics.h"
 #endif
+namespace pcc_hm {
 
 #if ENC_DEC_TRACE
 
@@ -314,3 +315,6 @@ Void FDReader::parseFillerData(TComInputBitstream* bs, UInt &fdSize)
 
 //! \}
 
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibDecoder/SyntaxElementParser.h b/source/Lib/TLibDecoder/SyntaxElementParser.h
index 2caf6ba0..1da8b18a 100644
--- a/source/Lib/TLibDecoder/SyntaxElementParser.h
+++ b/source/Lib/TLibDecoder/SyntaxElementParser.h
@@ -44,6 +44,7 @@
 
 #include "TLibCommon/TComRom.h"
 #include "TDecConformance.h"
+namespace pcc_hm {
 
 #if DECODER_PARTIAL_CONFORMANCE_CHECK!=0
 #define READ_SCODE_CHK(length, code, name, minValIncl, maxValIncl) xReadSCodeChk ( length, code, name, minValIncl, maxValIncl )
@@ -147,5 +148,7 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(__SYNTAXELEMENTPARSER__)
 
+
diff --git a/source/Lib/TLibDecoder/TDecBinCoder.h b/source/Lib/TLibDecoder/TDecBinCoder.h
index 84e8cd62..78b70c89 100644
--- a/source/Lib/TLibDecoder/TDecBinCoder.h
+++ b/source/Lib/TLibDecoder/TDecBinCoder.h
@@ -40,6 +40,7 @@
 
 #include "TLibCommon/ContextModel.h"
 #include "TLibCommon/TComBitStream.h"
+namespace pcc_hm {
 
 #if RExt__DECODER_DEBUG_BIT_STATISTICS
 class TComCodingStatisticsClassType;
@@ -83,4 +84,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibDecoder/TDecBinCoderCABAC.cpp b/source/Lib/TLibDecoder/TDecBinCoderCABAC.cpp
index 3b0ed0ca..c12702b3 100644
--- a/source/Lib/TLibDecoder/TDecBinCoderCABAC.cpp
+++ b/source/Lib/TLibDecoder/TDecBinCoderCABAC.cpp
@@ -40,6 +40,7 @@
 #if RExt__DECODER_DEBUG_BIT_STATISTICS
 #include "TLibCommon/TComCodingStatistics.h"
 #endif
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -381,3 +382,6 @@ Void  TDecBinCABAC::xReadPCMCode(UInt uiLength, UInt& ruiCode)
 #endif
 }
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibDecoder/TDecBinCoderCABAC.h b/source/Lib/TLibDecoder/TDecBinCoderCABAC.h
index 98a78b0b..ba0badc3 100644
--- a/source/Lib/TLibDecoder/TDecBinCoderCABAC.h
+++ b/source/Lib/TLibDecoder/TDecBinCoderCABAC.h
@@ -40,6 +40,7 @@
 
 #include "TLibCommon/TComCABACTables.h"
 #include "TDecBinCoder.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -87,5 +88,7 @@ private:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
 
+
diff --git a/source/Lib/TLibDecoder/TDecCAVLC.cpp b/source/Lib/TLibDecoder/TDecCAVLC.cpp
index 13245894..95b0051a 100644
--- a/source/Lib/TLibDecoder/TDecCAVLC.cpp
+++ b/source/Lib/TLibDecoder/TDecCAVLC.cpp
@@ -43,6 +43,7 @@
 #include "TLibCommon/TComCodingStatistics.h"
 #endif
 #include "TDecConformance.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -2410,3 +2411,6 @@ Void TDecCavlc::parseScanTraverseModeFlag( TComDataCU* /*pcCU*/, UInt /*uiAbsPar
 
 //! \}
 
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibDecoder/TDecCAVLC.h b/source/Lib/TLibDecoder/TDecCAVLC.h
index 180c6572..ab66125d 100644
--- a/source/Lib/TLibDecoder/TDecCAVLC.h
+++ b/source/Lib/TLibDecoder/TDecCAVLC.h
@@ -44,6 +44,7 @@
 
 #include "TDecEntropy.h"
 #include "SyntaxElementParser.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -128,4 +129,6 @@ protected:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(AFX_TDECCAVLC_H__9732DD64_59B0_4A41_B29E_1A5B18821EAD__INCLUDED_)
+
diff --git a/source/Lib/TLibDecoder/TDecConformance.cpp b/source/Lib/TLibDecoder/TDecConformance.cpp
index b1af8093..c8138cff 100644
--- a/source/Lib/TLibDecoder/TDecConformance.cpp
+++ b/source/Lib/TLibDecoder/TDecConformance.cpp
@@ -41,6 +41,7 @@
 #include "TLibCommon/TComPicSym.h"
 #include "NALread.h"
 #include <math.h>
+namespace pcc_hm {
 
 UInt
 LevelTierFeatures::getMaxPicWidthInLumaSamples()  const
@@ -450,3 +451,6 @@ TDecConformanceCheck::checkCtuDecoding(const UInt numUsedBits)
 }
 
 #endif
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibDecoder/TDecConformance.h b/source/Lib/TLibDecoder/TDecConformance.h
index a9771d47..e1d0100b 100644
--- a/source/Lib/TLibDecoder/TDecConformance.h
+++ b/source/Lib/TLibDecoder/TDecConformance.h
@@ -55,6 +55,7 @@
 #if DECODER_PARTIAL_CONFORMANCE_CHECK == 2
 #include <stdlib.h>
 #endif
+namespace pcc_hm {
 
 
 // Forward declarations
@@ -261,4 +262,6 @@ public:
 };
 
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibDecoder/TDecCu.cpp b/source/Lib/TLibDecoder/TDecCu.cpp
index 4b78457e..ca0ec0cd 100644
--- a/source/Lib/TLibDecoder/TDecCu.cpp
+++ b/source/Lib/TLibDecoder/TDecCu.cpp
@@ -38,6 +38,7 @@
 #include "TDecCu.h"
 #include "TLibCommon/TComTU.h"
 #include "TLibCommon/TComPrediction.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -740,7 +741,7 @@ TDecCu::xReconIntraQT( TComDataCU* pcCU, UInt uiDepth )
     for (UInt chType=CHANNEL_TYPE_LUMA; chType<numChType; chType++)
     {
       const ChannelType chanType=ChannelType(chType);
-      const Bool NxNPUHas4Parts = ::isChroma(chanType) ? enable4ChromaPUsInIntraNxNCU(pcCU->getPic()->getChromaFormat()) : true;
+      const Bool NxNPUHas4Parts = pcc_hm::isChroma(chanType) ? enable4ChromaPUsInIntraNxNCU(pcCU->getPic()->getChromaFormat()) : true;
       const UInt uiInitTrDepth = ( pcCU->getPartitionSize(0) != SIZE_2Nx2N && NxNPUHas4Parts ? 1 : 0 );
 
       TComTURecurse tuRecurseCU(pcCU, 0);
@@ -1181,3 +1182,6 @@ Void TDecCu::xReconPaletteMode(TComDataCU *pcCU, UInt depth)
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibDecoder/TDecCu.h b/source/Lib/TLibDecoder/TDecCu.h
index d1097c7e..b3968e07 100644
--- a/source/Lib/TLibDecoder/TDecCu.h
+++ b/source/Lib/TLibDecoder/TDecCu.h
@@ -45,6 +45,7 @@
 #include "TLibCommon/TComTrQuant.h"
 #include "TDecEntropy.h"
 #include "TDecConformance.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -130,5 +131,7 @@ protected:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
 
+
diff --git a/source/Lib/TLibDecoder/TDecEntropy.cpp b/source/Lib/TLibDecoder/TDecEntropy.cpp
index f8587923..8fd8a863 100644
--- a/source/Lib/TLibDecoder/TDecEntropy.cpp
+++ b/source/Lib/TLibDecoder/TDecEntropy.cpp
@@ -39,6 +39,8 @@
 #include "TLibCommon/TComTU.h"
 #include "TLibCommon/TComPrediction.h"
 
+namespace pcc_hm {
+  
 #if ENVIRONMENT_VARIABLE_DEBUG_AND_TEST
 #include "../TLibCommon/Debug.h"
 static const Bool bDebugRQT = DebugOptionList::DebugRQT.getInt()!=0;
@@ -742,3 +744,6 @@ Void TDecEntropy::decodePaletteModeInfo( TComDataCU* pcCU, UInt absPartIdx, UInt
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibDecoder/TDecEntropy.h b/source/Lib/TLibDecoder/TDecEntropy.h
index 997b4838..326f571f 100644
--- a/source/Lib/TLibDecoder/TDecEntropy.h
+++ b/source/Lib/TLibDecoder/TDecEntropy.h
@@ -45,6 +45,7 @@
 #include "TLibCommon/TComSampleAdaptiveOffset.h"
 #include "TLibCommon/TComRectangle.h"
 #include "TDecConformance.h"
+namespace pcc_hm {
 
 class TDecSbac;
 class TDecCavlc;
@@ -189,5 +190,7 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TDECENTROPY__
 
+
diff --git a/source/Lib/TLibDecoder/TDecGop.cpp b/source/Lib/TLibDecoder/TDecGop.cpp
index c002c16a..64b43c22 100644
--- a/source/Lib/TLibDecoder/TDecGop.cpp
+++ b/source/Lib/TLibDecoder/TDecGop.cpp
@@ -44,6 +44,7 @@
 #include "TLibCommon/SEI.h"
 
 #include <time.h>
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -265,3 +266,6 @@ static Void calcAndPrintHashStatus(TComPicYuv& pic, const SEIDecodedPictureHash*
   }
 }
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibDecoder/TDecGop.h b/source/Lib/TLibDecoder/TDecGop.h
index a6645800..04b9d023 100644
--- a/source/Lib/TLibDecoder/TDecGop.h
+++ b/source/Lib/TLibDecoder/TDecGop.h
@@ -54,6 +54,7 @@
 #include "TDecSlice.h"
 #include "TDecBinCoder.h"
 #include "TDecBinCoderCABAC.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -105,5 +106,7 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(AFX_TDECGOP_H__29440B7A_7CC0_48C7_8DD5_1A531D3CED45__INCLUDED_)
 
+
diff --git a/source/Lib/TLibDecoder/TDecSbac.cpp b/source/Lib/TLibDecoder/TDecSbac.cpp
index 59790834..e72eb59d 100644
--- a/source/Lib/TLibDecoder/TDecSbac.cpp
+++ b/source/Lib/TLibDecoder/TDecSbac.cpp
@@ -53,6 +53,7 @@
 #if ENVIRONMENT_VARIABLE_DEBUG_AND_TEST
 #include "../TLibCommon/Debug.h"
 #endif
+namespace pcc_hm {
 
 
 //////////////////////////////////////////////////////////////////////
@@ -2549,3 +2550,6 @@ UInt TDecSbac::xReadTruncMsbP1RefinementBits( ContextModel* pcSCModel, UInt maxV
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibDecoder/TDecSbac.h b/source/Lib/TLibDecoder/TDecSbac.h
index 0122ce43..f9f4da35 100644
--- a/source/Lib/TLibDecoder/TDecSbac.h
+++ b/source/Lib/TLibDecoder/TDecSbac.h
@@ -49,6 +49,7 @@
 #include "TLibCommon/ContextTables.h"
 #include "TLibCommon/ContextModel.h"
 #include "TLibCommon/ContextModel3DBuffer.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -217,4 +218,6 @@ private:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(AFX_TDECSBAC_H__CFCAAA19_8110_47F4_9A16_810C4B5499D5__INCLUDED_)
+
diff --git a/source/Lib/TLibDecoder/TDecSlice.cpp b/source/Lib/TLibDecoder/TDecSlice.cpp
index d4865e47..c83cec2e 100644
--- a/source/Lib/TLibDecoder/TDecSlice.cpp
+++ b/source/Lib/TLibDecoder/TDecSlice.cpp
@@ -37,6 +37,7 @@
 
 #include "TDecSlice.h"
 #include "TDecConformance.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -403,3 +404,6 @@ Void TDecSlice::xSetPredDefault(Pel lastPalette[MAX_NUM_COMPONENT][MAX_PALETTE_P
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibDecoder/TDecSlice.h b/source/Lib/TLibDecoder/TDecSlice.h
index 8e42903c..7773f7f8 100644
--- a/source/Lib/TLibDecoder/TDecSlice.h
+++ b/source/Lib/TLibDecoder/TDecSlice.h
@@ -49,6 +49,7 @@
 #include "TDecCu.h"
 #include "TDecSbac.h"
 #include "TDecBinCoderCABAC.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -90,5 +91,7 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
 
+
diff --git a/source/Lib/TLibDecoder/TDecTop.cpp b/source/Lib/TLibDecoder/TDecTop.cpp
index 17beb046..4cccce8b 100644
--- a/source/Lib/TLibDecoder/TDecTop.cpp
+++ b/source/Lib/TLibDecoder/TDecTop.cpp
@@ -38,6 +38,7 @@
 #include "NALread.h"
 #include "TDecTop.h"
 #include "TDecConformance.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -1188,3 +1189,6 @@ Bool TDecTop::isRandomAccessSkipPicture(Int& iSkipFrame,  Int& iPOCLastDisplay)
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibDecoder/TDecTop.h b/source/Lib/TLibDecoder/TDecTop.h
index 087e0722..a81ea9b0 100644
--- a/source/Lib/TLibDecoder/TDecTop.h
+++ b/source/Lib/TLibDecoder/TDecTop.h
@@ -52,6 +52,7 @@
 #include "TDecCAVLC.h"
 #include "SEIread.h"
 #include "TDecConformance.h"
+namespace pcc_hm {
 
 class InputNALUnit;
 
@@ -203,5 +204,7 @@ private:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TDECTOP__
 
+
diff --git a/source/Lib/TLibEncoder/AnnexBwrite.h b/source/Lib/TLibEncoder/AnnexBwrite.h
index e7b94147..4d9bf8f3 100644
--- a/source/Lib/TLibEncoder/AnnexBwrite.h
+++ b/source/Lib/TLibEncoder/AnnexBwrite.h
@@ -39,6 +39,7 @@
 #include <ostream>
 #include "TLibCommon/AccessUnit.h"
 #include "NALwrite.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -86,6 +87,31 @@ static std::vector<UInt> writeAnnexB(std::ostream& out, const AccessUnit& au)
 
   return annexBsizes;
 }
+
+#if SAMPLE_STREAM
+static std::vector<UInt> writeSampleStream(std::ostream& out, UInt precisionBytes, const AccessUnit& au)
+{
+  std::vector<UInt> sampleStreamsizes;
+
+  for (AccessUnit::const_iterator it = au.begin(); it != au.end(); it++)
+  {
+    const NALUnitEBSP& nalu = **it;
+    UInt size = 0;
+    
+    TComOutputBitstream bsNALUSize;
+    bsNALUSize.write(nalu.m_nalUnitData.str().size(), precisionBytes*8);
+    out.write(reinterpret_cast<const TChar*>(bsNALUSize.getByteStream()), bsNALUSize.getByteStreamLength());
+    out << nalu.m_nalUnitData.str();
+    size += UInt(nalu.m_nalUnitData.str().size());
+    sampleStreamsizes.push_back(size);
+  }
+
+  return sampleStreamsizes;
+}
+#endif
+
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibEncoder/NALwrite.cpp b/source/Lib/TLibEncoder/NALwrite.cpp
index 31b16531..5a9b26ad 100644
--- a/source/Lib/TLibEncoder/NALwrite.cpp
+++ b/source/Lib/TLibEncoder/NALwrite.cpp
@@ -38,6 +38,7 @@
 #include "TLibCommon/NAL.h"
 #include "TLibCommon/TComBitStream.h"
 #include "NALwrite.h"
+namespace pcc_hm {
 
 using namespace std;
 
@@ -123,3 +124,6 @@ Void write(ostream& out, OutputNALUnit& nalu)
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/NALwrite.h b/source/Lib/TLibEncoder/NALwrite.h
index 698a5322..6ffc8a5e 100644
--- a/source/Lib/TLibEncoder/NALwrite.h
+++ b/source/Lib/TLibEncoder/NALwrite.h
@@ -41,6 +41,7 @@
 #include "TLibCommon/CommonDef.h"
 #include "TLibCommon/TComBitStream.h"
 #include "TLibCommon/NAL.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -84,4 +85,6 @@ inline NALUnitEBSP::NALUnitEBSP(OutputNALUnit& nalu)
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibEncoder/SEIEncoder.cpp b/source/Lib/TLibEncoder/SEIEncoder.cpp
index 939b406b..4ef8ad93 100644
--- a/source/Lib/TLibEncoder/SEIEncoder.cpp
+++ b/source/Lib/TLibEncoder/SEIEncoder.cpp
@@ -35,6 +35,7 @@
 #include "TLibCommon/SEI.h"
 #include "TEncGOP.h"
 #include "TEncTop.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -1318,3 +1319,6 @@ Void SEIEncoder::initSEIGreenMetadataInfo(SEIGreenMetadataInfo *seiGreenMetadata
 
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/SEIEncoder.h b/source/Lib/TLibEncoder/SEIEncoder.h
index 21265cc8..826de455 100644
--- a/source/Lib/TLibEncoder/SEIEncoder.h
+++ b/source/Lib/TLibEncoder/SEIEncoder.h
@@ -37,6 +37,7 @@
 #define __SEIENCODER__
 
 #include "TLibCommon/SEI.h"
+namespace pcc_hm {
 
 // forward declarations
 class TEncCfg;
@@ -129,4 +130,6 @@ private:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __SEIENCODER__
+
diff --git a/source/Lib/TLibEncoder/SEIwrite.cpp b/source/Lib/TLibEncoder/SEIwrite.cpp
index fa6132b9..530ff85e 100644
--- a/source/Lib/TLibEncoder/SEIwrite.cpp
+++ b/source/Lib/TLibEncoder/SEIwrite.cpp
@@ -37,6 +37,7 @@
 #include "TLibCommon/TComSlice.h"
 #include "TLibCommon/TComPicYuv.h"
 #include "SEIwrite.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -1380,3 +1381,6 @@ Void SEIWriter::xWriteByteAlign()
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/SEIwrite.h b/source/Lib/TLibEncoder/SEIwrite.h
index 1227c3b0..626b1b75 100644
--- a/source/Lib/TLibEncoder/SEIwrite.h
+++ b/source/Lib/TLibEncoder/SEIwrite.h
@@ -38,6 +38,7 @@
 
 #include "SyntaxElementWriter.h"
 #include "TLibCommon/SEI.h"
+namespace pcc_hm {
 
 class TComBitIf;
 
@@ -119,4 +120,6 @@ protected:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibEncoder/SyntaxElementWriter.cpp b/source/Lib/TLibEncoder/SyntaxElementWriter.cpp
index 897f55f4..6e435815 100644
--- a/source/Lib/TLibEncoder/SyntaxElementWriter.cpp
+++ b/source/Lib/TLibEncoder/SyntaxElementWriter.cpp
@@ -37,6 +37,7 @@
 
 #include "TLibCommon/CommonDef.h"
 #include "SyntaxElementWriter.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -174,3 +175,6 @@ Void SyntaxElementWriter::xWriteRbspTrailingBits()
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/SyntaxElementWriter.h b/source/Lib/TLibEncoder/SyntaxElementWriter.h
index fe2e297f..cb1b0138 100644
--- a/source/Lib/TLibEncoder/SyntaxElementWriter.h
+++ b/source/Lib/TLibEncoder/SyntaxElementWriter.h
@@ -45,6 +45,7 @@
 #include "TLibCommon/CommonDef.h"
 #include "TLibCommon/TComBitStream.h"
 #include "TLibCommon/TComRom.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -96,5 +97,7 @@ protected:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(__SYNTAXELEMENTWRITER__)
 
+
diff --git a/source/Lib/TLibEncoder/TEncAnalyze.h b/source/Lib/TLibEncoder/TEncAnalyze.h
index 61456e21..e7932bb7 100644
--- a/source/Lib/TLibEncoder/TEncAnalyze.h
+++ b/source/Lib/TLibEncoder/TEncAnalyze.h
@@ -51,6 +51,7 @@
 #if EXTENSION_360_VIDEO
 #include "TAppEncHelper360/TExt360EncAnalyze.h"
 #endif
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -471,4 +472,6 @@ extern TEncAnalyze             m_gcAnalyzeAll_in;
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(AFX_TENCANALYZE_H__C79BCAA2_6AC8_4175_A0FE_CF02F5829233__INCLUDED_)
+
diff --git a/source/Lib/TLibEncoder/TEncBinCoder.h b/source/Lib/TLibEncoder/TEncBinCoder.h
index 891385ae..3708672d 100644
--- a/source/Lib/TLibEncoder/TEncBinCoder.h
+++ b/source/Lib/TLibEncoder/TEncBinCoder.h
@@ -40,6 +40,7 @@
 
 #include "TLibCommon/ContextModel.h"
 #include "TLibCommon/TComBitStream.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -82,5 +83,7 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
 
+
diff --git a/source/Lib/TLibEncoder/TEncBinCoderCABAC.cpp b/source/Lib/TLibEncoder/TEncBinCoderCABAC.cpp
index 827503f1..5ccdaf5a 100644
--- a/source/Lib/TLibEncoder/TEncBinCoderCABAC.cpp
+++ b/source/Lib/TLibEncoder/TEncBinCoderCABAC.cpp
@@ -38,6 +38,7 @@
 #include "TEncBinCoderCABAC.h"
 #include "TLibCommon/TComRom.h"
 #include "TLibCommon/Debug.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -444,3 +445,6 @@ Void TEncBinCABAC::writeOut()
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/TEncBinCoderCABAC.h b/source/Lib/TLibEncoder/TEncBinCoderCABAC.h
index 2e9dd445..e15bd4d0 100644
--- a/source/Lib/TLibEncoder/TEncBinCoderCABAC.h
+++ b/source/Lib/TLibEncoder/TEncBinCoderCABAC.h
@@ -40,6 +40,7 @@
 
 #include "TLibCommon/TComCABACTables.h"
 #include "TEncBinCoder.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -107,5 +108,7 @@ private:
 
 //! \}
 
+} // namespace pcc_hm
 #endif
 
+
diff --git a/source/Lib/TLibEncoder/TEncBinCoderCABACCounter.cpp b/source/Lib/TLibEncoder/TEncBinCoderCABACCounter.cpp
index c742f9c8..99cc17a3 100644
--- a/source/Lib/TLibEncoder/TEncBinCoderCABACCounter.cpp
+++ b/source/Lib/TLibEncoder/TEncBinCoderCABACCounter.cpp
@@ -38,6 +38,7 @@
 #include "TEncBinCoderCABACCounter.h"
 #include "TLibCommon/TComRom.h"
 #include "TLibCommon/Debug.h"
+namespace pcc_hm {
 
 
 #if FAST_BIT_EST
@@ -142,3 +143,6 @@ Void TEncBinCABACCounter::align()
 //! \}
 #endif
 
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/TEncBinCoderCABACCounter.h b/source/Lib/TLibEncoder/TEncBinCoderCABACCounter.h
index 780852a9..1cf7fa64 100644
--- a/source/Lib/TLibEncoder/TEncBinCoderCABACCounter.h
+++ b/source/Lib/TLibEncoder/TEncBinCoderCABACCounter.h
@@ -40,6 +40,7 @@
 
 
 #include "TEncBinCoderCABAC.h"
+namespace pcc_hm {
 
 #if FAST_BIT_EST
 
@@ -78,5 +79,7 @@ private:
 
 #endif
 
+} // namespace pcc_hm
 #endif
 
+
diff --git a/source/Lib/TLibEncoder/TEncCavlc.cpp b/source/Lib/TLibEncoder/TEncCavlc.cpp
index bbeb6f15..b26e506f 100644
--- a/source/Lib/TLibEncoder/TEncCavlc.cpp
+++ b/source/Lib/TLibEncoder/TEncCavlc.cpp
@@ -38,6 +38,7 @@
 #include "../TLibCommon/CommonDef.h"
 #include "TEncCavlc.h"
 #include "SEIwrite.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -1691,3 +1692,6 @@ Void TEncCavlc::codeColourTransformFlag( TComDataCU* /*pcCU*/, UInt /*absPartIdx
   assert(0);
 }
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/TEncCavlc.h b/source/Lib/TLibEncoder/TEncCavlc.h
index e41c8e38..145af18c 100644
--- a/source/Lib/TLibEncoder/TEncCavlc.h
+++ b/source/Lib/TLibEncoder/TEncCavlc.h
@@ -47,6 +47,7 @@
 #include "TLibCommon/TComRom.h"
 #include "TEncEntropy.h"
 #include "SyntaxElementWriter.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -149,5 +150,7 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(AFX_TENCCAVLC_H__EE8A0B30_945B_4169_B290_24D3AD52296F__INCLUDED_)
 
+
diff --git a/source/Lib/TLibEncoder/TEncCfg.h b/source/Lib/TLibEncoder/TEncCfg.h
index f8ec9ecf..58b59d18 100644
--- a/source/Lib/TLibEncoder/TEncCfg.h
+++ b/source/Lib/TLibEncoder/TEncCfg.h
@@ -45,6 +45,7 @@
 #include "TLibCommon/CommonDef.h"
 #include "TLibCommon/TComSlice.h"
 #include <assert.h>
+namespace pcc_hm {
 
 struct GOPEntry
 {
@@ -131,6 +132,18 @@ struct TEncSEIKneeFunctionInformation
 };
 
 protected:
+#if PCC_ME_EXT
+	std::string m_blockToPatchFileName;
+	std::string m_occupancyFileName;
+	Bool        m_usePCCExt;
+	//std::string m_patchInfoFileName;
+#endif
+#if PCC_RDO_EXT
+  Bool        m_usePCCRDOExt;
+#endif
+#if PCC_RDO_EXT && !PCC_ME_EXT
+  std::string m_occupancyFileName;
+#endif
   //==== File I/O ========
   Int       m_iFrameRate;
   Int       m_FrameSkip;
@@ -559,6 +572,27 @@ public:
   virtual ~TEncCfg()
   {}
 
+#if PCC_ME_EXT
+  Void setBlockToPatchFileName(std::string blockToPatchFileName) { m_blockToPatchFileName = blockToPatchFileName; }
+  std::string getBlockToPatchFileName() { return m_blockToPatchFileName; }
+
+  Void setOccupancyMapFileName(std::string occupancyMapFileName) { m_occupancyFileName = occupancyMapFileName; }
+  std::string getOccupancyMapFileName() { return m_occupancyFileName; }
+
+  Void setUsePCCExt(Bool value) { m_usePCCExt = value; }
+  Bool getUsePCCExt()         const { return m_usePCCExt; }
+#endif
+
+#if PCC_RDO_EXT
+  Void setUsePCCRDOExt(Bool value) { m_usePCCRDOExt = value; }
+  Bool getUsePCCRDOExt()      const { return m_usePCCRDOExt; }
+#endif
+
+#if PCC_RDO_EXT && !PCC_ME_EXT
+  Void setOccupancyMapFileName(std::string occupancyMapFileName) { m_occupancyFileName = occupancyMapFileName; }
+  std::string getOccupancyMapFileName() { return m_occupancyFileName; }
+#endif
+
   Void setProfile(Profile::Name profile) { m_profile = profile; }
   Void setLevel(Level::Tier tier, Level::Name level) { m_levelTier = tier; m_level = level; }
 
@@ -1370,4 +1404,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(AFX_TENCCFG_H__6B99B797_F4DA_4E46_8E78_7656339A6C41__INCLUDED_)
+
diff --git a/source/Lib/TLibEncoder/TEncCu.cpp b/source/Lib/TLibEncoder/TEncCu.cpp
index efbfb38d..90ef0b2d 100644
--- a/source/Lib/TLibEncoder/TEncCu.cpp
+++ b/source/Lib/TLibEncoder/TEncCu.cpp
@@ -43,6 +43,7 @@
 
 #include <cmath>
 #include <algorithm>
+namespace pcc_hm {
 using namespace std;
 
 
@@ -75,6 +76,9 @@ Void TEncCu::create(UChar uhTotalDepth, UInt uiMaxWidth, UInt uiMaxHeight, Chrom
   m_ppcRecoYuvTemp = new TComYuv*[m_uhTotalDepth-1];
   m_ppcOrigYuv     = new TComYuv*[m_uhTotalDepth-1];
   m_ppcNoCorrYuv   = new TComYuv*[m_uhTotalDepth-1];
+#if PCC_RDO_EXT
+  m_ppcOccupancyYuv = new TComYuv*[m_uhTotalDepth - 1];
+#endif
 
   UInt uiNumPartitions;
   for( i=0 ; i<m_uhTotalDepth-1 ; i++)
@@ -96,6 +100,9 @@ Void TEncCu::create(UChar uhTotalDepth, UInt uiMaxWidth, UInt uiMaxHeight, Chrom
 
     m_ppcOrigYuv    [i] = new TComYuv; m_ppcOrigYuv    [i]->create(uiWidth, uiHeight, chromaFormat);
     m_ppcNoCorrYuv  [i] = new TComYuv; m_ppcNoCorrYuv  [i]->create(uiWidth, uiHeight, chromaFormat);
+#if PCC_RDO_EXT
+    m_ppcOccupancyYuv[i] = new TComYuv; m_ppcOccupancyYuv[i]->create(uiWidth, uiHeight, chromaFormat);
+#endif
   }
 
   m_bEncodeDQP                     = false;
@@ -158,6 +165,12 @@ Void TEncCu::destroy()
     {
       m_ppcNoCorrYuv[i]->destroy();   delete m_ppcNoCorrYuv[i];   m_ppcNoCorrYuv[i] = NULL;
     }
+#if PCC_RDO_EXT
+    if (m_ppcOccupancyYuv[i])
+    {
+      m_ppcOccupancyYuv[i]->destroy(); delete m_ppcOccupancyYuv[i]; m_ppcOccupancyYuv[i] = NULL;
+    }
+#endif
   }
   if(m_ppcBestCU)
   {
@@ -210,6 +223,13 @@ Void TEncCu::destroy()
     delete [] m_ppcNoCorrYuv;
     m_ppcNoCorrYuv = NULL;
   }
+#if PCC_RDO_EXT
+  if (m_ppcOccupancyYuv)
+  {
+    delete[] m_ppcOccupancyYuv;
+    m_ppcOccupancyYuv = NULL;
+  }
+#endif
 }
 
 /** \param    pcEncTop      pointer of encoder class
@@ -499,6 +519,9 @@ Void TEncCu::xCompressCU( TComDataCU*& rpcBestCU, TComDataCU*& rpcTempCU, const
 
   // get Original YUV data from picture
   m_ppcOrigYuv[uiDepth]->copyFromPicYuv( pcPic->getPicYuvOrg(), rpcBestCU->getCtuRsAddr(), rpcBestCU->getZorderIdxInCtu() );
+#if PCC_RDO_EXT
+  m_ppcOccupancyYuv[uiDepth]->copyFromPicYuv(pcPic->getOccupancyMapYuv(), rpcBestCU->getCtuRsAddr(), rpcBestCU->getZorderIdxInCtu());
+#endif
 
   // variable for Cbf fast mode PU decision
   Bool    doNotBlockPu = true;
@@ -1895,7 +1918,11 @@ Void TEncCu::xCheckRDCostMerge2Nx2N( TComDataCU*& rpcBestCU, TComDataCU*& rpcTem
                                                          (uiNoResidual != 0),
                                                          m_ppcNoCorrYuv  [uhDepth],
                                                          (bColourTrans? ACT_TRAN_CLR: ACT_ORG_CLR)
-                                                         DEBUG_STRING_PASS_INTO(tmpStr) );
+                                                         DEBUG_STRING_PASS_INTO(tmpStr)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                        );
             }
             else
             {
@@ -1908,7 +1935,11 @@ Void TEncCu::xCheckRDCostMerge2Nx2N( TComDataCU*& rpcBestCU, TComDataCU*& rpcTem
                                                          (uiNoResidual != 0),
                                                          m_ppcNoCorrYuv  [uhDepth],
                                                          ACT_TWO_CLR
-                                                         DEBUG_STRING_PASS_INTO(tmpStr) );
+                                                         DEBUG_STRING_PASS_INTO(tmpStr)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                        );
             }
           }
           else
@@ -1922,7 +1953,12 @@ Void TEncCu::xCheckRDCostMerge2Nx2N( TComDataCU*& rpcBestCU, TComDataCU*& rpcTem
                                                        (uiNoResidual != 0),
                                                        m_ppcNoCorrYuv  [uhDepth],
                                                        ACT_ORG_CLR
+#if PCC_RDO_EXT
+                                                       DEBUG_STRING_PASS_INTO(tmpStr),
+                                                       m_ppcOccupancyYuv[uhDepth]);
+#else
                                                        DEBUG_STRING_PASS_INTO(tmpStr) );
+#endif
           }
           rpcTempCU->setSkipFlagSubParts( rpcTempCU->getQtRootCbf(0) == 0, 0, uhDepth );
 
@@ -1981,7 +2017,11 @@ Void TEncCu::xCheckRDCostMerge2Nx2N( TComDataCU*& rpcBestCU, TComDataCU*& rpcTem
                                                        (uiNoResidual != 0),
                                                        m_ppcNoCorrYuv  [uhDepth],
                                                        (bColourTrans? ACT_TRAN_CLR: ACT_ORG_CLR)
-                                                       DEBUG_STRING_PASS_INTO(tmpStr) );
+                                                       DEBUG_STRING_PASS_INTO(tmpStr)
+#if PCC_RDO_EXT
+                                                     , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                      );
             rpcTempCU->setSkipFlagSubParts( rpcTempCU->getQtRootCbf(0) == 0, 0, uhDepth );
             Double rdCost = rpcTempCU->getTotalCost();
             if(rdCost < m_ppcBestCU[uhDepth]->getTmpInterRDCost() )
@@ -2119,16 +2159,28 @@ Void TEncCu::xCheckRDCostInter( TComDataCU*& rpcBestCU, TComDataCU*& rpcTempCU,
       {
         if ( !getEnableInterTUACT() )
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], (colourTransform? ACT_TRAN_CLR: ACT_ORG_CLR) DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], (colourTransform? ACT_TRAN_CLR: ACT_ORG_CLR) DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                    );
         }
         else
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_TWO_CLR DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_TWO_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                    );
         }
       }
       else
       {
-        m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+#if PCC_RDO_EXT
+        m_pcPredSearch->encodeResAndCalcRdInterCU(rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest), m_ppcOccupancyYuv[uhDepth]);
+#else
+        m_pcPredSearch->encodeResAndCalcRdInterCU(rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest));
+#endif
       }
     }
     else
@@ -2137,22 +2189,38 @@ Void TEncCu::xCheckRDCostInter( TComDataCU*& rpcBestCU, TComDataCU*& rpcTempCU,
       {
         if ( !getEnableInterTUACT() )
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                    );
         }
         else
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                    );
         }
       }
       else
       {
         if ( !getEnableInterTUACT() )
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                    );
         }
         else
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[uhDepth], pcTmpPredYuv, m_ppcResiYuvTemp[uhDepth], m_ppcResiYuvBest[uhDepth], m_ppcRecoYuvTemp[uhDepth], false, m_ppcNoCorrYuv[uhDepth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[uhDepth]
+#endif
+                                                    );
         }
       }
     }
@@ -2253,11 +2321,19 @@ Void TEncCu::xCheckRDCostIntra( TComDataCU *&rpcBestCU,
 
   if( bRGBIntraModeReuse )
   {
-    m_pcPredSearch->estIntraPredLumaQTWithModeReuse( rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma );
+    m_pcPredSearch->estIntraPredLumaQTWithModeReuse( rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma
+#if PCC_RDO_EXT
+                                                    , m_ppcOccupancyYuv[uiDepth]
+#endif
+                                                    );
   }
   else
   {
-    m_pcPredSearch->estIntraPredLumaQT( rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma DEBUG_STRING_PASS_INTO(sTest) );
+#if PCC_RDO_EXT
+    m_pcPredSearch->estIntraPredLumaQT(rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcOccupancyYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma DEBUG_STRING_PASS_INTO(sTest));
+#else
+    m_pcPredSearch->estIntraPredLumaQT(rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma DEBUG_STRING_PASS_INTO(sTest));
+#endif
   }
 
   m_ppcRecoYuvTemp[uiDepth]->copyToPicComponent(COMPONENT_Y, rpcTempCU->getPic()->getPicYuvRec(), rpcTempCU->getCtuRsAddr(), rpcTempCU->getZorderIdxInCtu() );
@@ -2266,11 +2342,19 @@ Void TEncCu::xCheckRDCostIntra( TComDataCU *&rpcBestCU,
   {
     if( bRGBIntraModeReuse )
     {
-      m_pcPredSearch->estIntraPredChromaQTWithModeReuse( rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma );
+      m_pcPredSearch->estIntraPredChromaQTWithModeReuse( rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma
+#if PCC_RDO_EXT
+                                                        , m_ppcOccupancyYuv[uiDepth]
+#endif
+                                                        );
     }
     else
     {
-      m_pcPredSearch->estIntraPredChromaQT( rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma DEBUG_STRING_PASS_INTO(sTest) );
+#if PCC_RDO_EXT
+      m_pcPredSearch->estIntraPredChromaQT(rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcOccupancyYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma DEBUG_STRING_PASS_INTO(sTest));
+#else
+      m_pcPredSearch->estIntraPredChromaQT(rpcTempCU, m_ppcOrigYuv[uiDepth], m_ppcPredYuvTemp[uiDepth], m_ppcResiYuvTemp[uiDepth], m_ppcRecoYuvTemp[uiDepth], resiLuma DEBUG_STRING_PASS_INTO(sTest));
+#endif
     }
   }
 
@@ -2792,7 +2876,11 @@ Void TEncCu::xCheckRDCostIntraBCMerge2Nx2N( TComDataCU*& rpcBestCU, TComDataCU*&
                                                          (noResidual != 0),
                                                          m_ppcNoCorrYuv  [depth],
                                                          (bColourTrans? ACT_TRAN_CLR: ACT_ORG_CLR)
-                                                         DEBUG_STRING_PASS_INTO(tmpStr) );
+                                                         DEBUG_STRING_PASS_INTO(tmpStr)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                        );
             }
             else
             {
@@ -2805,11 +2893,28 @@ Void TEncCu::xCheckRDCostIntraBCMerge2Nx2N( TComDataCU*& rpcBestCU, TComDataCU*&
                                                          (noResidual != 0),
                                                          m_ppcNoCorrYuv  [depth],
                                                          ACT_TWO_CLR
-                                                         DEBUG_STRING_PASS_INTO(tmpStr) );
+                                                         DEBUG_STRING_PASS_INTO(tmpStr)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                        );
             }
           }
           else
           {
+#if PCC_RDO_EXT
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU,
+                                                       m_ppcOrigYuv    [depth],
+                                                       pcTmpPredYuv           ,
+                                                       m_ppcResiYuvTemp[depth],
+                                                       m_ppcResiYuvBest[depth],
+                                                       m_ppcRecoYuvTemp[depth],
+                                                       (noResidual != 0),
+                                                       m_ppcNoCorrYuv  [depth],
+                                                       ACT_ORG_CLR
+                                                       DEBUG_STRING_PASS_INTO(tmpStr),
+                                                       m_ppcOccupancyYuv[depth]);
+#else
             m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU,
                                                        m_ppcOrigYuv    [depth],
                                                        pcTmpPredYuv           ,
@@ -2820,6 +2925,7 @@ Void TEncCu::xCheckRDCostIntraBCMerge2Nx2N( TComDataCU*& rpcBestCU, TComDataCU*&
                                                        m_ppcNoCorrYuv  [depth],
                                                        ACT_ORG_CLR
                                                        DEBUG_STRING_PASS_INTO(tmpStr) );
+#endif
           }
 
           if ((noResidual == 0) && (rpcTempCU->getQtRootCbf(0) == 0))
@@ -2858,7 +2964,11 @@ Void TEncCu::xCheckRDCostIntraBCMerge2Nx2N( TComDataCU*& rpcBestCU, TComDataCU*&
                                                        (noResidual != 0),
                                                        m_ppcNoCorrYuv  [depth],
                                                        (bColourTrans? ACT_TRAN_CLR: ACT_ORG_CLR)
-                                                       DEBUG_STRING_PASS_INTO(tmpStr) );
+                                                       DEBUG_STRING_PASS_INTO(tmpStr)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
             rpcTempCU->setSkipFlagSubParts( rpcTempCU->getQtRootCbf(0) == 0, 0, depth );
             //Double rdCost = rpcTempCU->getTotalCost();
 
@@ -2897,7 +3007,11 @@ Void TEncCu::xCheckRDCostIntraCSC( TComDataCU     *&rpcBestCU,
   rpcTempCU->setPredModeSubParts( MODE_INTRA, 0, depth );
   rpcTempCU->setChromaQpAdjSubParts( rpcTempCU->getCUTransquantBypass(0) ? 0 : m_cuChromaQpOffsetIdxPlus1, 0, depth );
 
-  m_pcPredSearch->estIntraPredQTCT( rpcTempCU, m_ppcOrigYuv[depth], m_ppcPredYuvTemp[depth], m_ppcResiYuvTemp[depth], m_ppcRecoYuvTemp[depth], eACTRDTestType, bReuseIntraMode DEBUG_STRING_PASS_INTO(sTest) );
+  m_pcPredSearch->estIntraPredQTCT( rpcTempCU, m_ppcOrigYuv[depth], m_ppcPredYuvTemp[depth], m_ppcResiYuvTemp[depth], m_ppcRecoYuvTemp[depth], eACTRDTestType, bReuseIntraMode DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                              , m_ppcOccupancyYuv[depth]
+#endif
+                                   );
 
   m_pcRDGoOnSbacCoder->load(m_pppcRDSbacCoder[depth][CI_CURR_BEST]);
   m_pcEntropyCoder->resetBits();
@@ -3031,16 +3145,28 @@ Void TEncCu::xCheckRDCostIntraBC( TComDataCU *&rpcBestCU,
         {
           if ( !getEnableIBCTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], (colourTransform? ACT_TRAN_CLR: ACT_ORG_CLR) DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], (colourTransform? ACT_TRAN_CLR: ACT_ORG_CLR) DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                      , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TWO_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TWO_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                      , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
         }
         else
         {
+#if PCC_RDO_EXT
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest), m_ppcOccupancyYuv[depth] );
+#else
           m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+#endif
         }
       }
       else
@@ -3049,22 +3175,38 @@ Void TEncCu::xCheckRDCostIntraBC( TComDataCU *&rpcBestCU,
         {
           if ( !getEnableIBCTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
         }
         else
         {
           if ( !getEnableIBCTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
         }
       }
@@ -3204,16 +3346,28 @@ Void TEncCu::xCheckRDCostIntraBCMixed( TComDataCU *&rpcBestCU,
         {
           if ( !getEnableInterTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], (colourTransform? ACT_TRAN_CLR: ACT_ORG_CLR) DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], (colourTransform? ACT_TRAN_CLR: ACT_ORG_CLR) DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TWO_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TWO_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
         }
         else
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+              , m_ppcOccupancyYuv[depth]
+#endif
+              );
         }
       }
       else
@@ -3222,22 +3376,38 @@ Void TEncCu::xCheckRDCostIntraBCMixed( TComDataCU *&rpcBestCU,
         {
           if ( !getEnableInterTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
         }
         else
         {
           if ( !getEnableInterTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
         }
       }
@@ -3345,16 +3515,28 @@ Void TEncCu::xCheckRDCostHashInter( TComDataCU*& rpcBestCU, TComDataCU*& rpcTemp
         {
           if ( !getEnableInterTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], (colourTransform? ACT_TRAN_CLR: ACT_ORG_CLR) DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], (colourTransform? ACT_TRAN_CLR: ACT_ORG_CLR) DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TWO_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TWO_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
         }
         else
         {
-          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+          m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                    );
         }
       }
       else
@@ -3363,22 +3545,38 @@ Void TEncCu::xCheckRDCostHashInter( TComDataCU*& rpcBestCU, TComDataCU*& rpcTemp
         {
           if ( !getEnableInterTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
         }
         else
         {
           if ( !getEnableInterTUACT() )
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_TRAN_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
           else
           {
-            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest) );
+            m_pcPredSearch->encodeResAndCalcRdInterCU( rpcTempCU, m_ppcOrigYuv[depth], pcTmpPredYuv, m_ppcResiYuvTemp[depth], m_ppcResiYuvBest[depth], m_ppcRecoYuvTemp[depth], false, m_ppcNoCorrYuv[depth], ACT_ORG_CLR DEBUG_STRING_PASS_INTO(sTest)
+#if PCC_RDO_EXT
+                                                       , m_ppcOccupancyYuv[depth]
+#endif
+                                                      );
           }
         }
       }
@@ -3452,8 +3650,13 @@ UInt TEncCu::xCheckPaletteMode(TComDataCU *&rpcBestCU, TComDataCU *&rpcTempCU, B
   rpcTempCU->setPaletteModeFlagSubParts(true, 0, rpcTempCU->getDepth(0));
   rpcTempCU->setChromaQpAdjSubParts( rpcTempCU->getCUTransquantBypass(0) ? 0 : m_cuChromaQpOffsetIdxPlus1, 0, depth );
 
+#if PCC_RDO_EXT
+  UInt testedModes=m_pcPredSearch->paletteSearch(rpcTempCU, m_ppcOrigYuv[depth], m_ppcPredYuvTemp[depth], m_ppcResiYuvTemp[depth],
+                                                 m_ppcRecoYuvTemp[depth], forcePalettePrediction, iterNumber, paletteSize, m_ppcOccupancyYuv[depth]);
+#else
   UInt testedModes=m_pcPredSearch->paletteSearch(rpcTempCU, m_ppcOrigYuv[depth], m_ppcPredYuvTemp[depth], m_ppcResiYuvTemp[depth],
                                                  m_ppcRecoYuvTemp[depth], forcePalettePrediction, iterNumber, paletteSize);
+#endif
 
   xCheckDQP( rpcTempCU );
   DEBUG_STRING_NEW(a)
@@ -3464,3 +3667,6 @@ UInt TEncCu::xCheckPaletteMode(TComDataCU *&rpcBestCU, TComDataCU *&rpcTempCU, B
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/TEncCu.h b/source/Lib/TLibEncoder/TEncCu.h
index a23d828a..caa019e9 100644
--- a/source/Lib/TLibEncoder/TEncCu.h
+++ b/source/Lib/TLibEncoder/TEncCu.h
@@ -49,6 +49,7 @@
 #include "TEncEntropy.h"
 #include "TEncSearch.h"
 #include "TEncRateCtrl.h"
+namespace pcc_hm {
 //! \ingroup TLibEncoder
 //! \{
 
@@ -79,6 +80,10 @@ private:
   TComYuv**               m_ppcOrigYuv;     ///< Original Yuv for each depth
   TComYuv**               m_ppcNoCorrYuv;
 
+#if PCC_RDO_EXT
+  TComYuv**               m_ppcOccupancyYuv;
+#endif
+
   //  Data : encoder control
   Bool                    m_bEncodeDQP;
   Bool                    m_bFastDeltaQP;
@@ -230,4 +235,6 @@ protected:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TENCMB__
+
diff --git a/source/Lib/TLibEncoder/TEncEntropy.cpp b/source/Lib/TLibEncoder/TEncEntropy.cpp
index e03bc447..2fc37208 100644
--- a/source/Lib/TLibEncoder/TEncEntropy.cpp
+++ b/source/Lib/TLibEncoder/TEncEntropy.cpp
@@ -40,6 +40,8 @@
 #include "TLibCommon/TComSampleAdaptiveOffset.h"
 #include "TLibCommon/TComTU.h"
 
+namespace pcc_hm {
+  
 #if ENVIRONMENT_VARIABLE_DEBUG_AND_TEST
 #include "../TLibCommon/Debug.h"
 static const Bool bDebugPredEnabled = DebugOptionList::DebugPred.getInt()!=0;
@@ -734,3 +736,6 @@ Int TEncEntropy::countNonZeroCoeffs( TCoeff* pcCoef, UInt uiSize )
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/TEncEntropy.h b/source/Lib/TLibEncoder/TEncEntropy.h
index 3ddc83b7..0ee29e28 100644
--- a/source/Lib/TLibEncoder/TEncEntropy.h
+++ b/source/Lib/TLibEncoder/TEncEntropy.h
@@ -46,6 +46,7 @@
 #include "TLibCommon/TComTrQuant.h"
 #include "TLibCommon/TComSampleAdaptiveOffset.h"
 #include "TLibCommon/TComChromaFormat.h"
+namespace pcc_hm {
 
 class TEncSbac;
 class TEncCavlc;
@@ -187,5 +188,7 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TENCENTROPY__
 
+
diff --git a/source/Lib/TLibEncoder/TEncGOP.cpp b/source/Lib/TLibEncoder/TEncGOP.cpp
index 5b7e8877..99fdb202 100644
--- a/source/Lib/TLibEncoder/TEncGOP.cpp
+++ b/source/Lib/TLibEncoder/TEncGOP.cpp
@@ -51,6 +51,7 @@
 #include <math.h>
 
 #include <deque>
+namespace pcc_hm {
 using namespace std;
 
 //! \ingroup TLibEncoder
@@ -1197,7 +1198,19 @@ printHash(const HashType hashType, const std::string &digestStr)
 // ====================================================================================================================
 Void TEncGOP::compressGOP( Int iPOCLast, Int iNumPicRcvd, TComList<TComPic*>& rcListPic,
                            TComList<TComPicYuv*>& rcListPicYuvRecOut, std::list<AccessUnit>& accessUnitsInGOP,
+#if PCC_ME_EXT
+#if PCC_RDO_EXT
+                           Bool isField, Bool isTff, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl, Bool usePccME, Bool usePCCRDO)
+#else
+                           Bool isField, Bool isTff, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl, Bool usePccME)
+#endif
+#else
+#if PCC_RDO_EXT
+                           Bool isField, Bool isTff, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl, Bool usePCCRDO )
+#else
                            Bool isField, Bool isTff, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl )
+#endif
+#endif
 {
   // TODO: Split this function up.
 
@@ -1757,6 +1770,139 @@ Void TEncGOP::compressGOP( Int iPOCLast, Int iNumPicRcvd, TComList<TComPic*>& rc
       for(UInt nextCtuTsAddr = 0; nextCtuTsAddr < numberOfCtusInFrame; )
       {
         m_pcSliceEncoder->precompressSlice( pcPic );
+#if PCC_ME_EXT
+		if (pcSlice->getPOC() % PCC_ME_NUM_LAYERS_ACTIVE == 0 && usePccME)
+		{
+			//printf("\nPCC ME ACTIVE\n");
+			Int picWidth = pcPic->getPicYuvRec()->getWidth(COMPONENT_Y);
+			Int picHeight = pcPic->getPicYuvRec()->getHeight(COMPONENT_Y);
+
+			Int blockToPatchWidth = picWidth / 16;
+			Int blockToPatchHeight = picHeight / 16;
+
+			Int currPOC = pcSlice->getPOC() / PCC_ME_NUM_LAYERS_ACTIVE;
+			long long offset = (long long)currPOC * blockToPatchWidth * blockToPatchHeight;
+
+			std::string blockToPatchFileName = m_pcEncTop->getBlockToPatchFileName();
+			FILE* blockToPatchFile = NULL;
+			blockToPatchFile = fopen(blockToPatchFileName.c_str(), "rb");
+			fseek(blockToPatchFile, offset * sizeof(long long), SEEK_SET);
+			long long* blockToPatch = pcPic->getBlockToPatch();
+			size_t readSize = fread(blockToPatch, sizeof(long long), blockToPatchWidth * blockToPatchHeight, blockToPatchFile);
+			if (readSize != blockToPatchWidth * blockToPatchHeight)
+			{
+				printf("error: Resolution does not match");
+			}
+			fclose(blockToPatchFile);
+
+			offset = (long long)currPOC * picWidth * picHeight;
+			std::string occupancyMapFileName = m_pcEncTop->getOccupancyMapFileName();
+			FILE* occupancyMapFile = NULL;
+			occupancyMapFile = fopen(occupancyMapFileName.c_str(), "rb");
+			fseek(occupancyMapFile, offset * sizeof(Int), SEEK_SET);
+			Int* occupancyMap = pcPic->getOccupancyMap();
+			readSize = fread(occupancyMap, sizeof(Int), picWidth * picHeight, occupancyMapFile);
+			if (readSize != picWidth * picHeight)
+			{
+				printf("error: Resolution does not match");
+			}
+			fclose(occupancyMapFile);
+		}
+		if (usePccME)
+		{
+			for (Int i = 0; i < PCC_ME_EXT_MAX_NUM_PATCHES; i++)
+			{
+				g_patchesChange[i] = true;
+			}
+		}
+#endif
+
+#if PCC_RDO_EXT
+    if (usePCCRDO)
+    {
+      Int picWidth = pcPic->getPicYuvRec()->getWidth(COMPONENT_Y);
+      Int picHeight = pcPic->getPicYuvRec()->getHeight(COMPONENT_Y);
+      Int currPOC = pcSlice->getPOC() / 2;           // One occupancy map for every two frames
+      long long offset = (long long)currPOC * picWidth * picHeight;
+      std::string occupancyMapFileName = m_pcEncTop->getOccupancyMapFileName();
+      FILE* occupancyMapFile = NULL;
+      occupancyMapFile = fopen(occupancyMapFileName.c_str(), "rb");
+      fseek(occupancyMapFile, offset * sizeof(Int), SEEK_SET);
+      Int* tempOccupancyMap = new Int[picWidth * picHeight];
+      size_t readSize = fread(tempOccupancyMap, sizeof(Int), picWidth * picHeight, occupancyMapFile);
+      if (readSize != picWidth * picHeight)
+      {
+        printf("error: Resolution does not match");
+      }
+      fclose(occupancyMapFile);
+
+      TComPicYuv* occupancyMap = pcPic->getOccupancyMapYuv();
+      Pel* lumaAddr = occupancyMap->getAddr(COMPONENT_Y);
+      Int lumaStride = occupancyMap->getStride(COMPONENT_Y);
+
+      // Luma
+      for (Int i = 0; i < picHeight; i++)
+      {
+        for (Int j = 0; j < picWidth; j++)
+        {
+          lumaAddr[i * lumaStride + j] = tempOccupancyMap[i * picWidth + j];
+        }
+      }
+
+      Pel* cbAddr = occupancyMap->getAddr(COMPONENT_Cb);
+      Pel* crAddr = occupancyMap->getAddr(COMPONENT_Cr);
+      Int chromaStride = occupancyMap->getStride(COMPONENT_Cb);
+      Int chromaHeight = occupancyMap->getHeight(COMPONENT_Cb);
+      Int chromaWidth = occupancyMap->getWidth(COMPONENT_Cb);
+
+      // chroma
+      for (Int i = 0; i < chromaHeight; i++)
+      {
+        for (Int j = 0; j < chromaWidth; j++)
+        {
+          cbAddr[i * chromaStride + j] = tempOccupancyMap[i * 2 * picWidth + j * 2];
+          crAddr[i * chromaStride + j] = tempOccupancyMap[i * 2 * picWidth + j * 2];
+        }
+      }
+      delete tempOccupancyMap;
+      tempOccupancyMap = NULL;
+    }
+    else
+    {
+      Int picWidth = pcPic->getPicYuvRec()->getWidth(COMPONENT_Y);
+      Int picHeight = pcPic->getPicYuvRec()->getHeight(COMPONENT_Y);
+
+      TComPicYuv* occupancyMap = pcPic->getOccupancyMapYuv();
+      Pel* lumaAddr = occupancyMap->getAddr(COMPONENT_Y);
+      Int lumaStride = occupancyMap->getStride(COMPONENT_Y);
+
+      // Luma
+      for (Int i = 0; i < picHeight; i++)
+      {
+        for (Int j = 0; j < picWidth; j++)
+        {
+          lumaAddr[i * lumaStride + j] = 1;
+        }
+      }
+
+      Pel* cbAddr = occupancyMap->getAddr(COMPONENT_Cb);
+      Pel* crAddr = occupancyMap->getAddr(COMPONENT_Cr);
+      Int chromaStride = occupancyMap->getStride(COMPONENT_Cb);
+      Int chromaHeight = occupancyMap->getHeight(COMPONENT_Cb);
+      Int chromaWidth = occupancyMap->getWidth(COMPONENT_Cb);
+
+      // chroma
+      for (Int i = 0; i < chromaHeight; i++)
+      {
+        for (Int j = 0; j < chromaWidth; j++)
+        {
+          cbAddr[i * chromaStride + j] = 1;
+          crAddr[i * chromaStride + j] = 1;
+        }
+      }
+    }
+#endif
+
         m_pcSliceEncoder->compressSlice   ( pcPic, false, false );
 
         const UInt curSliceSegmentEnd = pcSlice->getSliceSegmentCurEndCtuTsAddr();
@@ -3741,3 +3887,6 @@ TComSPS* TEncGOP::getSPS(Int id)
   return m_pcEncTop->getSPS(id);
 }
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/TEncGOP.h b/source/Lib/TLibEncoder/TEncGOP.h
index ee7cc186..430ce9d9 100644
--- a/source/Lib/TLibEncoder/TEncGOP.h
+++ b/source/Lib/TLibEncoder/TEncGOP.h
@@ -61,6 +61,7 @@
 #include "TEncAnalyze.h"
 #include "TEncRateCtrl.h"
 #include <vector>
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -168,7 +169,19 @@ public:
 
   Void  init        ( TEncTop* pcTEncTop );
   Void  compressGOP ( Int iPOCLast, Int iNumPicRcvd, TComList<TComPic*>& rcListPic, TComList<TComPicYuv*>& rcListPicYuvRec,
-                     std::list<AccessUnit>& accessUnitsInGOP, Bool isField, Bool isTff, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl );
+#if PCC_ME_EXT
+#if PCC_RDO_EXT
+    std::list<AccessUnit>& accessUnitsInGOP, Bool isField, Bool isTff, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl, Bool m_usePCCExt, Bool usePCCRDOExt);
+#else
+    std::list<AccessUnit>& accessUnitsInGOP, Bool isField, Bool isTff, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl, Bool m_usePCCExt);
+#endif
+#else
+#if PCC_RDO_EXT
+    std::list<AccessUnit>& accessUnitsInGOP, Bool isField, Bool isTff, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl, Bool usePCCRDOExt );
+#else
+    std::list<AccessUnit>& accessUnitsInGOP, Bool isField, Bool isTff, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl );
+#endif
+#endif
   Void  xAttachSliceDataToNalUnit (OutputNALUnit& rNalu, TComOutputBitstream* pcBitstreamRedirect);
 
 
@@ -257,5 +270,7 @@ protected:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TENCGOP__
 
+
diff --git a/source/Lib/TLibEncoder/TEncPic.cpp b/source/Lib/TLibEncoder/TEncPic.cpp
index 83ce0e02..3bf11036 100644
--- a/source/Lib/TLibEncoder/TEncPic.cpp
+++ b/source/Lib/TLibEncoder/TEncPic.cpp
@@ -36,6 +36,7 @@
 */
 
 #include "TEncPic.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -157,3 +158,6 @@ Void TEncPic::destroy()
 }
 //! \}
 
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/TEncPic.h b/source/Lib/TLibEncoder/TEncPic.h
index 78291144..44cd30fc 100644
--- a/source/Lib/TLibEncoder/TEncPic.h
+++ b/source/Lib/TLibEncoder/TEncPic.h
@@ -40,6 +40,7 @@
 
 #include "TLibCommon/CommonDef.h"
 #include "TLibCommon/TComPic.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -115,4 +116,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TENCPIC__
+
diff --git a/source/Lib/TLibEncoder/TEncPreanalyzer.cpp b/source/Lib/TLibEncoder/TEncPreanalyzer.cpp
index 043ccc6a..62537df0 100644
--- a/source/Lib/TLibEncoder/TEncPreanalyzer.cpp
+++ b/source/Lib/TLibEncoder/TEncPreanalyzer.cpp
@@ -39,6 +39,7 @@
 #include <algorithm>
 
 #include "TEncPreanalyzer.h"
+namespace pcc_hm {
 
 using namespace std;
 
@@ -151,3 +152,6 @@ Void TEncPreanalyzer::xPreanalyze( TEncPic* pcEPic )
 }
 //! \}
 
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/TEncPreanalyzer.h b/source/Lib/TLibEncoder/TEncPreanalyzer.h
index 0663beec..62e84304 100644
--- a/source/Lib/TLibEncoder/TEncPreanalyzer.h
+++ b/source/Lib/TLibEncoder/TEncPreanalyzer.h
@@ -39,6 +39,7 @@
 #define __TENCPREANALYZER__
 
 #include "TEncPic.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -59,4 +60,6 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TENCPREANALYZER__
+
diff --git a/source/Lib/TLibEncoder/TEncRateCtrl.cpp b/source/Lib/TLibEncoder/TEncRateCtrl.cpp
index 40686d77..60456fa2 100644
--- a/source/Lib/TLibEncoder/TEncRateCtrl.cpp
+++ b/source/Lib/TLibEncoder/TEncRateCtrl.cpp
@@ -39,6 +39,7 @@
 #include "../TLibCommon/TComChromaFormat.h"
 
 #include <cmath>
+namespace pcc_hm {
 
 using namespace std;
 
@@ -1471,3 +1472,6 @@ Void TEncRateCtrl::destroyRCGOP()
   delete m_encRCGOP;
   m_encRCGOP = NULL;
 }
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/TEncRateCtrl.h b/source/Lib/TLibEncoder/TEncRateCtrl.h
index 94ccce05..4fd18fd1 100644
--- a/source/Lib/TLibEncoder/TEncRateCtrl.h
+++ b/source/Lib/TLibEncoder/TEncRateCtrl.h
@@ -57,6 +57,7 @@ using namespace std;
 #include "../TLibEncoder/TEncCfg.h"
 #include <list>
 #include <cassert>
+namespace pcc_hm {
 
 const Int g_RCInvalidQPValue = -999;
 const Int g_RCSmoothWindowSize = 40;
@@ -344,6 +345,8 @@ private:
   UInt       m_bufferingRate;           // Buffering rate
 };
 
+} // namespace pcc_hm
 #endif
 
 
+
diff --git a/source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.cpp b/source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.cpp
index 79a12496..e985358a 100644
--- a/source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.cpp
+++ b/source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.cpp
@@ -40,6 +40,7 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <math.h>
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -253,9 +254,15 @@ Void TEncSampleAdaptiveOffset::SAOProcess(TComPic* pPic, Bool* sliceEnabled, con
   resYuv->copyToPic(srcYuv);
   srcYuv->setBorderExtension(false);
   srcYuv->extendPicBorder();
-
+#if PCC_RDO_EXT
+  TComPicYuv* occupancyYuv = pPic->getOccupancyMapYuv();
+#endif
   //collect statistics
+#if PCC_RDO_EXT
+  getStatistics(m_statData, orgYuv, occupancyYuv, srcYuv, pPic);
+#else
   getStatistics(m_statData, orgYuv, srcYuv, pPic);
+#endif
   if(isPreDBFSamplesUsed)
   {
     addPreDBFStatistics(m_statData);
@@ -275,7 +282,11 @@ Void TEncSampleAdaptiveOffset::SAOProcess(TComPic* pPic, Bool* sliceEnabled, con
 
 Void TEncSampleAdaptiveOffset::getPreDBFStatistics(TComPic* pPic)
 {
+#if PCC_RDO_EXT
+  getStatistics(m_preDBFstatData, pPic->getPicYuvOrg(), pPic->getOccupancyMapYuv(), pPic->getPicYuvRec(), pPic, true);
+#else
   getStatistics(m_preDBFstatData, pPic->getPicYuvOrg(), pPic->getPicYuvRec(), pPic, true);
+#endif
 }
 
 Void TEncSampleAdaptiveOffset::addPreDBFStatistics(SAOStatData*** blkStats)
@@ -292,7 +303,11 @@ Void TEncSampleAdaptiveOffset::addPreDBFStatistics(SAOStatData*** blkStats)
   }
 }
 
+#if PCC_RDO_EXT
+Void TEncSampleAdaptiveOffset::getStatistics(SAOStatData*** blkStats, TComPicYuv* orgYuv, TComPicYuv* occupancyYuv, TComPicYuv* srcYuv, TComPic* pPic, Bool isCalculatePreDeblockSamples)
+#else
 Void TEncSampleAdaptiveOffset::getStatistics(SAOStatData*** blkStats, TComPicYuv* orgYuv, TComPicYuv* srcYuv, TComPic* pPic, Bool isCalculatePreDeblockSamples)
+#endif
 {
   Bool isLeftAvail,isRightAvail,isAboveAvail,isBelowAvail,isAboveLeftAvail,isAboveRightAvail,isBelowLeftAvail,isBelowRightAvail;
 
@@ -329,8 +344,17 @@ Void TEncSampleAdaptiveOffset::getStatistics(SAOStatData*** blkStats, TComPicYuv
       Int  orgStride  = orgYuv->getStride(component);
       Pel* orgBlk     = orgYuv->getAddr(component) + ((yPos >> componentScaleY) * orgStride) + (xPos >> componentScaleX);
 
+#if PCC_RDO_EXT
+      Int  occupancyStride = occupancyYuv->getStride(component);
+      Pel* occupancyBlk = occupancyYuv->getAddr(component) + ((yPos >> componentScaleY) * orgStride) + (xPos >> componentScaleX);
+#endif
+
       getBlkStats(component, pPic->getPicSym()->getSPS().getBitDepth(toChannelType(component)), blkStats[ctuRsAddr][component]
-                , srcBlk, orgBlk, srcStride, orgStride, (width  >> componentScaleX), (height >> componentScaleY)
+#if PCC_RDO_EXT
+                , srcBlk, orgBlk, occupancyBlk, srcStride, orgStride, occupancyStride, (width >> componentScaleX), (height >> componentScaleY)
+#else
+                , srcBlk, orgBlk, srcStride, orgStride, (width >> componentScaleX), (height >> componentScaleY)
+#endif
                 , isLeftAvail,  isRightAvail, isAboveAvail, isBelowAvail, isAboveLeftAvail, isAboveRightAvail
                 , isCalculatePreDeblockSamples
                 );
@@ -941,7 +965,11 @@ Void TEncSampleAdaptiveOffset::decideBlkParams(TComPic* pic, Bool* sliceEnabled,
 
 
 Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int channelBitDepth, SAOStatData* statsDataTypes
+#if PCC_RDO_EXT
+                        , Pel* srcBlk, Pel* orgBlk, Pel* occupancyBlk, Int srcStride, Int orgStride, Int occupancyStride, Int width, Int height
+#else
                         , Pel* srcBlk, Pel* orgBlk, Int srcStride, Int orgStride, Int width, Int height
+#endif
                         , Bool isLeftAvail,  Bool isRightAvail, Bool isAboveAvail, Bool isBelowAvail, Bool isAboveLeftAvail, Bool isAboveRightAvail
                         , Bool isCalculatePreDeblockSamples
                         )
@@ -972,6 +1000,10 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
   Int* skipLinesR = m_skipLinesR[compIdx];
   Int* skipLinesB = m_skipLinesB[compIdx];
 
+#if PCC_RDO_EXT
+  Pel *occupancyLine;
+#endif
+
   for(Int typeIdx=0; typeIdx< NUM_SAO_NEW_TYPES; typeIdx++)
   {
     SAOStatData& statsData= statsDataTypes[typeIdx];
@@ -979,6 +1011,9 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
 
     srcLine = srcBlk;
     orgLine = orgBlk;
+#if PCC_RDO_EXT
+    occupancyLine = occupancyBlk;
+#endif
     diff    = statsData.diff;
     count   = statsData.count;
     switch(typeIdx)
@@ -1002,12 +1037,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
             signRight =  (SChar)sgn(srcLine[x] - srcLine[x+1]);
             edgeType  =  signRight + signLeft;
             signLeft  = -signRight;
-
-            diff [edgeType] += (orgLine[x] - srcLine[x]);
+#if PCC_RDO_EXT
+            if (occupancyLine[x])
+            {
+              diff[edgeType] += (orgLine[x] - srcLine[x]);
+              count[edgeType] ++;
+            }
+#else
+            diff[edgeType] += (orgLine[x] - srcLine[x]);
             count[edgeType] ++;
+#endif
           }
           srcLine  += srcStride;
           orgLine  += orgStride;
+#if PCC_RDO_EXT
+          occupancyLine += occupancyStride;
+#endif
         }
         if(isCalculatePreDeblockSamples)
         {
@@ -1025,11 +1070,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
                 edgeType  =  signRight + signLeft;
                 signLeft  = -signRight;
 
-                diff [edgeType] += (orgLine[x] - srcLine[x]);
+#if PCC_RDO_EXT
+                if (occupancyLine[x])
+                {
+                  diff[edgeType] += (orgLine[x] - srcLine[x]);
+                  count[edgeType] ++;
+                }
+#else
+                diff[edgeType] += (orgLine[x] - srcLine[x]);
                 count[edgeType] ++;
+#endif
               }
               srcLine  += srcStride;
               orgLine  += orgStride;
+#if PCC_RDO_EXT
+              occupancyLine += occupancyStride;
+#endif
             }
           }
         }
@@ -1053,6 +1109,9 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
         {
           srcLine += srcStride;
           orgLine += orgStride;
+#if PCC_RDO_EXT
+          occupancyLine += occupancyStride;
+#endif
         }
 
         Pel* srcLineAbove = srcLine - srcStride;
@@ -1071,12 +1130,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
             signDown  = (SChar)sgn(srcLine[x] - srcLineBelow[x]);
             edgeType  = signDown + signUpLine[x];
             signUpLine[x]= -signDown;
-
-            diff [edgeType] += (orgLine[x] - srcLine[x]);
+#if PCC_RDO_EXT
+            if (occupancyLine[x])
+            {
+              diff[edgeType] += (orgLine[x] - srcLine[x]);
+              count[edgeType] ++;
+            }
+#else
+            diff[edgeType] += (orgLine[x] - srcLine[x]);
             count[edgeType] ++;
+#endif
           }
           srcLine += srcStride;
           orgLine += orgStride;
+#if PCC_RDO_EXT
+          occupancyLine += occupancyStride;
+#endif
         }
         if(isCalculatePreDeblockSamples)
         {
@@ -1093,11 +1162,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
               for (x=startX; x<endX; x++)
               {
                 edgeType = sgn(srcLine[x] - srcLineBelow[x]) + sgn(srcLine[x] - srcLineAbove[x]);
-                diff [edgeType] += (orgLine[x] - srcLine[x]);
+#if PCC_RDO_EXT
+                if (occupancyLine[x])
+                {
+                  diff[edgeType] += (orgLine[x] - srcLine[x]);
+                  count[edgeType] ++;
+                }
+#else
+                diff[edgeType] += (orgLine[x] - srcLine[x]);
                 count[edgeType] ++;
+#endif
               }
               srcLine  += srcStride;
               orgLine  += orgStride;
+#if PCC_RDO_EXT
+              occupancyLine += occupancyStride;
+#endif
             }
           }
         }
@@ -1136,12 +1216,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
         for(x=firstLineStartX; x<firstLineEndX; x++)
         {
           edgeType = sgn(srcLine[x] - srcLineAbove[x-1]) - signUpLine[x+1];
-          diff [edgeType] += (orgLine[x] - srcLine[x]);
+#if PCC_RDO_EXT
+          if (occupancyLine[x])
+          {
+            diff[edgeType] += (orgLine[x] - srcLine[x]);
+            count[edgeType] ++;
+          }
+#else
+          diff[edgeType] += (orgLine[x] - srcLine[x]);
           count[edgeType] ++;
+#endif
         }
         srcLine  += srcStride;
         orgLine  += orgStride;
-
+#if PCC_RDO_EXT
+        occupancyLine += occupancyStride;
+#endif
 
         //middle lines
         for (y=1; y<endY; y++)
@@ -1152,8 +1242,16 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
           {
             signDown = (SChar)sgn(srcLine[x] - srcLineBelow[x+1]);
             edgeType = signDown + signUpLine[x];
-            diff [edgeType] += (orgLine[x] - srcLine[x]);
+#if PCC_RDO_EXT
+            if (occupancyLine[x])
+            {
+              diff[edgeType] += (orgLine[x] - srcLine[x]);
+              count[edgeType] ++;
+            }
+#else
+            diff[edgeType] += (orgLine[x] - srcLine[x]);
             count[edgeType] ++;
+#endif
 
             signDownLine[x+1] = -signDown;
           }
@@ -1165,6 +1263,9 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
 
           srcLine += srcStride;
           orgLine += orgStride;
+#if PCC_RDO_EXT
+          occupancyLine += occupancyStride;
+#endif
         }
         if(isCalculatePreDeblockSamples)
         {
@@ -1181,11 +1282,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
               for (x=startX; x< endX; x++)
               {
                 edgeType = sgn(srcLine[x] - srcLineBelow[x+1]) + sgn(srcLine[x] - srcLineAbove[x-1]);
-                diff [edgeType] += (orgLine[x] - srcLine[x]);
+#if PCC_RDO_EXT
+                if (occupancyLine[x])
+                {
+                  diff[edgeType] += (orgLine[x] - srcLine[x]);
+                  count[edgeType] ++;
+                }
+#else
+                diff[edgeType] += (orgLine[x] - srcLine[x]);
                 count[edgeType] ++;
+#endif
               }
               srcLine  += srcStride;
               orgLine  += orgStride;
+#if PCC_RDO_EXT
+              occupancyLine += occupancyStride;
+#endif
             }
           }
         }
@@ -1224,12 +1336,23 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
         for(x=firstLineStartX; x<firstLineEndX; x++)
         {
           edgeType = sgn(srcLine[x] - srcLineAbove[x+1]) - signUpLine[x-1];
-          diff [edgeType] += (orgLine[x] - srcLine[x]);
+#if PCC_RDO_EXT
+          if (occupancyLine[x])
+          {
+            diff[edgeType] += (orgLine[x] - srcLine[x]);
+            count[edgeType] ++;
+          }
+#else
+          diff[edgeType] += (orgLine[x] - srcLine[x]);
           count[edgeType] ++;
+#endif
         }
 
         srcLine += srcStride;
         orgLine += orgStride;
+#if PCC_RDO_EXT
+        occupancyLine += occupancyStride;
+#endif
 
         //middle lines
         for (y=1; y<endY; y++)
@@ -1241,14 +1364,25 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
             signDown = (SChar)sgn(srcLine[x] - srcLineBelow[x-1]);
             edgeType = signDown + signUpLine[x];
 
-            diff [edgeType] += (orgLine[x] - srcLine[x]);
+#if PCC_RDO_EXT
+            if (occupancyLine[x])
+            {
+              diff[edgeType] += (orgLine[x] - srcLine[x]);
+              count[edgeType] ++;
+            }
+#else
+            diff[edgeType] += (orgLine[x] - srcLine[x]);
             count[edgeType] ++;
+#endif
 
             signUpLine[x-1] = -signDown;
           }
           signUpLine[endX-1] = (SChar)sgn(srcLineBelow[endX-1] - srcLine[endX]);
           srcLine  += srcStride;
           orgLine  += orgStride;
+#if PCC_RDO_EXT
+          occupancyLine += occupancyStride;
+#endif
         }
         if(isCalculatePreDeblockSamples)
         {
@@ -1265,11 +1399,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
               for (x=startX; x<endX; x++)
               {
                 edgeType = sgn(srcLine[x] - srcLineBelow[x-1]) + sgn(srcLine[x] - srcLineAbove[x+1]);
-                diff [edgeType] += (orgLine[x] - srcLine[x]);
+#if PCC_RDO_EXT
+                if (occupancyLine[x])
+                {
+                  diff[edgeType] += (orgLine[x] - srcLine[x]);
+                  count[edgeType] ++;
+                }
+#else
+                diff[edgeType] += (orgLine[x] - srcLine[x]);
                 count[edgeType] ++;
+#endif
               }
               srcLine  += srcStride;
               orgLine  += orgStride;
+#if PCC_RDO_EXT
+              occupancyLine += occupancyStride;
+#endif
             }
           }
         }
@@ -1291,11 +1436,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
           {
 
             Int bandIdx= srcLine[x] >> shiftBits;
-            diff [bandIdx] += (orgLine[x] - srcLine[x]);
+#if PCC_RDO_EXT
+            if (occupancyLine[x])
+            {
+              diff[bandIdx] += (orgLine[x] - srcLine[x]);
+              count[bandIdx] ++;
+            }
+#else
+            diff[bandIdx] += (orgLine[x] - srcLine[x]);
             count[bandIdx] ++;
+#endif
           }
           srcLine += srcStride;
           orgLine += orgStride;
+#if PCC_RDO_EXT
+          occupancyLine += occupancyStride;
+#endif
         }
         if(isCalculatePreDeblockSamples)
         {
@@ -1309,11 +1465,22 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
               for (x=startX; x< endX; x++)
               {
                 Int bandIdx= srcLine[x] >> shiftBits;
-                diff [bandIdx] += (orgLine[x] - srcLine[x]);
+#if PCC_RDO_EXT
+                if (occupancyLine[x])
+                {
+                  diff[bandIdx] += (orgLine[x] - srcLine[x]);
+                  count[bandIdx] ++;
+                }
+#else
+                diff[bandIdx] += (orgLine[x] - srcLine[x]);
                 count[bandIdx] ++;
+#endif
               }
               srcLine  += srcStride;
               orgLine  += orgStride;
+#if PCC_RDO_EXT
+              occupancyLine += occupancyStride;
+#endif
 
             }
 
@@ -1333,3 +1500,6 @@ Void TEncSampleAdaptiveOffset::getBlkStats(const ComponentID compIdx, const Int
 
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.h b/source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.h
index e5d433d6..fa15ab1c 100644
--- a/source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.h
+++ b/source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.h
@@ -45,6 +45,7 @@
 #include "TEncEntropy.h"
 #include "TEncSbac.h"
 #include "TLibCommon/TComBitCounter.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -111,14 +112,22 @@ public:
 public: //methods
   Void getPreDBFStatistics(TComPic* pPic);
 private: //methods
-  Void getStatistics(SAOStatData*** blkStats, TComPicYuv* orgYuv, TComPicYuv* srcYuv,TComPic* pPic, Bool isCalculatePreDeblockSamples = false);
+#if PCC_RDO_EXT
+  Void getStatistics(SAOStatData*** blkStats, TComPicYuv* orgYuv, TComPicYuv* occupancyYuv, TComPicYuv* srcYuv, TComPic* pPic, Bool isCalculatePreDeblockSamples = false);
+#else
+  Void getStatistics(SAOStatData*** blkStats, TComPicYuv* orgYuv, TComPicYuv* srcYuv, TComPic* pPic, Bool isCalculatePreDeblockSamples = false);
+#endif
 #if ADD_RESET_ENCODER_DECISIONS_AFTER_IRAP
   Void decidePicParams(Bool* sliceEnabled, const TComPic* pic, const Double saoEncodingRate, const Double saoEncodingRateChroma);
 #else
   Void decidePicParams(Bool* sliceEnabled, const TComPic* pic, const Double saoEncodingRate, const Double saoEncodingRateChroma, const Bool bResetStateAfterIRAP);
 #endif
   Void decideBlkParams(TComPic* pic, Bool* sliceEnabled, SAOStatData*** blkStats, TComPicYuv* srcYuv, TComPicYuv* resYuv, SAOBlkParam* reconParams, SAOBlkParam* codedParams, const Bool bTestSAODisableAtPictureLevel, const Double saoEncodingRate, const Double saoEncodingRateChroma);
-  Void getBlkStats(const ComponentID compIdx, const Int channelBitDepth, SAOStatData* statsDataTypes, Pel* srcBlk, Pel* orgBlk, Int srcStride, Int orgStride, Int width, Int height, Bool isLeftAvail,  Bool isRightAvail, Bool isAboveAvail, Bool isBelowAvail, Bool isAboveLeftAvail, Bool isAboveRightAvail, Bool isCalculatePreDeblockSamples);
+#if PCC_RDO_EXT
+  Void getBlkStats(const ComponentID compIdx, const Int channelBitDepth, SAOStatData* statsDataTypes, Pel* srcBlk, Pel* orgBlk, Pel* occupancyBlk, Int srcStride, Int orgStride, Int occupancyStride, Int width, Int height, Bool isLeftAvail, Bool isRightAvail, Bool isAboveAvail, Bool isBelowAvail, Bool isAboveLeftAvail, Bool isAboveRightAvail, Bool isCalculatePreDeblockSamples);
+#else
+  Void getBlkStats(const ComponentID compIdx, const Int channelBitDepth, SAOStatData* statsDataTypes, Pel* srcBlk, Pel* orgBlk, Int srcStride, Int orgStride, Int width, Int height, Bool isLeftAvail, Bool isRightAvail, Bool isAboveAvail, Bool isBelowAvail, Bool isAboveLeftAvail, Bool isAboveRightAvail, Bool isCalculatePreDeblockSamples);
+#endif
   Void deriveModeNewRDO(const BitDepths &bitDepths, Int ctuRsAddr, SAOBlkParam* mergeList[NUM_SAO_MERGE_TYPES], Bool* sliceEnabled, SAOStatData*** blkStats, SAOBlkParam& modeParam, Double& modeNormCost, TEncSbac** cabacCoderRDO, Int inCabacLabel);
   Void deriveModeMergeRDO(const BitDepths &bitDepths, Int ctuRsAddr, SAOBlkParam* mergeList[NUM_SAO_MERGE_TYPES], Bool* sliceEnabled, SAOStatData*** blkStats, SAOBlkParam& modeParam, Double& modeNormCost, TEncSbac** cabacCoderRDO, Int inCabacLabel);
   Int64 getDistortion(const Int channelBitDepth, Int typeIdc, Int typeAuxInfo, Int* offsetVal, SAOStatData& statData);
@@ -151,4 +160,6 @@ private: //members
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
diff --git a/source/Lib/TLibEncoder/TEncSbac.cpp b/source/Lib/TLibEncoder/TEncSbac.cpp
index 35c7cb35..ace030f7 100644
--- a/source/Lib/TLibEncoder/TEncSbac.cpp
+++ b/source/Lib/TLibEncoder/TEncSbac.cpp
@@ -45,6 +45,7 @@
 #if ENVIRONMENT_VARIABLE_DEBUG_AND_TEST
 #include "../TLibCommon/Debug.h"
 #endif
+namespace pcc_hm {
 
 
 //! \ingroup TLibEncoder
@@ -2608,3 +2609,6 @@ Void TEncSbac::xWriteTruncMsbP1RefinementBits ( UInt symbol, ContextModel* pcSCM
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/TEncSbac.h b/source/Lib/TLibEncoder/TEncSbac.h
index 40437d8d..5042bdb3 100644
--- a/source/Lib/TLibEncoder/TEncSbac.h
+++ b/source/Lib/TLibEncoder/TEncSbac.h
@@ -52,6 +52,7 @@
 #if FAST_BIT_EST
 #include "TEncBinCoderCABACCounter.h"
 #endif
+namespace pcc_hm {
 
 class TEncTop;
 
@@ -241,4 +242,6 @@ private:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(AFX_TENCSBAC_H__DDA7CDC4_EDE3_4015_9D32_2156249C82AA__INCLUDED_)
+
diff --git a/source/Lib/TLibEncoder/TEncSearch.cpp b/source/Lib/TLibEncoder/TEncSearch.cpp
index c307cb2e..bf7ee8d0 100644
--- a/source/Lib/TLibEncoder/TEncSearch.cpp
+++ b/source/Lib/TLibEncoder/TEncSearch.cpp
@@ -43,6 +43,7 @@
 #include "TLibCommon/Debug.h"
 #include <math.h>
 #include <limits>
+namespace pcc_hm {
 
 
 //! \ingroup TLibEncoder
@@ -405,8 +406,8 @@ Void TEncSearch::init(TEncCfg*       pcEncCfg,
   const UInt uiNumPartitions = 1<<(maxTotalCUDepth<<1);
   for (UInt ch=0; ch<MAX_NUM_COMPONENT; ch++)
   {
-    const UInt csx=::getComponentScaleX(ComponentID(ch), cform);
-    const UInt csy=::getComponentScaleY(ComponentID(ch), cform);
+    const UInt csx=pcc_hm::getComponentScaleX(ComponentID(ch), cform);
+    const UInt csy=pcc_hm::getComponentScaleY(ComponentID(ch), cform);
     m_ppcQTTempCoeff[ch] = new TCoeff* [uiNumLayersToAllocate];
 #if ADAPTIVE_QP_SELECTION
     m_ppcQTTempArlCoeff[ch]  = new TCoeff*[uiNumLayersToAllocate];
@@ -1306,6 +1307,9 @@ UInt TEncSearch::xGetIntraBitsQTChroma(TComTU &rTu,
 }
 
 Void TEncSearch::xIntraCodingTUBlock(       TComYuv*    pcOrgYuv,
+#if PCC_RDO_EXT
+                                            TComYuv*    pcOccupancyYuv,
+#endif
                                             TComYuv*    pcPredYuv,
                                             TComYuv*    pcResiYuv,
                                             Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE],
@@ -1338,6 +1342,9 @@ Void TEncSearch::xIntraCodingTUBlock(       TComYuv*    pcOrgYuv,
   const UInt           uiHeight         = rect.height;
   const UInt           uiStride         = pcOrgYuv ->getStride (compID);
         Pel           *piOrg            = pcOrgYuv ->getAddr( compID, uiAbsPartIdx );
+#if PCC_RDO_EXT
+        Pel           *piOccupancy      = pcOccupancyYuv->getAddr(compID, uiAbsPartIdx);
+#endif
         Pel           *piPred           = pcPredYuv->getAddr( compID, uiAbsPartIdx );
         Pel           *piResi           = pcResiYuv->getAddr( compID, uiAbsPartIdx );
         Pel           *piReco           = pcPredYuv->getAddr( compID, uiAbsPartIdx );
@@ -1600,7 +1607,11 @@ Void TEncSearch::xIntraCodingTUBlock(       TComYuv*    pcOrgYuv,
   }
 
   //===== update distortion =====
-  ruiDist += m_pcRdCost->getDistPart( bitDepth, piReco, uiStride, piOrg, uiStride, uiWidth, uiHeight, compID );
+#if PCC_RDO_EXT
+  ruiDist += m_pcRdCost->getDistPart(bitDepth, piReco, uiStride, piOrg, uiStride, uiWidth, uiHeight, compID, DF_SSE, piOccupancy, uiStride);
+#else
+  ruiDist += m_pcRdCost->getDistPart(bitDepth, piReco, uiStride, piOrg, uiStride, uiWidth, uiHeight, compID);
+#endif
 }
 
 
@@ -1617,7 +1628,12 @@ TEncSearch::xRecurIntraCodingLumaQT(TComYuv*    pcOrgYuv,
 #endif
                                     Double&     dRDCost,
                                     TComTU&     rTu
+#if PCC_RDO_EXT
+                                    DEBUG_STRING_FN_DECLARE(sDebug),
+                                    TComYuv*    pcOccupancyYuv)
+#else
                                     DEBUG_STRING_FN_DECLARE(sDebug))
+#endif
 {
   TComDataCU   *pcCU          = rTu.getCU();
   const UInt    uiAbsPartIdx  = rTu.GetAbsPartIdxTU();
@@ -1718,8 +1734,11 @@ TEncSearch::xRecurIntraCodingLumaQT(TComYuv*    pcOrgYuv,
 
 
         pcCU->setTransformSkipSubParts ( modeId, COMPONENT_Y, uiAbsPartIdx, totalAdjustedDepthChan );
-        xIntraCodingTUBlock( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSingle, false, singleDistTmpLuma, COMPONENT_Y, rTu DEBUG_STRING_PASS_INTO(sModeString), default0Save1Load2 );
-
+#if PCC_RDO_EXT
+        xIntraCodingTUBlock(pcOrgYuv, pcOccupancyYuv, pcPredYuv, pcResiYuv, resiLumaSingle, false, singleDistTmpLuma, COMPONENT_Y, rTu DEBUG_STRING_PASS_INTO(sModeString), default0Save1Load2);
+#else
+        xIntraCodingTUBlock(pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSingle, false, singleDistTmpLuma, COMPONENT_Y, rTu DEBUG_STRING_PASS_INTO(sModeString), default0Save1Load2);
+#endif
         singleCbfTmpLuma = pcCU->getCbf( uiAbsPartIdx, COMPONENT_Y, uiTrDepth );
 
         //----- determine rate and r-d cost -----
@@ -1787,8 +1806,11 @@ TEncSearch::xRecurIntraCodingLumaQT(TComYuv*    pcOrgYuv,
       dSingleCost   = 0.0;
 
       pcCU ->setTransformSkipSubParts ( 0, COMPONENT_Y, uiAbsPartIdx, totalAdjustedDepthChan );
-      xIntraCodingTUBlock( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSingle, false, uiSingleDistLuma, COMPONENT_Y, rTu DEBUG_STRING_PASS_INTO(sDebug));
-
+#if PCC_RDO_EXT
+      xIntraCodingTUBlock(pcOrgYuv, pcOccupancyYuv, pcPredYuv, pcResiYuv, resiLumaSingle, false, uiSingleDistLuma, COMPONENT_Y, rTu DEBUG_STRING_PASS_INTO(sDebug));
+#else
+      xIntraCodingTUBlock(pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSingle, false, uiSingleDistLuma, COMPONENT_Y, rTu DEBUG_STRING_PASS_INTO(sDebug));
+#endif
       if( bCheckSplit )
       {
         uiSingleCbfLuma = pcCU->getCbf( uiAbsPartIdx, COMPONENT_Y, uiTrDepth );
@@ -1841,7 +1863,11 @@ TEncSearch::xRecurIntraCodingLumaQT(TComYuv*    pcOrgYuv,
     {
       DEBUG_STRING_NEW(sChild)
 #if HHI_RQT_INTRA_SPEEDUP
-      xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSplit, uiSplitDistLuma, bCheckFirst, dSplitCost, tuRecurseChild DEBUG_STRING_PASS_INTO(sChild) );
+#if PCC_RDO_EXT
+        xRecurIntraCodingLumaQT(pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSplit, uiSplitDistLuma, bCheckFirst, dSplitCost, tuRecurseChild DEBUG_STRING_PASS_INTO(sChild), pcOccupancyYuv);
+#else
+        xRecurIntraCodingLumaQT(pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSplit, uiSplitDistLuma, bCheckFirst, dSplitCost, tuRecurseChild DEBUG_STRING_PASS_INTO(sChild));
+#endif
 #else
       xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSplit, uiSplitDistLuma, dSplitCost, tuRecurseChild DEBUG_STRING_PASS_INTO(sChild) );
 #endif
@@ -2136,7 +2162,12 @@ TEncSearch::xRecurIntraChromaCodingQT(TComYuv*    pcOrgYuv,
                                       Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE],
                                       Distortion& ruiDist,
                                       TComTU&     rTu
+#if PCC_RDO_EXT
+                                      DEBUG_STRING_FN_DECLARE(sDebug),
+                                      TComYuv*    pcOccupancyYuv)
+#else
                                       DEBUG_STRING_FN_DECLARE(sDebug))
+#endif
 {
   TComDataCU         *pcCU                  = rTu.getCU();
   const UInt          uiTrDepth             = rTu.GetTransformDepthRel();
@@ -2239,7 +2270,11 @@ TEncSearch::xRecurIntraChromaCodingQT(TComYuv*    pcOrgYuv,
 
             singleDistCTmp = 0;
 
-            xIntraCodingTUBlock( pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, (crossCPredictionModeId != 0), singleDistCTmp, compID, TUIterator DEBUG_STRING_PASS_INTO(sDebugMode), default0Save1Load2);
+#if PCC_RDO_EXT
+            xIntraCodingTUBlock(pcOrgYuv, pcOccupancyYuv, pcPredYuv, pcResiYuv, resiLuma, (crossCPredictionModeId != 0), singleDistCTmp, compID, TUIterator DEBUG_STRING_PASS_INTO(sDebugMode), default0Save1Load2);
+#else
+            xIntraCodingTUBlock(pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, (crossCPredictionModeId != 0), singleDistCTmp, compID, TUIterator DEBUG_STRING_PASS_INTO(sDebugMode), default0Save1Load2);
+#endif
             singleCbfCTmp = pcCU->getCbf( subTUAbsPartIdx, compID, uiTrDepth);
 
             if (  ((crossCPredictionModeId == 1) && (pcCU->getCrossComponentPredictionAlpha(subTUAbsPartIdx, compID) == 0))
@@ -2306,9 +2341,11 @@ TEncSearch::xRecurIntraChromaCodingQT(TComYuv*    pcOrgYuv,
     do
     {
       DEBUG_STRING_NEW(sChild)
-
-      xRecurIntraChromaCodingQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, ruiDist, tuRecurseChild DEBUG_STRING_PASS_INTO(sChild) );
-
+#if PCC_RDO_EXT
+      xRecurIntraChromaCodingQT(pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, ruiDist, tuRecurseChild DEBUG_STRING_PASS_INTO(sChild), pcOccupancyYuv);
+#else
+      xRecurIntraChromaCodingQT(pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, ruiDist, tuRecurseChild DEBUG_STRING_PASS_INTO(sChild));
+#endif
       DEBUG_STRING_APPEND(sDebug, sChild)
       const UInt uiAbsPartIdxSub=tuRecurseChild.GetAbsPartIdxTU();
 
@@ -2394,6 +2431,9 @@ TEncSearch::xSetIntraResultChromaQT(TComYuv*    pcRecoYuv, TComTU &rTu)
 Void
 TEncSearch::estIntraPredLumaQT(TComDataCU* pcCU,
                                TComYuv*    pcOrgYuv,
+#if PCC_RDO_EXT
+                               TComYuv*    pcOccupancyYuv,
+#endif
                                TComYuv*    pcPredYuv,
                                TComYuv*    pcResiYuv,
                                TComYuv*    pcRecoYuv,
@@ -2579,7 +2619,11 @@ TEncSearch::estIntraPredLumaQT(TComDataCU* pcCU,
       Distortion uiPUDistY = 0;
       Double     dPUCost   = 0.0;
 #if HHI_RQT_INTRA_SPEEDUP
-      xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, uiPUDistY, true, dPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode) );
+#if PCC_RDO_EXT
+      xRecurIntraCodingLumaQT(pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, uiPUDistY, true, dPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode), pcOccupancyYuv);
+#else
+      xRecurIntraCodingLumaQT(pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, uiPUDistY, true, dPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode));
+#endif
 #else
       xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, uiPUDistY, dPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode) );
 #endif
@@ -2666,9 +2710,11 @@ TEncSearch::estIntraPredLumaQT(TComDataCU* pcCU,
       // determine residual for partition
       Distortion uiPUDistY = 0;
       Double     dPUCost   = 0.0;
-
-      xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, uiPUDistY, false, dPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sModeTree));
-
+#if PCC_RDO_EXT
+      xRecurIntraCodingLumaQT(pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, uiPUDistY, false, dPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sModeTree), pcOccupancyYuv);
+#else
+      xRecurIntraCodingLumaQT(pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, uiPUDistY, false, dPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sModeTree));
+#endif
       // check r-d cost
       if( dPUCost < dBestPUCost )
       {
@@ -2780,6 +2826,9 @@ TEncSearch::estIntraPredLumaQT(TComDataCU* pcCU,
 Void
 TEncSearch::estIntraPredChromaQT(TComDataCU* pcCU,
                                  TComYuv*    pcOrgYuv,
+#if PCC_RDO_EXT
+                                 TComYuv*    pcOccupancyYuv,
+#endif
                                  TComYuv*    pcPredYuv,
                                  TComYuv*    pcResiYuv,
                                  TComYuv*    pcRecoYuv,
@@ -2838,8 +2887,11 @@ TEncSearch::estIntraPredChromaQT(TComDataCU* pcCU,
           //----- chroma coding -----
           Distortion uiDist = 0;
           pcCU->setIntraDirSubParts  ( CHANNEL_TYPE_CHROMA, uiModeList[uiMode], uiPartOffset, uiDepthCU+uiInitTrDepth );
-          xRecurIntraChromaCodingQT       ( pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, uiDist, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode) );
-
+#if PCC_RDO_EXT
+          xRecurIntraChromaCodingQT(pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, uiDist, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode), pcOccupancyYuv);
+#else
+          xRecurIntraChromaCodingQT(pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, uiDist, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode));
+#endif 
           if( pcCU->getSlice()->getPPS()->getUseTransformSkip() )
           {
             m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[uiDepthCU][CI_CURR_BEST] );
@@ -4080,8 +4132,15 @@ Void TEncSearch::xMotionEstimation( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int iPa
                         iRoiHeight,
                         pcYuv->getStride(COMPONENT_Y),
                         pcCU->getSlice()->getSPS()->getBitDepth(CHANNEL_TYPE_LUMA),
+#if PCC_ME_EXT
+                        roiPosX,
+                        roiPosY,
+                        iRefIdxPred,
+                        eRefPicList);
+#else
                         roiPosX,
                         roiPosY);
+#endif
   xInitTileBorders(pcCU, &cPattern);
 #else
   cPattern.initPattern( pcYuv->getAddr  ( COMPONENT_Y, uiPartAddr ),
@@ -4397,6 +4456,105 @@ Void TEncSearch::xTZSearch( const TComDataCU* const pcCU,
   // set rcMv (Median predictor) as start point and as best point
   xTZSearchHelp( pcPatternKey, cStruct, rcMv.getHor(), rcMv.getVer(), 0, 0 );
 
+#if PCC_ME_EXT
+  if (m_pcEncCfg->getUsePCCExt()) {
+    Int xCoor = pcPatternKey->getROIYPosX() + pcPatternKey->getROIYWidth() / PCC_ME_NUM_LAYERS_ACTIVE;
+    Int yCoor = pcPatternKey->getROIYPosY() + pcPatternKey->getROIYHeight() / PCC_ME_NUM_LAYERS_ACTIVE;
+  
+    Int picWidth = pcCU->getSlice()->getSPS()->getPicWidthInLumaSamples();
+    Int occupancyResolution = 16;
+    Int blockToPatchWidth = picWidth / occupancyResolution;
+  
+    Int* occupancyMap = pcCU->getPic()->getOccupancyMap();
+    long long* blockToPatch = pcCU->getPic()->getBlockToPatch();
+  
+    if (pcCU->getSlice()->getPOC() % 2 == 0 && occupancyMap[yCoor * picWidth + xCoor])
+    {
+  	  Int xBlockIndex = xCoor / occupancyResolution;
+  	  Int yBlockIndex = yCoor / occupancyResolution;
+  
+  	  Int patchIndex = blockToPatch[yBlockIndex * blockToPatchWidth + xBlockIndex] - 1;          // should be minus 1
+  	  Int frameIndex = pcCU->getSlice()->getPOC() / PCC_ME_NUM_LAYERS_ACTIVE;
+  
+  	  // current 3D coordinate derivation
+  	  Int projectIndex = g_projectionIndex[frameIndex][patchIndex];
+  
+  	  Int patchD1 = g_patch3DInfo[frameIndex][patchIndex][0];
+  	  Int patchU1 = g_patch3DInfo[frameIndex][patchIndex][1];
+  	  Int patchV1 = g_patch3DInfo[frameIndex][patchIndex][2];
+  
+  	  Int patchU0 = g_patch2DInfo[frameIndex][patchIndex][0];
+  	  Int patchV0 = g_patch2DInfo[frameIndex][patchIndex][1];
+  
+  	  Int xCoor3D = patchU1 + (xCoor - patchU0 * occupancyResolution);
+  	  Int yCoor3D = patchV1 + (yCoor - patchV0 * occupancyResolution);
+  
+  
+  	  RefPicList eRefPicList = pcPatternKey->getRefPicList();
+  	  Int refIdx = pcPatternKey->getRefIndex();
+  
+  	  // find the suitable patch in the reference frame
+  	  Int refPOC = pcCU->getSlice()->getRefPOC(eRefPicList, refIdx);
+  	  Int refFrameIndex = refPOC / 2;
+  	  Int refNumPatches = g_numPatches[refFrameIndex];
+  
+  	  Int bestPatchIndex = 0;
+  	  Int bestDist = MAX_INT;
+  	  for (Int refPatchIdx = 0; refPatchIdx < refNumPatches; refPatchIdx++)
+  	  {
+  	    Int refProjectionIndex = g_projectionIndex[refFrameIndex][refPatchIdx];
+  	  
+  	    if (refProjectionIndex != projectIndex)
+  	    {
+  	  	  continue;
+  	    }
+  	  
+  	    Int refPatchU1 = g_patch3DInfo[refFrameIndex][refPatchIdx][1];
+  	    Int refPatchV1 = g_patch3DInfo[refFrameIndex][refPatchIdx][2];
+  	  
+  	    Int refPatchSizeU0 = g_patch2DInfo[refFrameIndex][refPatchIdx][2];
+  	    Int refPatchSizeV0 = g_patch2DInfo[refFrameIndex][refPatchIdx][3];
+	  
+	    Int refPatch3DEndU1 = refPatchU1 + refPatchSizeU0 * occupancyResolution - 1;
+	    Int refPatch3DEndV1 = refPatchV1 + refPatchSizeV0 * occupancyResolution - 1;
+	  
+	    Bool xCond = (xCoor3D >= refPatchU1 && xCoor3D <= refPatch3DEndU1);
+	    Bool yCond = (yCoor3D >= refPatchV1 && yCoor3D <= refPatch3DEndV1);
+	  
+	    if (xCond && yCond)
+	    {
+	  	  Int refPatchD1 = g_patch3DInfo[refFrameIndex][refPatchIdx][0];
+	  	  Int patchDist = abs(patchD1 - refPatchD1);
+	  
+	  	  if (patchDist < bestDist)
+	  	  {
+	  	    bestDist = patchDist;
+	  	    bestPatchIndex = refPatchIdx;
+	  	  }
+	    }
+	  }
+
+	  Int diff3DU = g_patch3DInfo[frameIndex][patchIndex][1] - g_patch3DInfo[refFrameIndex][bestPatchIndex][1];
+	  Int diff3DV = g_patch3DInfo[frameIndex][patchIndex][2] - g_patch3DInfo[refFrameIndex][bestPatchIndex][2];
+
+	  Int diff2DU = (g_patch2DInfo[refFrameIndex][bestPatchIndex][0] - g_patch2DInfo[frameIndex][patchIndex][0]) * occupancyResolution;
+	  Int diff2DV = (g_patch2DInfo[refFrameIndex][bestPatchIndex][1] - g_patch2DInfo[frameIndex][patchIndex][1]) * occupancyResolution;
+
+	  Int diffTotalU = diff3DU + diff2DU;
+	  Int diffTotalV = diff3DV + diff2DV;
+
+	  TComMv startMV(diffTotalU << 2, diffTotalV << 2);
+	  pcCU->clipMv(startMV);
+#if ME_ENABLE_ROUNDING_OF_MVS
+	  startMV.divideByPowerOf2(2);
+#else
+	  startMV >>= 2;
+#endif
+	  xTZSearchHelp(pcPatternKey, cStruct, startMV.getHor(), startMV.getVer(), 0, 0);
+	}
+  }
+#endif
+
   // test whether one of PRED_A, PRED_B, PRED_C MV is better start point than Median predictor
   if ( bTestOtherPredictedMV )
   {
@@ -4956,7 +5114,12 @@ Void TEncSearch::encodeResAndCalcRdInterCU( TComDataCU* pcCU, TComYuv* pcYuvOrg,
                                             Bool bSkipResidual,
                                             TComYuv* pcYuvNoCorrResi,
                                             ACTRDTestTypes eACTRDTestType
+#if PCC_RDO_EXT
+                                            DEBUG_STRING_FN_DECLARE(sDebug),
+                                            TComYuv* pcYuvOccupancy )
+#else
                                             DEBUG_STRING_FN_DECLARE(sDebug) )
+#endif
 {
   assert ( !pcCU->isIntra(0) );
 
@@ -4984,8 +5147,13 @@ Void TEncSearch::encodeResAndCalcRdInterCU( TComDataCU* pcCU, TComYuv* pcYuvOrg,
       const ComponentID compID=ComponentID(comp);
       const UInt csx=pcYuvOrg->getComponentScaleX(compID);
       const UInt csy=pcYuvOrg->getComponentScaleY(compID);
-      distortion += m_pcRdCost->getDistPart( sps.getBitDepth(toChannelType(compID)), pcYuvRec->getAddr(compID), pcYuvRec->getStride(compID), pcYuvOrg->getAddr(compID),
-                                               pcYuvOrg->getStride(compID), cuWidthPixels >> csx, cuHeightPixels >> csy, compID);
+#if PCC_RDO_EXT
+      distortion += m_pcRdCost->getDistPart(sps.getBitDepth(toChannelType(compID)), pcYuvRec->getAddr(compID), pcYuvRec->getStride(compID), pcYuvOrg->getAddr(compID),
+                                            pcYuvOrg->getStride(compID), cuWidthPixels >> csx, cuHeightPixels >> csy, compID, DF_SSE, pcYuvOccupancy->getAddr(compID), pcYuvOccupancy->getStride(compID));
+#else
+      distortion += m_pcRdCost->getDistPart(sps.getBitDepth(toChannelType(compID)), pcYuvRec->getAddr(compID), pcYuvRec->getStride(compID), pcYuvOrg->getAddr(compID),
+                                            pcYuvOrg->getStride(compID), cuWidthPixels >> csx, cuHeightPixels >> csy, compID);
+#endif  
     }
 
     m_pcRDGoOnSbacCoder->load(m_pppcRDSbacCoder[pcCU->getDepth(0)][CI_CURR_BEST]);
@@ -5034,11 +5202,23 @@ Void TEncSearch::encodeResAndCalcRdInterCU( TComDataCU* pcCU, TComYuv* pcYuvOrg,
     {
       const UInt uiNumSamplesLuma = cuWidthPixels*cuHeightPixels;
       ::memset( m_pTempPel, 0, sizeof( Pel ) * uiNumSamplesLuma );
-      zeroDistortion = m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_LUMA ), m_pTempPel, cuWidthPixels, pcYuvResi->getAddr( COMPONENT_Y, 0 ), pcYuvResi->getStride(COMPONENT_Y), cuWidthPixels, cuHeightPixels, COMPONENT_Y ); // initialized with zero residual destortion
+      zeroDistortion = m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_LUMA ), m_pTempPel, cuWidthPixels, pcYuvResi->getAddr( COMPONENT_Y, 0 ), pcYuvResi->getStride(COMPONENT_Y), cuWidthPixels, cuHeightPixels, COMPONENT_Y
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcYuvOccupancy->getAddr(COMPONENT_Y), pcYuvOccupancy->getStride(COMPONENT_Y)
+#endif
+                                               ); // initialized with zero residual destortion
       const UInt csx=pcYuvOrg->getComponentScaleX(COMPONENT_Cb);
       const UInt csy=pcYuvOrg->getComponentScaleY(COMPONENT_Cb);
-      zeroDistortion += m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_CHROMA ), m_pTempPel, cuWidthPixels >> csx, pcYuvResi->getAddr( COMPONENT_Cb, 0 ), pcYuvResi->getStride(COMPONENT_Cb), cuWidthPixels >> csx, cuHeightPixels >> csy, COMPONENT_Cb ); // initialized with zero residual destortion
-      zeroDistortion += m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_CHROMA ), m_pTempPel, cuWidthPixels >> csx, pcYuvResi->getAddr( COMPONENT_Cr, 0 ), pcYuvResi->getStride(COMPONENT_Cr), cuWidthPixels >> csx, cuHeightPixels >> csy, COMPONENT_Cr ); // initialized with zero residual destortion
+      zeroDistortion += m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_CHROMA ), m_pTempPel, cuWidthPixels >> csx, pcYuvResi->getAddr( COMPONENT_Cb, 0 ), pcYuvResi->getStride(COMPONENT_Cb), cuWidthPixels >> csx, cuHeightPixels >> csy, COMPONENT_Cb
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcYuvOccupancy->getAddr(COMPONENT_Cb), pcYuvOccupancy->getStride(COMPONENT_Cb)
+#endif
+                                                ); // initialized with zero residual destortion
+      zeroDistortion += m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_CHROMA ), m_pTempPel, cuWidthPixels >> csx, pcYuvResi->getAddr( COMPONENT_Cr, 0 ), pcYuvResi->getStride(COMPONENT_Cr), cuWidthPixels >> csx, cuHeightPixels >> csy, COMPONENT_Cr
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcYuvOccupancy->getAddr(COMPONENT_Cr), pcYuvOccupancy->getStride(COMPONENT_Cr)
+#endif
+                                                ); // initialized with zero residual destortion
     }
     if(eACTRDTestType == ACT_TRAN_CLR)
     {
@@ -5056,23 +5236,40 @@ Void TEncSearch::encodeResAndCalcRdInterCU( TComDataCU* pcCU, TComYuv* pcYuvOrg,
   {
     if(eACTRDTestType == ACT_TWO_CLR)
     {
-      xEstimateInterResidualQTTUCSC( pcYuvNoCorrResi, nonZeroCost, nonZeroBits, nonZeroDistortion, tuLevel0, pcYuvResi, eACTRDTestType DEBUG_STRING_PASS_INTO(sDebug) );
+      xEstimateInterResidualQTTUCSC( pcYuvNoCorrResi, nonZeroCost, nonZeroBits, nonZeroDistortion, tuLevel0, pcYuvResi, eACTRDTestType DEBUG_STRING_PASS_INTO(sDebug)
+#if PCC_RDO_EXT
+                                    , pcYuvOccupancy
+#endif
+                                    );
     }
     else if(eACTRDTestType == ACT_TRAN_CLR)
     {
       pcCU->setColourTransformSubParts(true, 0 , pcCU->getDepth(0));
-      xEstimateInterResidualQT( pcYuvNoCorrResi, nonZeroCost, nonZeroBits, nonZeroDistortion, NULL, tuLevel0 DEBUG_STRING_PASS_INTO(sDebug), pcYuvResi );
+      xEstimateInterResidualQT( pcYuvNoCorrResi, nonZeroCost, nonZeroBits, nonZeroDistortion, NULL, tuLevel0 DEBUG_STRING_PASS_INTO(sDebug), pcYuvResi
+#if PCC_RDO_EXT
+                                    , pcYuvOccupancy
+#endif
+      );
     }
     else
     {
       pcCU->setColourTransformSubParts(false, 0, pcCU->getDepth(0));
-      xEstimateInterResidualQT( pcYuvResi,  nonZeroCost, nonZeroBits, nonZeroDistortion, &zeroDistortion, tuLevel0 DEBUG_STRING_PASS_INTO(sDebug) );
+      xEstimateInterResidualQT( pcYuvResi,  nonZeroCost, nonZeroBits, nonZeroDistortion, &zeroDistortion, tuLevel0 DEBUG_STRING_PASS_INTO(sDebug)
+#if PCC_RDO_EXT
+                                    , NULL
+                                    , pcYuvOccupancy
+#endif
+      );
     }
   }
   else
   {
     pcCU->setColourTransformSubParts(false, 0, pcCU->getDepth(0));
-    xEstimateInterResidualQT( pcYuvResi,  nonZeroCost, nonZeroBits, nonZeroDistortion, &zeroDistortion, tuLevel0 DEBUG_STRING_PASS_INTO(sDebug) );
+#if PCC_RDO_EXT
+    xEstimateInterResidualQT(pcYuvResi, nonZeroCost, nonZeroBits, nonZeroDistortion, &zeroDistortion, tuLevel0 DEBUG_STRING_PASS_INTO(sDebug), NULL, pcYuvOccupancy);
+#else
+    xEstimateInterResidualQT(pcYuvResi, nonZeroCost, nonZeroBits, nonZeroDistortion, &zeroDistortion, tuLevel0 DEBUG_STRING_PASS_INTO(sDebug));
+#endif
   }
 
   // -------------------------------------------------------
@@ -5141,7 +5338,11 @@ Void TEncSearch::encodeResAndCalcRdInterCU( TComDataCU* pcCU, TComYuv* pcYuvOrg,
   for(Int comp=0; comp<numValidComponents; comp++)
   {
     const ComponentID compID=ComponentID(comp);
-    finalDistortion += m_pcRdCost->getDistPart( sps.getBitDepth(toChannelType(compID)), pcYuvRec->getAddr(compID ), pcYuvRec->getStride(compID ), pcYuvOrg->getAddr(compID ), pcYuvOrg->getStride(compID), cuWidthPixels >> pcYuvOrg->getComponentScaleX(compID), cuHeightPixels >> pcYuvOrg->getComponentScaleY(compID), compID);
+#if PCC_RDO_EXT
+    finalDistortion += m_pcRdCost->getDistPart(sps.getBitDepth(toChannelType(compID)), pcYuvRec->getAddr(compID), pcYuvRec->getStride(compID), pcYuvOrg->getAddr(compID), pcYuvOrg->getStride(compID), cuWidthPixels >> pcYuvOrg->getComponentScaleX(compID), cuHeightPixels >> pcYuvOrg->getComponentScaleY(compID), compID, DF_SSE, pcYuvOccupancy->getAddr(compID), pcYuvOccupancy->getStride(compID));
+#else
+    finalDistortion += m_pcRdCost->getDistPart(sps.getBitDepth(toChannelType(compID)), pcYuvRec->getAddr(compID), pcYuvRec->getStride(compID), pcYuvOrg->getAddr(compID), pcYuvOrg->getStride(compID), cuWidthPixels >> pcYuvOrg->getComponentScaleX(compID), cuHeightPixels >> pcYuvOrg->getComponentScaleY(compID), compID);
+#endif
   }
 
   pcCU->getTotalBits()       = finalBits;
@@ -5159,6 +5360,9 @@ Void TEncSearch::xEstimateInterResidualQT( TComYuv    *pcResi,
                                            TComTU     &rTu
                                            DEBUG_STRING_FN_DECLARE(sDebug),
                                            TComYuv* pcOrgResi
+#if PCC_RDO_EXT
+                                         , TComYuv* pcOccupancyYuv
+#endif
                                           )
 {
   TComDataCU *pcCU        = rTu.getCU();
@@ -5411,12 +5615,21 @@ Void TEncSearch::xEstimateInterResidualQT( TComYuv    *pcResi,
 
                   nonCoeffDist = m_pcRdCost->getDistPart( channelBitDepth, m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
                                                           m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride( compID ), pcResi->getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
-                                                          pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID); // initialized with zero residual distortion
+                                                          pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcOccupancyYuv->getAddr(compID), pcOccupancyYuv->getStride(compID)
+#endif
+                                                         ); // initialized with zero residual distortion
                 }
                 else
                 {
-                  nonCoeffDist = m_pcRdCost->getDistPart( channelBitDepth, m_pTempPel, tuCompRect.width, pcResi->getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
-                                                          pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID); // initialized with zero residual distortion
+#if PCC_RDO_EXT
+                  nonCoeffDist = m_pcRdCost->getDistPart(channelBitDepth, m_pTempPel, tuCompRect.width, pcResi->getAddrPix(compID, tuCompRect.x0, tuCompRect.y0),
+                    pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID, DF_SSE, pcOccupancyYuv->getAddrPix(compID, tuCompRect.x0, tuCompRect.y0), pcOccupancyYuv->getStride(compID)); // initialized with zero residual distortion
+#else
+                  nonCoeffDist = m_pcRdCost->getDistPart(channelBitDepth, m_pTempPel, tuCompRect.width, pcResi->getAddrPix(compID, tuCompRect.x0, tuCompRect.y0),
+                    pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID); // initialized with zero residual distortion
+#endif   
                 }
 
                 m_pcEntropyCoder->encodeQtCbfZero( TUIterator, toChannelType(compID) );
@@ -5474,11 +5687,19 @@ Void TEncSearch::xEstimateInterResidualQT( TComYuv    *pcResi,
                                                         true);
                 }
 
-                currCompDist = m_pcRdCost->getDistPart( channelBitDepth, m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
-                                                        m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(compID),
-                                                        pcResi->getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
-                                                        pcResi->getStride(compID),
-                                                        tuCompRect.width, tuCompRect.height, compID);
+#if PCC_RDO_EXT
+                currCompDist = m_pcRdCost->getDistPart(channelBitDepth, m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix(compID, tuCompRect.x0, tuCompRect.y0),
+                  m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(compID),
+                  pcResi->getAddrPix(compID, tuCompRect.x0, tuCompRect.y0),
+                  pcResi->getStride(compID),
+                  tuCompRect.width, tuCompRect.height, compID, DF_SSE, pcOccupancyYuv->getAddrPix(compID, tuCompRect.x0, tuCompRect.y0), pcOccupancyYuv->getStride(compID));
+#else
+                currCompDist = m_pcRdCost->getDistPart(channelBitDepth, m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix(compID, tuCompRect.x0, tuCompRect.y0),
+                  m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(compID),
+                  pcResi->getAddrPix(compID, tuCompRect.x0, tuCompRect.y0),
+                  pcResi->getStride(compID),
+                  tuCompRect.width, tuCompRect.height, compID);
+#endif
 
                 currCompCost = m_pcRdCost->calcRdCost(currCompBits, currCompDist);
                   
@@ -5606,14 +5827,26 @@ Void TEncSearch::xEstimateInterResidualQT( TComYuv    *pcResi,
         m_tmpYuvPred.convert( extendedPrecision, rTu.getRect(COMPONENT_Y).x0, rTu.getRect(COMPONENT_Y).y0, rTu.getRect(COMPONENT_Y).width, false, pcCU->getSlice()->getSPS()->getBitDepths(), pcCU->isLosslessCoded(uiAbsPartIdx) );
 
         uiSingleDistComp[COMPONENT_Y ][0] = m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_LUMA ), m_tmpYuvPred.getAddrPix( COMPONENT_Y, tuCompRect.x0, tuCompRect.y0 ), m_tmpYuvPred.getStride(COMPONENT_Y),
-          pcOrgResi->getAddrPix( COMPONENT_Y, tuCompRect.x0, tuCompRect.y0 ), pcOrgResi->getStride(COMPONENT_Y), tuCompRect.width, tuCompRect.height, COMPONENT_Y );
+          pcOrgResi->getAddrPix( COMPONENT_Y, tuCompRect.x0, tuCompRect.y0 ), pcOrgResi->getStride(COMPONENT_Y), tuCompRect.width, tuCompRect.height, COMPONENT_Y
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Y), pcOccupancyYuv->getStride(COMPONENT_Y)
+#endif
+                                                                    );
 
         const TComRectangle &tuCompRectC=rTu.getRect(COMPONENT_Cb);
         uiSingleDistComp[COMPONENT_Cb][0] = m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_CHROMA ), m_tmpYuvPred.getAddrPix( COMPONENT_Cb, tuCompRectC.x0, tuCompRectC.y0 ), m_tmpYuvPred.getStride(COMPONENT_Cb),
-          pcOrgResi->getAddrPix( COMPONENT_Cb, tuCompRectC.x0, tuCompRectC.y0 ), pcOrgResi->getStride(COMPONENT_Cb), tuCompRectC.width, tuCompRectC.height, COMPONENT_Cb );
+          pcOrgResi->getAddrPix( COMPONENT_Cb, tuCompRectC.x0, tuCompRectC.y0 ), pcOrgResi->getStride(COMPONENT_Cb), tuCompRectC.width, tuCompRectC.height, COMPONENT_Cb
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Cb), pcOccupancyYuv->getStride(COMPONENT_Cb)
+#endif
+                                                                    );
 
         uiSingleDistComp[COMPONENT_Cr][0] = m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_CHROMA ), m_tmpYuvPred.getAddrPix( COMPONENT_Cr, tuCompRectC.x0, tuCompRectC.y0 ), m_tmpYuvPred.getStride(COMPONENT_Cr),
-          pcOrgResi->getAddrPix( COMPONENT_Cr, tuCompRectC.x0, tuCompRectC.y0 ), pcOrgResi->getStride(COMPONENT_Cr), tuCompRectC.width, tuCompRectC.height, COMPONENT_Cr );
+          pcOrgResi->getAddrPix( COMPONENT_Cr, tuCompRectC.x0, tuCompRectC.y0 ), pcOrgResi->getStride(COMPONENT_Cr), tuCompRectC.width, tuCompRectC.height, COMPONENT_Cr
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Cr), pcOccupancyYuv->getStride(COMPONENT_Cr)
+#endif
+                                                                    );
 
         uiSingleDistComp[COMPONENT_Y][1] = uiSingleDistComp[COMPONENT_Cb][1] = uiSingleDistComp[COMPONENT_Cr][1] = 0;
       }
@@ -5720,7 +5953,11 @@ Void TEncSearch::xEstimateInterResidualQT( TComYuv    *pcResi,
     do
     {
       DEBUG_STRING_NEW(childString)
-      xEstimateInterResidualQT( pcResi, dSubdivCost, uiSubdivBits, uiSubdivDist, bCheckFull ? NULL : puiZeroDist,  tuRecurseChild DEBUG_STRING_PASS_INTO(childString), pcOrgResi );
+#if PCC_RDO_EXT
+        xEstimateInterResidualQT(pcResi, dSubdivCost, uiSubdivBits, uiSubdivDist, bCheckFull ? NULL : puiZeroDist, tuRecurseChild DEBUG_STRING_PASS_INTO(childString), pcOrgResi, pcOccupancyYuv);
+#else
+        xEstimateInterResidualQT(pcResi, dSubdivCost, uiSubdivBits, uiSubdivDist, bCheckFull ? NULL : puiZeroDist, tuRecurseChild DEBUG_STRING_PASS_INTO(childString), pcOrgResi);
+#endif
 #if DEBUG_STRING
       // split the string by component and append to the relevant output (because decoder decodes in channel order, whereas this search searches by TU-order)
       std::size_t lastPos=0;
@@ -6559,7 +6796,11 @@ TEncSearch::xIntraCodingTUBlockCSC(       TComYuv*    pcResiYuv,
 
 
 Void
-TEncSearch::xRecurIntraCodingQTTUCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComYuv* pcResiYuv, Distortion& PUDistY, Distortion& PUDistC, Double& dPUCost, TComTU& rTu, Bool bTestMaxTUSize, ACTRDTestTypes eACTRDTestType DEBUG_STRING_FN_DECLARE(sDebug) )
+TEncSearch::xRecurIntraCodingQTTUCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComYuv* pcResiYuv, Distortion& PUDistY, Distortion& PUDistC, Double& dPUCost, TComTU& rTu, Bool bTestMaxTUSize, ACTRDTestTypes eACTRDTestType DEBUG_STRING_FN_DECLARE(sDebug)
+#if PCC_RDO_EXT
+                    , TComYuv* pcYuvOccupancy
+#endif
+                                     )
 {
   TComDataCU          *pcCU                 = rTu.getCU();
   const UInt          trDepth               = rTu.GetTransformDepthRel();
@@ -6812,7 +7053,13 @@ TEncSearch::xRecurIntraCodingQTTUCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TCo
                                                         pcResiYuv->getStride(compID),
                                                         rTu.getRect(compID).width,
                                                         rTu.getRect(compID).height,
-                                                        compID);
+                                                        compID
+#if PCC_RDO_EXT
+                                                        , DF_SSE
+                                                        , pcYuvOccupancy->getAddr(compID)
+                                                        , pcYuvOccupancy->getStride(compID)
+#endif
+                                                      );
               dSingleCostTmp = m_pcRdCost->calcRdCost( singleBitsTmp, singleDistTmp );
             }
 
@@ -6894,7 +7141,13 @@ TEncSearch::xRecurIntraCodingQTTUCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TCo
                                                                                        pcOrgYuv->getStride(COMPONENT_Y),
                                                                                        rTu.getRect(COMPONENT_Y).width,
                                                                                        rTu.getRect(COMPONENT_Y).height,
-                                                                                       COMPONENT_Y);
+                                                                                       COMPONENT_Y
+#if PCC_RDO_EXT
+                                                                                     , DF_SSE
+                                                                                     , pcYuvOccupancy->getAddr(COMPONENT_Y)
+                                                                                     , pcYuvOccupancy->getStride(COMPONENT_Y)
+#endif
+                                                                                      );
       singleColorSpaceDist[colorSpaceId][CHANNEL_TYPE_CHROMA] = 0;
       for(UInt ch = COMPONENT_Cb; ch < numberValidComponents; ch++)
       {
@@ -6906,7 +7159,13 @@ TEncSearch::xRecurIntraCodingQTTUCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TCo
                                                                                             pcOrgYuv->getStride(compID),
                                                                                             rTu.getRect(compID).width,
                                                                                             rTu.getRect(compID).height,
-                                                                                            compID);
+                                                                                            compID
+#if PCC_RDO_EXT
+                                                                                          , DF_SSE
+                                                                                          , pcYuvOccupancy->getAddr(compID)
+                                                                                          , pcYuvOccupancy->getStride(compID)
+#endif
+                                                                                           );
       }
 
       dSingleColorSpaceCost[colorSpaceId] = m_pcRdCost->calcRdCost( singleColorSpaceBits[colorSpaceId], singleColorSpaceDist[colorSpaceId][CHANNEL_TYPE_LUMA] + singleColorSpaceDist[colorSpaceId][CHANNEL_TYPE_CHROMA] );
@@ -7025,7 +7284,11 @@ TEncSearch::xRecurIntraCodingQTTUCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TCo
     TComTURecurse tuRecurseChild(rTu, false);
     do
     {
-      xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, splitDist[CHANNEL_TYPE_LUMA], splitDist[CHANNEL_TYPE_CHROMA], dSplitCost, tuRecurseChild, bTestMaxTUSize, eACTRDTestType DEBUG_STRING_PASS_INTO(sDebug) );
+      xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, splitDist[CHANNEL_TYPE_LUMA], splitDist[CHANNEL_TYPE_CHROMA], dSplitCost, tuRecurseChild, bTestMaxTUSize, eACTRDTestType DEBUG_STRING_PASS_INTO(sDebug)
+#if PCC_RDO_EXT
+                                , pcYuvOccupancy
+#endif
+                               );
 
       for(UInt ch = 0; ch < numberValidComponents; ch++)
       {
@@ -7104,7 +7367,11 @@ TEncSearch::xRecurIntraCodingQTTUCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TCo
 }
 
 Void
-TEncSearch::xRecurIntraCodingQTCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComYuv* pcResiYuv, Distortion& PUDistY, Distortion& PUDistC, Double& dPUCost, TComTU& rTu, Bool bTestMaxTUSize DEBUG_STRING_FN_DECLARE(sDebug) )
+TEncSearch::xRecurIntraCodingQTCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComYuv* pcResiYuv, Distortion& PUDistY, Distortion& PUDistC, Double& dPUCost, TComTU& rTu, Bool bTestMaxTUSize DEBUG_STRING_FN_DECLARE(sDebug)
+#if PCC_RDO_EXT
+                  , TComYuv* pcYuvOccupancy
+#endif
+                  )
 {
   TComDataCU          *pcCU                 = rTu.getCU();
   const UInt          trDepth               = rTu.GetTransformDepthRel();
@@ -7316,7 +7583,13 @@ TEncSearch::xRecurIntraCodingQTCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComY
                                                      pcResiYuv->getStride( compID ),
                                                      rTu.getRect( compID ).width,
                                                      rTu.getRect( compID ).height,
-                                                     compID );
+                                                     compID
+#if PCC_RDO_EXT
+                                                    , DF_SSE
+                                                    , pcYuvOccupancy->getAddr(compID)
+                                                    , pcYuvOccupancy->getStride(compID)
+#endif
+                                                    );
             dSingleCostTmp = m_pcRdCost->calcRdCost( singleBitsTmp, singleDistTmp );
           }
 
@@ -7401,7 +7674,13 @@ TEncSearch::xRecurIntraCodingQTCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComY
                                                              pcOrgYuv->getStride(COMPONENT_Y),
                                                              rTu.getRect(COMPONENT_Y).width,
                                                              rTu.getRect(COMPONENT_Y).height,
-                                                             COMPONENT_Y);
+                                                             COMPONENT_Y
+#if PCC_RDO_EXT
+                                                           , DF_SSE
+                                                           , pcYuvOccupancy->getAddr(COMPONENT_Y)
+                                                           , pcYuvOccupancy->getStride(COMPONENT_Y)
+#endif
+                                                            );
     singleDist[CHANNEL_TYPE_CHROMA] = 0;
     for(UInt ch = COMPONENT_Cb; ch < numberValidComponents; ch++)
     {
@@ -7413,7 +7692,13 @@ TEncSearch::xRecurIntraCodingQTCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComY
                                                                   pcOrgYuv->getStride(compID),
                                                                   rTu.getRect(compID).width,
                                                                   rTu.getRect(compID).height,
-                                                                  compID);
+                                                                  compID
+#if PCC_RDO_EXT
+                                                                , DF_SSE
+                                                                , pcYuvOccupancy->getAddr(compID)
+                                                                , pcYuvOccupancy->getStride(compID)
+#endif
+                                                                 );
     }
 
     dSingleCost = m_pcRdCost->calcRdCost( singleBits, singleDist[CHANNEL_TYPE_LUMA] + singleDist[CHANNEL_TYPE_CHROMA] );
@@ -7439,7 +7724,11 @@ TEncSearch::xRecurIntraCodingQTCSC( TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComY
     TComTURecurse tuRecurseChild(rTu, false);
     do
     {
-      xRecurIntraCodingQTCSC( pcOrgYuv, pcPredYuv, pcResiYuv, splitDist[CHANNEL_TYPE_LUMA], splitDist[CHANNEL_TYPE_CHROMA], dSplitCost, tuRecurseChild, bTestMaxTUSize DEBUG_STRING_PASS_INTO(sDebug) );
+      xRecurIntraCodingQTCSC( pcOrgYuv, pcPredYuv, pcResiYuv, splitDist[CHANNEL_TYPE_LUMA], splitDist[CHANNEL_TYPE_CHROMA], dSplitCost, tuRecurseChild, bTestMaxTUSize DEBUG_STRING_PASS_INTO(sDebug)
+#if PCC_RDO_EXT
+                                                    , pcYuvOccupancy
+#endif
+                             );
 
       for(UInt ch = 0; ch < numberValidComponents; ch++)
       {
@@ -7524,6 +7813,9 @@ TEncSearch::estIntraPredQTCT( TComDataCU*    pcCU,
                               ACTRDTestTypes eACTRDTestType,
                               Bool           bReuseIntraMode
                               DEBUG_STRING_FN_DECLARE(sDebug)
+#if PCC_RDO_EXT
+                              ,TComYuv*      pcYuvOccupancy
+#endif
                              )
 {
   const UInt         depth                 = pcCU->getDepth(0);
@@ -7659,16 +7951,28 @@ TEncSearch::estIntraPredQTCT( TComDataCU*    pcCU,
 
       if(eACTRDTestType == ACT_TWO_CLR)
       {
-        xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, true, eACTRDTestType DEBUG_STRING_PASS_INTO(sMode)  );
+        xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, true, eACTRDTestType DEBUG_STRING_PASS_INTO(sMode)
+#if PCC_RDO_EXT
+                                , pcYuvOccupancy
+#endif
+                                 );
       }
       else if(eACTRDTestType == ACT_TRAN_CLR)
       {
         pcCU->setColourTransformSubParts(true, 0, depth);
-        xRecurIntraCodingQTCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, true DEBUG_STRING_PASS_INTO(sMode)  );
+        xRecurIntraCodingQTCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, true DEBUG_STRING_PASS_INTO(sMode)
+#if PCC_RDO_EXT
+                          , pcYuvOccupancy
+#endif
+                               );
       }
       else if(eACTRDTestType == ACT_ORG_CLR)
       {
-        xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, true, eACTRDTestType DEBUG_STRING_PASS_INTO(sMode)  );
+        xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, true, eACTRDTestType DEBUG_STRING_PASS_INTO(sMode)
+#if PCC_RDO_EXT
+                                , pcYuvOccupancy
+#endif
+                                 );
       }
       else
       {
@@ -7711,16 +8015,28 @@ TEncSearch::estIntraPredQTCT( TComDataCU*    pcCU,
       m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[depth][CI_CURR_BEST] );
       if(eACTRDTestType == ACT_TWO_CLR)
       {
-        xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, false, eACTRDTestType DEBUG_STRING_PASS_INTO(sMode) );
+        xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, false, eACTRDTestType DEBUG_STRING_PASS_INTO(sMode)
+#if PCC_RDO_EXT
+                                , pcYuvOccupancy
+#endif
+                                 );
       }
       else if(eACTRDTestType == ACT_TRAN_CLR)
       {
         pcCU->setColourTransformSubParts(true, 0, depth);
-        xRecurIntraCodingQTCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, false DEBUG_STRING_PASS_INTO(sMode) );
+        xRecurIntraCodingQTCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, false DEBUG_STRING_PASS_INTO(sMode)
+#if PCC_RDO_EXT
+                                                    , pcYuvOccupancy
+#endif
+                               );
       }
       else if(eACTRDTestType == ACT_ORG_CLR)
       {
-        xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, false, eACTRDTestType DEBUG_STRING_PASS_INTO(sMode) );
+        xRecurIntraCodingQTTUCSC( pcOrgYuv, pcPredYuv, pcResiYuv, PUDistY, PUDistC, dPUCost, tuRecurseWithPU, false, eACTRDTestType DEBUG_STRING_PASS_INTO(sMode)
+#if PCC_RDO_EXT
+                                , pcYuvOccupancy
+#endif
+                                 );
       }
       else
       {
@@ -7827,6 +8143,9 @@ TEncSearch::estIntraPredLumaQTWithModeReuse(TComDataCU* pcCU,
                                             TComYuv*    pcResiYuv,
                                             TComYuv*    pcRecoYuv,
                                             Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE]
+#if PCC_RDO_EXT
+                                          , TComYuv* pcOccupancyYuv
+#endif
                                            )
 {
   const UInt         depth               = pcCU->getDepth(0);
@@ -7869,7 +8188,11 @@ TEncSearch::estIntraPredLumaQTWithModeReuse(TComDataCU* pcCU,
     // set context models
     m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[depth][CI_CURR_BEST] );
 
-    xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, bestPUDistY, true, dBestPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode) );
+    xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, bestPUDistY, true, dBestPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode)
+#if PCC_RDO_EXT
+                              , pcOccupancyYuv
+#endif
+                            );
     xSetIntraResultLumaQT( pcRecoYuv, tuRecurseWithPU );
 
     if (pcCU->getSlice()->getPPS()->getPpsRangeExtension().getCrossComponentPredictionEnabledFlag())
@@ -7952,6 +8275,9 @@ TEncSearch::estIntraPredChromaQTWithModeReuse(TComDataCU* pcCU,
                                               TComYuv*    pcResiYuv,
                                               TComYuv*    pcRecoYuv,
                                               Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE]
+#if PCC_RDO_EXT
+                                             ,TComYuv*      pcYuvOccupancy
+#endif
                                              )
 {
   const UInt    initTrDepth  = pcCU->getPartitionSize(0) != SIZE_2Nx2N && enable4ChromaPUsInIntraNxNCU(pcOrgYuv->getChromaFormat()) ? 1 : 0;
@@ -7977,7 +8303,11 @@ TEncSearch::estIntraPredChromaQTWithModeReuse(TComDataCU* pcCU,
       DEBUG_STRING_NEW(sMode)
       //----- chroma coding -----
       Distortion dist = 0;
-      xRecurIntraChromaCodingQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, dist, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode) );
+      xRecurIntraChromaCodingQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, dist, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode)
+#if PCC_RDO_EXT
+                                  , pcYuvOccupancy
+#endif
+                                );
 
       xSetIntraResultChromaQT( pcRecoYuv, tuRecurseWithPU );
 
@@ -8032,7 +8362,11 @@ TEncSearch::estIntraPredChromaQTWithModeReuse(TComDataCU* pcCU,
   m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[depthCU][CI_CURR_BEST] );
 }
 
-UInt TEncSearch::paletteSearch(TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv*& rpcPredYuv, TComYuv*& rpcResiYuv, TComYuv*& rpcRecoYuv, Bool forcePalettePrediction, UInt iterNumber, UInt *paletteSizeCurrIter)
+UInt TEncSearch::paletteSearch(TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv*& rpcPredYuv, TComYuv*& rpcResiYuv, TComYuv*& rpcRecoYuv, Bool forcePalettePrediction, UInt iterNumber, UInt *paletteSizeCurrIter
+#if PCC_RDO_EXT
+    , TComYuv* pcYuvOccupancy
+#endif
+                               )
 {
   UInt  depth      = pcCU->getDepth(0);
   Distortion  distortion = 0;
@@ -8316,7 +8650,11 @@ UInt TEncSearch::paletteSearch(TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv*& rp
 
     Pel *pOrig = pcOrgYuv->getAddr(compID, 0);
     Pel *pReco = rpcRecoYuv->getAddr(compID, 0);
+#if PCC_RDO_EXT
+    distortion += m_pcRdCost->getDistPart( pcCU->getSlice()->getSPS()->getBitDepth(chType), pReco, stride, pOrig, stride, width, height, compID , DF_SSE, pcYuvOccupancy->getAddr(compID), pcYuvOccupancy->getStride(compID));
+#else
     distortion += m_pcRdCost->getDistPart( pcCU->getSlice()->getSPS()->getBitDepth(chType), pReco, stride, pOrig, stride, width, height, compID );
+#endif
   }
 
   Double dCost = m_pcRdCost->calcRdCost( bits, distortion );
@@ -12186,7 +12524,11 @@ Void TEncSearch::xEstimateInterResidualQTTUCSC( TComYuv        *pcResi,
                                                 TComTU         &rTu,
                                                 TComYuv*       pcOrgResi,
                                                 ACTRDTestTypes eACTRDType
-                                                DEBUG_STRING_FN_DECLARE(sDebug) )
+                                                DEBUG_STRING_FN_DECLARE(sDebug)
+#if PCC_RDO_EXT
+                                               ,TComYuv*    pcOccupancyYuv
+#endif
+                                               )
 {
   TComDataCU *pcCU          = rTu.getCU();
   const UInt absPartIdx     = rTu.GetAbsPartIdxTU();
@@ -12460,12 +12802,20 @@ Void TEncSearch::xEstimateInterResidualQTTUCSC( TComYuv        *pcResi,
 
                   nonCoeffDist = m_pcRdCost->getDistPart( channelBitDepth, m_pcQTTempTComYuv[QTTempAccessLayer].getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
                                                           m_pcQTTempTComYuv[QTTempAccessLayer].getStride( compID ), pcResi->getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
-                                                          pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID); // initialized with zero residual distortion
+                                                          pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID
+#if PCC_RDO_EXT
+                                                         , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Cr), pcOccupancyYuv->getStride(COMPONENT_Cr)
+#endif
+                                                      ); // initialized with zero residual distortion
                 }
                 else
                 {
                   nonCoeffDist = m_pcRdCost->getDistPart( channelBitDepth, m_pTempPel, tuCompRect.width, pcResi->getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
-                                                          pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID); // initialized with zero residual distortion
+                                                          pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Cr), pcOccupancyYuv->getStride(COMPONENT_Cr)
+#endif
+                                                         ); // initialized with zero residual distortion
                 }
 
                 m_pcEntropyCoder->encodeQtCbfZero( rTu, toChannelType(compID) );
@@ -12520,7 +12870,11 @@ Void TEncSearch::xEstimateInterResidualQTTUCSC( TComYuv        *pcResi,
                                                           m_pcQTTempTComYuv[QTTempAccessLayer].getStride(compID),
                                                           pcResi->getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
                                                           pcResi->getStride(compID),
-                                                          tuCompRect.width, tuCompRect.height, compID);
+                                                          tuCompRect.width, tuCompRect.height, compID
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Cr), pcOccupancyYuv->getStride(COMPONENT_Cr)
+#endif
+                                                         );
 
                   currCompCost = m_pcRdCost->calcRdCost(currCompBits, currCompDist);
 
@@ -12628,13 +12982,25 @@ Void TEncSearch::xEstimateInterResidualQTTUCSC( TComYuv        *pcResi,
 
         const TComRectangle &tuCompRect = rTu.getRect(COMPONENT_Y);
         singleDistComp[colorSpaceId][COMPONENT_Y ] = m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_LUMA ), m_pcQTTempTComYuv[QTTempAccessLayer].getAddrPix( COMPONENT_Y, tuCompRect.x0, tuCompRect.y0 ), m_pcQTTempTComYuv[QTTempAccessLayer].getStride(COMPONENT_Y),
-                                                                               pcOrgResi->getAddrPix( COMPONENT_Y, tuCompRect.x0, tuCompRect.y0 ), pcOrgResi->getStride(COMPONENT_Y), tuCompRect.width, tuCompRect.height, COMPONENT_Y );
+                                                                               pcOrgResi->getAddrPix( COMPONENT_Y, tuCompRect.x0, tuCompRect.y0 ), pcOrgResi->getStride(COMPONENT_Y), tuCompRect.width, tuCompRect.height, COMPONENT_Y
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Y), pcOccupancyYuv->getStride(COMPONENT_Y)
+#endif
+                                                                             );
 
         const TComRectangle &tuCompRectC = rTu.getRect(COMPONENT_Cb);
         singleDistComp[colorSpaceId][COMPONENT_Cb] = m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_CHROMA ), m_pcQTTempTComYuv[QTTempAccessLayer].getAddrPix( COMPONENT_Cb, tuCompRectC.x0, tuCompRectC.y0 ), m_pcQTTempTComYuv[QTTempAccessLayer].getStride(COMPONENT_Cb),
-                                                                               pcOrgResi->getAddrPix( COMPONENT_Cb, tuCompRectC.x0, tuCompRectC.y0 ), pcOrgResi->getStride(COMPONENT_Cb), tuCompRectC.width, tuCompRectC.height, COMPONENT_Cb );
+                                                                               pcOrgResi->getAddrPix( COMPONENT_Cb, tuCompRectC.x0, tuCompRectC.y0 ), pcOrgResi->getStride(COMPONENT_Cb), tuCompRectC.width, tuCompRectC.height, COMPONENT_Cb
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Cb), pcOccupancyYuv->getStride(COMPONENT_Cb)
+#endif
+                                                                             );
         singleDistComp[colorSpaceId][COMPONENT_Cr] = m_pcRdCost->getDistPart(pcCU->getSlice()->getSPS()->getBitDepth( CHANNEL_TYPE_CHROMA ), m_pcQTTempTComYuv[QTTempAccessLayer].getAddrPix( COMPONENT_Cr, tuCompRectC.x0, tuCompRectC.y0 ), m_pcQTTempTComYuv[QTTempAccessLayer].getStride(COMPONENT_Cr),
-                                                                               pcOrgResi->getAddrPix( COMPONENT_Cr, tuCompRectC.x0, tuCompRectC.y0 ), pcOrgResi->getStride(COMPONENT_Cr), tuCompRectC.width, tuCompRectC.height, COMPONENT_Cr );
+                                                                               pcOrgResi->getAddrPix( COMPONENT_Cr, tuCompRectC.x0, tuCompRectC.y0 ), pcOrgResi->getStride(COMPONENT_Cr), tuCompRectC.width, tuCompRectC.height, COMPONENT_Cr
+#if PCC_RDO_EXT
+                                               , DF_SSE, pcOccupancyYuv->getAddr(COMPONENT_Cr), pcOccupancyYuv->getStride(COMPONENT_Cr)
+#endif
+                                                                             );
       }
 
       m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[ depth ][ CI_QT_TRAFO_ROOT ] );
@@ -12773,7 +13139,11 @@ Void TEncSearch::xEstimateInterResidualQTTUCSC( TComYuv        *pcResi,
 
       do
       {
-        xEstimateInterResidualQTTUCSC( pcResi, dSubdivCost, uiSubdivBits, uiSubdivDist, tuRecurseChild, pcOrgResi, eACTRDType DEBUG_STRING_PASS_INTO(sSplitString));
+        xEstimateInterResidualQTTUCSC( pcResi, dSubdivCost, uiSubdivBits, uiSubdivDist, tuRecurseChild, pcOrgResi, eACTRDType DEBUG_STRING_PASS_INTO(sSplitString)
+#if PCC_RDO_EXT
+                                    , pcOccupancyYuv
+#endif
+                                      );
       }
       while ( tuRecurseChild.nextSection(rTu) ) ;
 
@@ -15001,3 +15371,6 @@ Void TEncSearch::xInitTBCTable()
 }
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/TEncSearch.h b/source/Lib/TLibEncoder/TEncSearch.h
index bd9e0888..8009fe3c 100644
--- a/source/Lib/TLibEncoder/TEncSearch.h
+++ b/source/Lib/TLibEncoder/TEncSearch.h
@@ -50,6 +50,7 @@
 #include "TEncSbac.h"
 #include "TEncCfg.h"
 #include "TLibCommon/TComHash.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -243,6 +244,9 @@ protected:
 public:
   Void  estIntraPredLumaQT      ( TComDataCU* pcCU,
                                   TComYuv*    pcOrgYuv,
+#if PCC_RDO_EXT
+                                  TComYuv*    pcOccupancyYuv,
+#endif
                                   TComYuv*    pcPredYuv,
                                   TComYuv*    pcResiYuv,
                                   TComYuv*    pcRecoYuv,
@@ -251,6 +255,9 @@ public:
 
   Void  estIntraPredChromaQT    ( TComDataCU* pcCU,
                                   TComYuv*    pcOrgYuv,
+#if PCC_RDO_EXT
+                                  TComYuv*    pcOccupancyYuv,
+#endif
                                   TComYuv*    pcPredYuv,
                                   TComYuv*    pcResiYuv,
                                   TComYuv*    pcRecoYuv,
@@ -281,7 +288,12 @@ public:
                                   Bool        bSkipResidual,
                                   TComYuv*    pcYuvNoCorrResi,
                                   ACTRDTestTypes eACTRDTestType
+#if PCC_RDO_EXT
+                                  DEBUG_STRING_FN_DECLARE(sDebug),
+                                  TComYuv*    pcYuvOccupancy = NULL);
+#else
                                   DEBUG_STRING_FN_DECLARE(sDebug) );
+#endif
 
   /// set ME search range
   Void setAdaptiveSearchRange   ( Int iDir, Int iRefIdx, Int iSearchRange) { assert(iDir < MAX_NUM_REF_LIST_ADAPT_SR && iRefIdx<Int(MAX_IDX_ADAPT_SR)); m_aaiAdaptSR[iDir][iRefIdx] = iSearchRange; }
@@ -297,6 +309,9 @@ public:
                                   ACTRDTestTypes eACTRDTestType,
                                   Bool           bReuseIntraMode
                                   DEBUG_STRING_FN_DECLARE(sDebug)
+#if PCC_RDO_EXT
+                                 ,TComYuv*      pcYuvOccupancy
+#endif
                                  );
 
   Void  estIntraPredLumaQTWithModeReuse ( TComDataCU* pcCU,
@@ -305,6 +320,9 @@ public:
                                           TComYuv*    pcResiYuv,
                                           TComYuv*    pcRecoYuv,
                                           Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE]
+#if PCC_RDO_EXT
+                                         ,TComYuv*      pcYuvOccupancy
+#endif
                                     );
 
   Void  estIntraPredChromaQTWithModeReuse ( TComDataCU* pcCU,
@@ -313,6 +331,9 @@ public:
                                             TComYuv*    pcResiYuv,
                                             TComYuv*    pcRecoYuv,
                                             Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE]
+#if PCC_RDO_EXT
+                                           ,TComYuv*      pcYuvOccupancy
+#endif
                                           );
 
   Bool isBlockVectorValid( Int xPos, Int yPos, Int width, Int height, TComDataCU *pcCU,
@@ -479,7 +500,11 @@ public:
 
   Void updateBVMergeCandLists(int roiWidth, int roiHeight, TComMv* mvCand);
 
-  UInt paletteSearch  (TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv*& rpcPredYuv, TComYuv*& rpcResiYuv, TComYuv*& rpcRecoYuv, Bool forcePalettePrediction, UInt iterNumber, UInt *paletteSize);
+  UInt paletteSearch  (TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv*& rpcPredYuv, TComYuv*& rpcResiYuv, TComYuv*& rpcRecoYuv, Bool forcePalettePrediction, UInt iterNumber, UInt *paletteSize
+#if PCC_RDO_EXT
+    , TComYuv* pcYuvOccupancy
+#endif
+    );
 
   Void deriveRunAndCalcBits( TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv* pcRecoYuv, UInt& minBits, Bool bReset, PaletteScanMode paletteScanMode);
 
@@ -541,6 +566,9 @@ protected:
                                    Bool          bRealCoeff );
 
   Void  xIntraCodingTUBlock       (       TComYuv*      pcOrgYuv,
+#if PCC_RDO_EXT
+                                          TComYuv*      pcOccupancyYuv,
+#endif
                                           TComYuv*      pcPredYuv,
                                           TComYuv*      pcResiYuv,
                                           Pel           resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE],
@@ -562,7 +590,12 @@ protected:
 #endif
                                     Double&      dRDCost,
                                     TComTU      &rTu
+#if PCC_RDO_EXT
+                                    DEBUG_STRING_FN_DECLARE(sDebug),
+                                    TComYuv*     pcOccupancyYuv = NULL);
+#else
                                     DEBUG_STRING_FN_DECLARE(sDebug));
+#endif
 
   Void  xSetIntraResultLumaQT     ( TComYuv*     pcRecoYuv,
                                     TComTU &rTu);
@@ -590,7 +623,12 @@ protected:
                                     Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE],
                                     Distortion& ruiDist,
                                     TComTU      &rTu
+#if PCC_RDO_EXT
+                                    DEBUG_STRING_FN_DECLARE(sDebug),
+                                    TComYuv*    pcOccupancyYuv = NULL);
+#else
                                     DEBUG_STRING_FN_DECLARE(sDebug));
+#endif
 
   Void  xSetIntraResultChromaQT   ( TComYuv*    pcRecoYuv, TComTU &rTu);
 
@@ -751,7 +789,11 @@ protected:
 
 
   Void xEncodeInterResidualQT( const ComponentID compID, TComTU &rTu );
-  Void xEstimateInterResidualQT( TComYuv* pcResi, Double &rdCost, UInt &ruiBits, Distortion &ruiDist, Distortion *puiZeroDist, TComTU &rTu DEBUG_STRING_FN_DECLARE(sDebug), TComYuv* pcOrgResi = NULL );
+#if PCC_RDO_EXT
+  Void xEstimateInterResidualQT(TComYuv* pcResi, Double &rdCost, UInt &ruiBits, Distortion &ruiDist, Distortion *puiZeroDist, TComTU &rTu DEBUG_STRING_FN_DECLARE(sDebug), TComYuv* pcOrgResi = NULL, TComYuv* pcOccupancy = NULL);
+#else
+  Void xEstimateInterResidualQT(TComYuv* pcResi, Double &rdCost, UInt &ruiBits, Distortion &ruiDist, Distortion *puiZeroDist, TComTU &rTu DEBUG_STRING_FN_DECLARE(sDebug), TComYuv* pcOrgResi = NULL);
+#endif
   Void xSetInterResidualQTData( TComYuv* pcResi, Bool bSpatial, TComTU &rTu  );
 
   UInt  xModeBitsIntra ( TComDataCU* pcCU, UInt uiMode, UInt uiPartOffset, UInt uiDepth, const ChannelType compID );
@@ -789,6 +831,9 @@ protected:
                                     Bool           bTestMaxTUSize,
                                     ACTRDTestTypes eACTRDTestType
                                     DEBUG_STRING_FN_DECLARE(sDebug)
+#if PCC_RDO_EXT
+                                  , TComYuv* pcOccupancyYuv
+#endif
                                    );
 
   Void  xRecurIntraCodingQTCSC    ( TComYuv*     pcOrgYuv,
@@ -800,9 +845,16 @@ protected:
                                     TComTU&      rTu,
                                     Bool         bTestMaxTUSize
                                     DEBUG_STRING_FN_DECLARE(sDebug)
+#if PCC_RDO_EXT
+                                   ,TComYuv*    pcOccupancyYuv
+#endif
                                   );
 
-  Void xEstimateInterResidualQTTUCSC( TComYuv* pcResi, Double &rdCost, UInt &bits, Distortion &dist, TComTU &rTu, TComYuv* pcOrgResi, ACTRDTestTypes eACTRDtype DEBUG_STRING_FN_DECLARE(sDebug) );
+  Void xEstimateInterResidualQTTUCSC( TComYuv* pcResi, Double &rdCost, UInt &bits, Distortion &dist, TComTU &rTu, TComYuv* pcOrgResi, ACTRDTestTypes eACTRDtype DEBUG_STRING_FN_DECLARE(sDebug)
+#if PCC_RDO_EXT
+                                   ,TComYuv*    pcOccupancyYuv
+#endif
+  );
 
   // Palette related functions
   Void  xInitTBCTable();
@@ -841,4 +893,6 @@ protected:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TENCSEARCH__
+
diff --git a/source/Lib/TLibEncoder/TEncSlice.cpp b/source/Lib/TLibEncoder/TEncSlice.cpp
index db9f08ad..3f4d77a7 100644
--- a/source/Lib/TLibEncoder/TEncSlice.cpp
+++ b/source/Lib/TLibEncoder/TEncSlice.cpp
@@ -38,6 +38,7 @@
 #include "TEncTop.h"
 #include "TEncSlice.h"
 #include <math.h>
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -1837,3 +1838,6 @@ Void TEncSlice::xSetPredDefault(Pel lastPalette[MAX_NUM_COMPONENT][MAX_PALETTE_P
   }
 }
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/TEncSlice.h b/source/Lib/TLibEncoder/TEncSlice.h
index 554f7ca6..3c21748d 100644
--- a/source/Lib/TLibEncoder/TEncSlice.h
+++ b/source/Lib/TLibEncoder/TEncSlice.h
@@ -46,6 +46,7 @@
 #include "TEncCu.h"
 #include "WeightPredAnalysis.h"
 #include "TEncRateCtrl.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -152,4 +153,6 @@ private:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TENCSLICE__
+
diff --git a/source/Lib/TLibEncoder/TEncTop.cpp b/source/Lib/TLibEncoder/TEncTop.cpp
index aef01047..8f856836 100644
--- a/source/Lib/TLibEncoder/TEncTop.cpp
+++ b/source/Lib/TLibEncoder/TEncTop.cpp
@@ -42,6 +42,7 @@
 #if FAST_BIT_EST
 #include "TLibCommon/ContextModel.h"
 #endif
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -362,7 +363,21 @@ Void TEncTop::encode( Bool flush, TComPicYuv* pcPicYuvOrg, TComPicYuv* pcPicYuvT
   }
 
   // compress GOP
+#if PCC_ME_EXT
+  if (m_usePCCExt) printf("\n\tPCC ME GOP #1 ACTIVE\n");
+#if PCC_RDO_EXT
+  if (m_usePCCRDOExt) printf("\n\tPCC RDO GOP #1 ACTIVE\n");
+  m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, false, false, snrCSC, getOutputLogControl(), m_usePCCExt, m_usePCCRDOExt);
+#else
+  m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, false, false, snrCSC, getOutputLogControl(), m_usePCCExt);
+#endif
+#else
+#if PCC_RDO_EXT
+  m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, false, false, snrCSC, getOutputLogControl(), m_usePCCRDOExt);
+#else
   m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, false, false, snrCSC, getOutputLogControl());
+#endif
+#endif
 
   if ( m_RCEnableRateControl )
   {
@@ -466,7 +481,21 @@ Void TEncTop::encode(Bool flush, TComPicYuv* pcPicYuvOrg, TComPicYuv* pcPicYuvTr
     if ( m_iNumPicRcvd && ((flush&&fieldNum==1) || (m_iPOCLast/2)==0 || m_iNumPicRcvd==m_iGOPSize ) )
     {
       // compress GOP
+#if PCC_ME_EXT
+      if (m_usePCCExt) printf("\n\tPCC ME GOP #2 ACTIVE\n");
+#if PCC_RDO_EXT
+      if (m_usePCCRDOExt) printf("\n\tPCC RDO GOP #2 ACTIVE\n");
+      m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, false, false, snrCSC, getOutputLogControl(), m_usePCCExt, m_usePCCRDOExt);
+#else
+      m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, false, false, snrCSC, getOutputLogControl(), m_usePCCExt);
+#endif
+#else
+#if PCC_RDO_EXT
+      m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, true, isTff, snrCSC, getOutputLogControl(), m_usePCCRDOExt);
+#else
       m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, true, isTff, snrCSC, getOutputLogControl());
+#endif
+#endif
       iNumEncoded += m_iNumPicRcvd;
       m_uiNumAllPicCoded += m_iNumPicRcvd;
       m_iNumPicRcvd = 0;
@@ -1491,3 +1520,6 @@ Int TEncCfg::getQPForPicture(const UInt gopIndex, const TComSlice *pSlice) const
 #endif
 
 //! \}
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/TEncTop.h b/source/Lib/TLibEncoder/TEncTop.h
index 0e1048e7..6a190f57 100644
--- a/source/Lib/TLibEncoder/TEncTop.h
+++ b/source/Lib/TLibEncoder/TEncTop.h
@@ -57,6 +57,7 @@
 #include "TEncSampleAdaptiveOffset.h"
 #include "TEncPreanalyzer.h"
 #include "TEncRateCtrl.h"
+namespace pcc_hm {
 //! \ingroup TLibEncoder
 //! \{
 
@@ -207,5 +208,7 @@ public:
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TENCTOP__
 
+
diff --git a/source/Lib/TLibEncoder/WeightPredAnalysis.cpp b/source/Lib/TLibEncoder/WeightPredAnalysis.cpp
index 333fe230..d8a96938 100644
--- a/source/Lib/TLibEncoder/WeightPredAnalysis.cpp
+++ b/source/Lib/TLibEncoder/WeightPredAnalysis.cpp
@@ -41,6 +41,7 @@
 #include "../TLibCommon/TComPicYuv.h"
 #include "WeightPredAnalysis.h"
 #include <limits>
+namespace pcc_hm {
 
 static const Double WEIGHT_PRED_SAD_RELATIVE_TO_NON_WEIGHT_PRED_SAD=0.99; // NOTE: U0040 used 0.95
 
@@ -744,3 +745,6 @@ Int64 xCalcSADvalueWPOptionalClip(const Int   bitDepth,
   }
   return SAD;
 }
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibEncoder/WeightPredAnalysis.h b/source/Lib/TLibEncoder/WeightPredAnalysis.h
index b59c3ca7..d986793d 100644
--- a/source/Lib/TLibEncoder/WeightPredAnalysis.h
+++ b/source/Lib/TLibEncoder/WeightPredAnalysis.h
@@ -40,6 +40,7 @@
 #include "../TLibCommon/CommonDef.h"
 #include "../TLibCommon/TComSlice.h"
 #include "TEncCavlc.h"
+namespace pcc_hm {
 
 class  WeightPredAnalysis
 {
@@ -64,4 +65,6 @@ public:
   Void  xCheckWPEnable       (TComSlice *const slice);
 };
 
+} // namespace pcc_hm
 #endif // __WEIGHTPREDANALYSIS__
+
diff --git a/source/Lib/TLibVideoIO/TVideoIOYuv.cpp b/source/Lib/TLibVideoIO/TVideoIOYuv.cpp
index dbb743a7..170e862c 100644
--- a/source/Lib/TLibVideoIO/TVideoIOYuv.cpp
+++ b/source/Lib/TLibVideoIO/TVideoIOYuv.cpp
@@ -45,6 +45,7 @@
 
 #include "TLibCommon/TComRom.h"
 #include "TVideoIOYuv.h"
+namespace pcc_hm {
 
 using namespace std;
 
@@ -1051,3 +1052,6 @@ Void TVideoIOYuv::ColourSpaceConvert(const TComPicYuv &src, TComPicYuv &dest, co
       break;
   }
 }
+
+
+} // namespace pcc_hm
diff --git a/source/Lib/TLibVideoIO/TVideoIOYuv.h b/source/Lib/TLibVideoIO/TVideoIOYuv.h
index fff74555..e3a59ec9 100644
--- a/source/Lib/TLibVideoIO/TVideoIOYuv.h
+++ b/source/Lib/TLibVideoIO/TVideoIOYuv.h
@@ -43,6 +43,7 @@
 #include <iostream>
 #include "TLibCommon/CommonDef.h"
 #include "TLibCommon/TComPicYuv.h"
+namespace pcc_hm {
 
 using namespace std;
 
@@ -87,5 +88,7 @@ public:
 
 };
 
+} // namespace pcc_hm
 #endif // __TVIDEOIOYUV__
 
+
diff --git a/source/Lib/libmd5/MD5.h b/source/Lib/libmd5/MD5.h
index 98c01cda..161cd360 100644
--- a/source/Lib/libmd5/MD5.h
+++ b/source/Lib/libmd5/MD5.h
@@ -33,11 +33,12 @@
 #pragma once
 #include "libmd5.h"
 #include <string>
+namespace pcc_hm {
 
 //! \ingroup libMD5
 //! \{
 
-static const UInt MD5_DIGEST_STRING_LENGTH=16;
+static const uint32_t MD5_DIGEST_STRING_LENGTH=16;
 
 class MD5
 {
@@ -73,3 +74,5 @@ private:
 
 
 //! \}
+
+}
\ No newline at end of file
diff --git a/source/Lib/libmd5/libmd5.h b/source/Lib/libmd5/libmd5.h
index 40ade559..2d712ed7 100644
--- a/source/Lib/libmd5/libmd5.h
+++ b/source/Lib/libmd5/libmd5.h
@@ -56,3 +56,4 @@ void MD5Final(unsigned char digest[16], context_md5_t *ctx);
 #endif
 
 //! \}
+
